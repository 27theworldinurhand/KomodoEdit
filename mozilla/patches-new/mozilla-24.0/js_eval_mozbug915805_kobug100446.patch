# HG changeset patch
# Parent afa6f48ffe9cad472abf4d40d498576152ed2345
# User Jeff Walden <jwalden@mit.edu>
Bug 915805 - Don't treat unbound names in Function() code as globals, when the Function() code contains a direct eval or similarly-extensible scope.  NOT REVIEWED YET

diff --git a/js/src/frontend/BytecodeEmitter.cpp b/js/src/frontend/BytecodeEmitter.cpp
--- a/js/src/frontend/BytecodeEmitter.cpp
+++ b/js/src/frontend/BytecodeEmitter.cpp
@@ -1179,48 +1179,54 @@ TryConvertFreeName(BytecodeEmitter *bce,
         }
     }
 
-    /*
-     * Try to convert free names in global scope to GNAME opcodes.
-     *
-     * This conversion is not made if we are in strict mode. In eval code nested
-     * within (strict mode) eval code, access to an undeclared "global" might
-     * merely be to a binding local to that outer eval:
-     *
-     *   "use strict";
-     *   var x = "global";
-     *   eval('var x = "eval"; eval("x");'); // 'eval', not 'global'
-     *
-     * Outside eval code, access to an undeclared global is a strict mode error:
-     *
-     *   "use strict";
-     *   function foo()
-     *   {
-     *     undeclared = 17; // throws ReferenceError
-     *   }
-     *   foo();
-     */
-    if (bce->script->compileAndGo &&
-        bce->hasGlobalScope &&
-        !(bce->sc->isFunctionBox() && bce->sc->asFunctionBox()->mightAliasLocals()) &&
-        !pn->isDeoptimized() &&
-        !(bce->sc->strict && bce->insideEval))
-    {
-        // If you change anything here, you might also need to change
-        // js::ReportIfUndeclaredVarAssignment.
-        JSOp op;
-        switch (pn->getOp()) {
-          case JSOP_NAME:     op = JSOP_GETGNAME; break;
-          case JSOP_SETNAME:  op = JSOP_SETGNAME; break;
-          case JSOP_SETCONST:
-            /* Not supported. */
-            return false;
-          default: MOZ_ASSUME_UNREACHABLE("gname");
-        }
-        pn->setOp(op);
-        return true;
-    }
-
-    return false;
+    // Unbound names aren't recognizable global-property references if the
+    // script isn't running against its global object.
+    if (!bce->script->compileAndGo || !bce->hasGlobalScope)
+        return false;
+
+    // Deoptimized names also aren't necessarily globals.
+    if (pn->isDeoptimized())
+        return false;
+
+    if (bce->sc->isFunctionBox()) {
+        // Unbound names in function code may not be globals if the scope is
+        // extensible (the function could grow the name as a local at runtime)
+        // or if new locals can be added to this function (or an enclosing one)
+        // to alias a global reference.
+        FunctionBox *funbox = bce->sc->asFunctionBox();
+        if (funbox->hasExtensibleScope() || funbox->mightAliasLocals())
+            return false;
+    }
+
+    // If this is eval code, being evaluated inside strict mode eval code,
+    // an "unbound" name might be a binding local to that outer eval:
+    //
+    //   var x = "GLOBAL";
+    //   eval('"use strict"; ' +
+    //        'var x = "EVAL"; ' +
+    //        'eval("x");'); // should be "EVAL", not "GLOBAL"
+    //
+    // Given the enclosing eval code's strictness and its bindings (neither is
+    // readily available now), we could exactly check global-ness, but it's not
+    // worth the trouble for doubly-nested eval code.  So we conservatively
+    // approximate.  If the outer eval code is strict, then this eval code will
+    // be: thus, don't optimize if we're compiling strict code inside an eval.
+    if (bce->insideEval && bce->sc->strict)
+        return false;
+
+    // Beware: if you change anything here, you might also need to change
+    // js::ReportIfUndeclaredVarAssignment.
+    JSOp op;
+    switch (pn->getOp()) {
+      case JSOP_NAME:     op = JSOP_GETGNAME; break;
+      case JSOP_SETNAME:  op = JSOP_SETGNAME; break;
+      case JSOP_SETCONST:
+        /* Not supported. */
+        return false;
+      default: MOZ_ASSUME_UNREACHABLE("gname");
+    }
+    pn->setOp(op);
+    return true;
 }
 
 /*
diff --git a/js/src/tests/ecma_5/Function/Function-with-eval-uses-global.js b/js/src/tests/ecma_5/Function/Function-with-eval-uses-global.js
new file mode 100644
--- /dev/null
+++ b/js/src/tests/ecma_5/Function/Function-with-eval-uses-global.js
@@ -0,0 +1,26 @@
+/*
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/licenses/publicdomain/
+ */
+
+var gTestfile = "Function-with-eval-uses-global.js";
+//-----------------------------------------------------------------------------
+var BUGNUMBER = 915805;
+var summary =
+  "Inside Function() code, a reference to a variable defined in that code " +
+  "only via a runtime eval() call instead refers to that property on the " +
+  "global object";
+
+print(BUGNUMBER + ": " + summary);
+
+/**************
+ * BEGIN TEST *
+ **************/
+
+assertEq(Function("delete x; eval('var x = 42'); return x;")(), 42);
+
+/******************************************************************************/
+
+reportCompare(true, true);
+
+print("Tests complete");
