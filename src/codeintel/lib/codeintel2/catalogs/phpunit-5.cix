<?xml version="1.0" encoding="UTF-8"?>
<codeintel description="A programmer-oriented testing framework for PHP" name="PHPUnit 5.x" version="2.0">
  <file lang="PHP" mtime="1474645199" path="Exception.php">
    <scope ilk="blob" lang="PHP" name="Exception.php" src="phpunit-5.5.0/src/Exception.php">
      <scope ilk="interface" line="16" lineend="18" name="PHPUnit_Exception" signature="PHPUnit_Exception" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645199" path="TestCase.php">
    <scope ilk="blob" lang="PHP" name="TestCase.php" src="phpunit-5.5.0/src/ForwardCompatibility/TestCase.php">
      <scope doc="This file is part of PHPUnit.&#xA;&#xA;(c) Sebastian Bergmann &lt;sebastian@phpunit.de&gt;&#xA;&#xA;For the full copyright and license information, please view the LICENSE&#xA;file that was distributed with this source code." ilk="namespace" line="11" name="PHPUnit\Framework">
        <import line="13" module="" symbol="PHPUnit_Framework_TestCase" />
        <scope classrefs="PHPUnit_Framework_TestCase" ilk="class" line="15" lineend="17" name="TestCase" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645199" path="Assert.php">
    <scope ilk="blob" lang="PHP" name="Assert.php" src="phpunit-5.5.0/src/Framework/Assert.php">
      <scope attributes="abstract" doc="A set of assert methods.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" line="16" lineend="2926" name="PHPUnit_Framework_Assert">
        <variable attributes="private static" citdl="int" doc="@var int" line="21" name="count" />
        <scope attributes="public static" doc="&#xA;Asserts that an array has a specified key.&#xA;&lt;mixed&gt; $key  - &#xA;&lt;array|arrayaccess&gt; $array  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="32" lineend="51" name="assertArrayHasKey" signature="assertArrayHasKey(mixed $key, $array, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an array has a specified subset.&#xA;&lt;array|arrayaccess&gt; $subset  - &#xA;&lt;array|arrayaccess&gt; $array  - &#xA;&lt;bool&gt; $strict  - Check for object identity&#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 4.4.0&#xA;" ilk="function" line="63" lineend="82" name="assertArraySubset" signature="assertArraySubset($subset, $array, bool $strict = false, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an array does not have a specified key.&#xA;&lt;mixed&gt; $key  - &#xA;&lt;array|arrayaccess&gt; $array  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="93" lineend="114" name="assertArrayNotHasKey" signature="assertArrayNotHasKey(mixed $key, $array, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a haystack contains a needle.&#xA;&lt;mixed&gt; $needle  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;&lt;bool&gt; $checkForObjectIdentity  - &#xA;&lt;bool&gt; $checkForNonObjectIdentity  - &#xA;Since Method available since Release 2.1.0&#xA;" ilk="function" line="128" lineend="157" name="assertContains" signature="assertContains(mixed $needle, mixed $haystack, string $message = &apos;&apos;, bool $ignoreCase = false, bool $checkForObjectIdentity = true, bool $checkForNonObjectIdentity = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that a haystack that is stored in a static attribute of a class&#xA;or an attribute of an object contains a needle.&#xA;&lt;mixed&gt; $needle  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;string|object&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;&lt;bool&gt; $checkForObjectIdentity  - &#xA;&lt;bool&gt; $checkForNonObjectIdentity  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="173" lineend="183" name="assertAttributeContains" signature="assertAttributeContains(mixed $needle, string $haystackAttributeName, $haystackClassOrObject, string $message = &apos;&apos;, bool $ignoreCase = false, bool $checkForObjectIdentity = true, bool $checkForNonObjectIdentity = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that a haystack does not contain a needle.&#xA;&lt;mixed&gt; $needle  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;&lt;bool&gt; $checkForObjectIdentity  - &#xA;&lt;bool&gt; $checkForNonObjectIdentity  - &#xA;Since Method available since Release 2.1.0&#xA;" ilk="function" line="197" lineend="230" name="assertNotContains" signature="assertNotContains(mixed $needle, mixed $haystack, string $message = &apos;&apos;, bool $ignoreCase = false, bool $checkForObjectIdentity = true, bool $checkForNonObjectIdentity = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that a haystack that is stored in a static attribute of a class&#xA;or an attribute of an object does not contain a needle.&#xA;&lt;mixed&gt; $needle  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;string|object&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;&lt;bool&gt; $checkForObjectIdentity  - &#xA;&lt;bool&gt; $checkForNonObjectIdentity  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="246" lineend="256" name="assertAttributeNotContains" signature="assertAttributeNotContains(mixed $needle, string $haystackAttributeName, $haystackClassOrObject, string $message = &apos;&apos;, bool $ignoreCase = false, bool $checkForObjectIdentity = true, bool $checkForNonObjectIdentity = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that a haystack contains only values of a given type.&#xA;&lt;string&gt; $type  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;bool&gt; $isNativeType  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.4&#xA;" ilk="function" line="268" lineend="290" name="assertContainsOnly" signature="assertContainsOnly(string $type, mixed $haystack, bool $isNativeType = null, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a haystack contains only instances of a given classname&#xA;&lt;string&gt; $classname  - &#xA;&lt;array|traversable&gt; $haystack  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="299" lineend="317" name="assertContainsOnlyInstancesOf" signature="assertContainsOnlyInstancesOf(string $classname, $haystack, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a haystack that is stored in a static attribute of a class&#xA;or an attribute of an object contains only values of a given type.&#xA;&lt;string&gt; $type  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;string|object&gt; $haystackClassOrObject  - &#xA;&lt;bool&gt; $isNativeType  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.4&#xA;" ilk="function" line="331" lineend="339" name="assertAttributeContainsOnly" signature="assertAttributeContainsOnly(string $type, string $haystackAttributeName, $haystackClassOrObject, bool $isNativeType = null, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a haystack does not contain only values of a given type.&#xA;&lt;string&gt; $type  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;bool&gt; $isNativeType  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.4&#xA;" ilk="function" line="351" lineend="375" name="assertNotContainsOnly" signature="assertNotContainsOnly(string $type, mixed $haystack, bool $isNativeType = null, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a haystack that is stored in a static attribute of a class&#xA;or an attribute of an object does not contain only values of a given&#xA;type.&#xA;&lt;string&gt; $type  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;string|object&gt; $haystackClassOrObject  - &#xA;&lt;bool&gt; $isNativeType  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.4&#xA;" ilk="function" line="390" lineend="398" name="assertAttributeNotContainsOnly" signature="assertAttributeNotContainsOnly(string $type, string $haystackAttributeName, $haystackClassOrObject, bool $isNativeType = null, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts the number of elements of an array, Countable or Traversable.&#xA;&lt;int&gt; $expectedCount  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="407" lineend="424" name="assertCount" signature="assertCount(int $expectedCount, mixed $haystack, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts the number of elements of an array, Countable or Traversable&#xA;that is stored in an attribute.&#xA;&lt;int&gt; $expectedCount  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;string|object&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="437" lineend="444" name="assertAttributeCount" signature="assertAttributeCount(int $expectedCount, string $haystackAttributeName, $haystackClassOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts the number of elements of an array, Countable or Traversable.&#xA;&lt;int&gt; $expectedCount  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="453" lineend="470" name="assertNotCount" signature="assertNotCount(int $expectedCount, mixed $haystack, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts the number of elements of an array, Countable or Traversable&#xA;that is stored in an attribute.&#xA;&lt;int&gt; $expectedCount  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;string|object&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="483" lineend="490" name="assertAttributeNotCount" signature="assertAttributeNotCount(int $expectedCount, string $haystackAttributeName, $haystackClassOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two variables are equal.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;" ilk="function" line="503" lineend="514" name="assertEquals" signature="assertEquals(mixed $expected, mixed $actual, string $message = &apos;&apos;, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is equal to an attribute of an object.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string|object&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;" ilk="function" line="528" lineend="539" name="assertAttributeEquals" signature="assertAttributeEquals(mixed $expected, string $actualAttributeName, $actualClassOrObject, string $message = &apos;&apos;, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that two variables are not equal.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Since Method available since Release 2.3.0&#xA;" ilk="function" line="554" lineend="567" name="assertNotEquals" signature="assertNotEquals(mixed $expected, mixed $actual, string $message = &apos;&apos;, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is not equal to an attribute of an object.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string|object&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;" ilk="function" line="581" lineend="592" name="assertAttributeNotEquals" signature="assertAttributeNotEquals(mixed $expected, string $actualAttributeName, $actualClassOrObject, string $message = &apos;&apos;, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is empty.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="602" lineend="605" name="assertEmpty" signature="assertEmpty(mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a static attribute of a class or an attribute of an object&#xA;is empty.&#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;string|object&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="617" lineend="623" name="assertAttributeEmpty" signature="assertAttributeEmpty(string $haystackAttributeName, $haystackClassOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is not empty.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="633" lineend="636" name="assertNotEmpty" signature="assertNotEmpty(mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a static attribute of a class or an attribute of an object&#xA;is not empty.&#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;string|object&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="648" lineend="654" name="assertAttributeNotEmpty" signature="assertAttributeNotEmpty(string $haystackAttributeName, $haystackClassOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a value is greater than another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="665" lineend="668" name="assertGreaterThan" signature="assertGreaterThan(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an attribute is greater than another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string|object&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="680" lineend="687" name="assertAttributeGreaterThan" signature="assertAttributeGreaterThan(mixed $expected, string $actualAttributeName, $actualClassOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a value is greater than or equal to another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="698" lineend="705" name="assertGreaterThanOrEqual" signature="assertGreaterThanOrEqual(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an attribute is greater than or equal to another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string|object&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="717" lineend="724" name="assertAttributeGreaterThanOrEqual" signature="assertAttributeGreaterThanOrEqual(mixed $expected, string $actualAttributeName, $actualClassOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a value is smaller than another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="735" lineend="738" name="assertLessThan" signature="assertLessThan(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an attribute is smaller than another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string|object&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="750" lineend="757" name="assertAttributeLessThan" signature="assertAttributeLessThan(mixed $expected, string $actualAttributeName, $actualClassOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a value is smaller than or equal to another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="768" lineend="771" name="assertLessThanOrEqual" signature="assertLessThanOrEqual(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an attribute is smaller than or equal to another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string|object&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="783" lineend="790" name="assertAttributeLessThanOrEqual" signature="assertAttributeLessThanOrEqual(mixed $expected, string $actualAttributeName, $actualClassOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that the contents of one file is equal to the contents of another&#xA;file.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Since Method available since Release 3.2.14&#xA;" ilk="function" line="804" lineend="818" name="assertFileEquals" signature="assertFileEquals(string $expected, string $actual, string $message = &apos;&apos;, bool $canonicalize = false, bool $ignoreCase = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that the contents of one file is not equal to the contents of&#xA;another file.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Since Method available since Release 3.2.14&#xA;" ilk="function" line="832" lineend="846" name="assertFileNotEquals" signature="assertFileNotEquals(string $expected, string $actual, string $message = &apos;&apos;, bool $canonicalize = false, bool $ignoreCase = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that the contents of a string is equal&#xA;to the contents of a file.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualString  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="860" lineend="873" name="assertStringEqualsFile" signature="assertStringEqualsFile(string $expectedFile, string $actualString, string $message = &apos;&apos;, bool $canonicalize = false, bool $ignoreCase = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that the contents of a string is not equal&#xA;to the contents of a file.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualString  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="887" lineend="900" name="assertStringNotEqualsFile" signature="assertStringNotEqualsFile(string $expectedFile, string $actualString, string $message = &apos;&apos;, bool $canonicalize = false, bool $ignoreCase = false)" />
        <scope attributes="public static" doc="&#xA;Asserts that a file exists.&#xA;&lt;string&gt; $filename  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="910" lineend="919" name="assertFileExists" signature="assertFileExists(string $filename, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a file does not exist.&#xA;&lt;string&gt; $filename  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="929" lineend="940" name="assertFileNotExists" signature="assertFileNotExists(string $filename, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a condition is true.&#xA;&lt;bool&gt; $condition  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="950" lineend="953" name="assertTrue" signature="assertTrue(bool $condition, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a condition is not true.&#xA;&lt;bool&gt; $condition  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="963" lineend="966" name="assertNotTrue" signature="assertNotTrue(bool $condition, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a condition is false.&#xA;&lt;bool&gt; $condition  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="976" lineend="979" name="assertFalse" signature="assertFalse(bool $condition, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a condition is not false.&#xA;&lt;bool&gt; $condition  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="989" lineend="992" name="assertNotFalse" signature="assertNotFalse(bool $condition, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is null.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1000" lineend="1003" name="assertNull" signature="assertNull(mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is not null.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1011" lineend="1014" name="assertNotNull" signature="assertNotNull(mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is finite.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1022" lineend="1025" name="assertFinite" signature="assertFinite(mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is infinite.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1033" lineend="1036" name="assertInfinite" signature="assertInfinite(mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is nan.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1044" lineend="1047" name="assertNan" signature="assertNan(mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a class has a specified attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1058" lineend="1077" name="assertClassHasAttribute" signature="assertClassHasAttribute(string $attributeName, string $className, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a class does not have a specified attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1088" lineend="1107" name="assertClassNotHasAttribute" signature="assertClassNotHasAttribute(string $attributeName, string $className, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a class has a specified static attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1118" lineend="1137" name="assertClassHasStaticAttribute" signature="assertClassHasStaticAttribute(string $attributeName, string $className, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a class does not have a specified static attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1148" lineend="1169" name="assertClassNotHasStaticAttribute" signature="assertClassNotHasStaticAttribute(string $attributeName, string $className, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an object has a specified attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;object&gt; $object  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1180" lineend="1199" name="assertObjectHasAttribute" signature="assertObjectHasAttribute(string $attributeName, object $object, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an object does not have a specified attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;object&gt; $object  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1210" lineend="1229" name="assertObjectNotHasAttribute" signature="assertObjectNotHasAttribute(string $attributeName, object $object, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two variables have the same type and value.&#xA;Used on objects, it asserts that two variables reference&#xA;the same object.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1240" lineend="1251" name="assertSame" signature="assertSame(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable and an attribute of an object have the same type&#xA;and value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string|object&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1262" lineend="1269" name="assertAttributeSame" signature="assertAttributeSame(mixed $expected, string $actualAttributeName, $actualClassOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two variables do not have the same type and value.&#xA;Used on objects, it asserts that two variables do not reference&#xA;the same object.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1280" lineend="1291" name="assertNotSame" signature="assertNotSame(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable and an attribute of an object do not have the&#xA;same type and value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string|object&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1302" lineend="1309" name="assertAttributeNotSame" signature="assertAttributeNotSame(mixed $expected, string $actualAttributeName, $actualClassOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1320" lineend="1331" name="assertInstanceOf" signature="assertInstanceOf(string $expected, mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an attribute is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string|object&gt; $classOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1343" lineend="1350" name="assertAttributeInstanceOf" signature="assertAttributeInstanceOf(string $expected, string $attributeName, $classOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is not of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1361" lineend="1372" name="assertNotInstanceOf" signature="assertNotInstanceOf(string $expected, mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an attribute is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string|object&gt; $classOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1384" lineend="1391" name="assertAttributeNotInstanceOf" signature="assertAttributeNotInstanceOf(string $expected, string $attributeName, $classOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1402" lineend="1413" name="assertInternalType" signature="assertInternalType(string $expected, mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an attribute is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string|object&gt; $classOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1425" lineend="1432" name="assertAttributeInternalType" signature="assertAttributeInternalType(string $expected, string $attributeName, $classOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a variable is not of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1443" lineend="1454" name="assertNotInternalType" signature="assertNotInternalType(string $expected, mixed $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that an attribute is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string|object&gt; $classOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1466" lineend="1473" name="assertAttributeNotInternalType" signature="assertAttributeNotInternalType(string $expected, string $attributeName, $classOrObject, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a string matches a given regular expression.&#xA;&lt;string&gt; $pattern  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1482" lineend="1495" name="assertRegExp" signature="assertRegExp(string $pattern, string $string, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a string does not match a given regular expression.&#xA;&lt;string&gt; $pattern  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 2.1.0&#xA;" ilk="function" line="1506" lineend="1521" name="assertNotRegExp" signature="assertNotRegExp(string $pattern, string $string, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Assert that the size of two arrays (or `Countable` or `Traversable` objects)&#xA;is the same.&#xA;&lt;array|countable|traversable&gt; $expected  - &#xA;&lt;array|countable|traversable&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1531" lineend="1550" name="assertSameSize" signature="assertSameSize($expected, $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Assert that the size of two arrays (or `Countable` or `Traversable` objects)&#xA;is not the same.&#xA;&lt;array|countable|traversable&gt; $expected  - &#xA;&lt;array|countable|traversable&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1560" lineend="1579" name="assertNotSameSize" signature="assertNotSameSize($expected, $actual, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a string matches a given format string.&#xA;&lt;string&gt; $format  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1590" lineend="1603" name="assertStringMatchesFormat" signature="assertStringMatchesFormat(string $format, string $string, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a string does not match a given format string.&#xA;&lt;string&gt; $format  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1614" lineend="1629" name="assertStringNotMatchesFormat" signature="assertStringNotMatchesFormat(string $format, string $string, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a string matches a given format file.&#xA;&lt;string&gt; $formatFile  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1640" lineend="1653" name="assertStringMatchesFormatFile" signature="assertStringMatchesFormatFile(string $formatFile, string $string, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a string does not match a given format string.&#xA;&lt;string&gt; $formatFile  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1664" lineend="1679" name="assertStringNotMatchesFormatFile" signature="assertStringNotMatchesFormatFile(string $formatFile, string $string, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a string starts with a given prefix.&#xA;&lt;string&gt; $prefix  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1690" lineend="1705" name="assertStringStartsWith" signature="assertStringStartsWith(string $prefix, string $string, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a string starts not with a given prefix.&#xA;&lt;string&gt; $prefix  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1716" lineend="1731" name="assertStringStartsNotWith" signature="assertStringStartsNotWith(string $prefix, string $string, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a string ends with a given suffix.&#xA;&lt;string&gt; $suffix  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1742" lineend="1755" name="assertStringEndsWith" signature="assertStringEndsWith(string $suffix, string $string, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a string ends not with a given suffix.&#xA;&lt;string&gt; $suffix  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1766" lineend="1781" name="assertStringEndsNotWith" signature="assertStringEndsNotWith(string $suffix, string $string, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two XML files are equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualFile  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1792" lineend="1798" name="assertXmlFileEqualsXmlFile" signature="assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two XML files are not equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualFile  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1809" lineend="1815" name="assertXmlFileNotEqualsXmlFile" signature="assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two XML documents are equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualXml  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1826" lineend="1832" name="assertXmlStringEqualsXmlFile" signature="assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two XML documents are not equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualXml  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1843" lineend="1849" name="assertXmlStringNotEqualsXmlFile" signature="assertXmlStringNotEqualsXmlFile(string $expectedFile, string $actualXml, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two XML documents are equal.&#xA;&lt;string&gt; $expectedXml  - &#xA;&lt;string&gt; $actualXml  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1860" lineend="1866" name="assertXmlStringEqualsXmlString" signature="assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two XML documents are not equal.&#xA;&lt;string&gt; $expectedXml  - &#xA;&lt;string&gt; $actualXml  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1877" lineend="1883" name="assertXmlStringNotEqualsXmlString" signature="assertXmlStringNotEqualsXmlString(string $expectedXml, string $actualXml, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a hierarchy of DOMElements matches.&#xA;&lt;domelement&gt; $expectedElement  - &#xA;&lt;domelement&gt; $actualElement  - &#xA;&lt;bool&gt; $checkAttributes  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1895" lineend="1965" name="assertEqualXMLStructure" signature="assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement, bool $checkAttributes = false, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Evaluates a PHPUnit_Framework_Constraint matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;&lt;phpunit_framework_constraint&gt; $constraint  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1976" lineend="1981" name="assertThat" signature="assertThat(mixed $value, PHPUnit_Framework_Constraint $constraint, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that a string is a valid JSON string.&#xA;&lt;string&gt; $actualJson  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.7.20&#xA;" ilk="function" line="1991" lineend="1998" name="assertJson" signature="assertJson(string $actualJson, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two given JSON encoded objects or arrays are equal.&#xA;&lt;string&gt; $expectedJson  - &#xA;&lt;string&gt; $actualJson  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="2007" lineend="2016" name="assertJsonStringEqualsJsonString" signature="assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two given JSON encoded objects or arrays are not equal.&#xA;&lt;string&gt; $expectedJson  - &#xA;&lt;string&gt; $actualJson  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="2025" lineend="2034" name="assertJsonStringNotEqualsJsonString" signature="assertJsonStringNotEqualsJsonString(string $expectedJson, string $actualJson, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that the generated JSON encoded object and the content of the given file are equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualJson  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="2043" lineend="2057" name="assertJsonStringEqualsJsonFile" signature="assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that the generated JSON encoded object and the content of the given file are not equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualJson  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="2066" lineend="2080" name="assertJsonStringNotEqualsJsonFile" signature="assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two JSON files are equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualFile  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="2089" lineend="2109" name="assertJsonFileEqualsJsonFile" signature="assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Asserts that two JSON files are not equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualFile  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="2118" lineend="2138" name="assertJsonFileNotEqualsJsonFile" signature="assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile, string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_And matcher object.&#xA;Returns phpunit_framework_constraint_and &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2147" lineend="2155" name="logicalAnd" returns="PHPUnit_Framework_Constraint_And" signature="phpunit_framework_constraint_and logicalAnd()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_Or matcher object.&#xA;Returns phpunit_framework_constraint_or &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2164" lineend="2172" name="logicalOr" returns="PHPUnit_Framework_Constraint_Or" signature="phpunit_framework_constraint_or logicalOr()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_Not matcher object.&#xA;&lt;phpunit_framework_constraint&gt; $constraint  - &#xA;Returns phpunit_framework_constraint_not &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2183" lineend="2186" name="logicalNot" returns="PHPUnit_Framework_Constraint_Not" signature="phpunit_framework_constraint_not logicalNot(PHPUnit_Framework_Constraint $constraint)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_Xor matcher object.&#xA;Returns phpunit_framework_constraint_xor &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2195" lineend="2203" name="logicalXor" returns="PHPUnit_Framework_Constraint_Xor" signature="phpunit_framework_constraint_xor logicalXor()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsAnything matcher object.&#xA;Returns phpunit_framework_constraint_isanything &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2212" lineend="2215" name="anything" returns="PHPUnit_Framework_Constraint_IsAnything" signature="phpunit_framework_constraint_isanything anything()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsTrue matcher object.&#xA;Returns phpunit_framework_constraint_istrue &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="2224" lineend="2227" name="isTrue" returns="PHPUnit_Framework_Constraint_IsTrue" signature="phpunit_framework_constraint_istrue isTrue()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_Callback matcher object.&#xA;&lt;callable&gt; $callback  - &#xA;Returns phpunit_framework_constraint_callback &#xA;" ilk="function" line="2236" lineend="2239" name="callback" returns="PHPUnit_Framework_Constraint_Callback" signature="phpunit_framework_constraint_callback callback(callable $callback)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsFalse matcher object.&#xA;Returns phpunit_framework_constraint_isfalse &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="2248" lineend="2251" name="isFalse" returns="PHPUnit_Framework_Constraint_IsFalse" signature="phpunit_framework_constraint_isfalse isFalse()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsJson matcher object.&#xA;Returns phpunit_framework_constraint_isjson &#xA;Since Method available since Release 3.7.20&#xA;" ilk="function" line="2260" lineend="2263" name="isJson" returns="PHPUnit_Framework_Constraint_IsJson" signature="phpunit_framework_constraint_isjson isJson()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsNull matcher object.&#xA;Returns phpunit_framework_constraint_isnull &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="2272" lineend="2275" name="isNull" returns="PHPUnit_Framework_Constraint_IsNull" signature="phpunit_framework_constraint_isnull isNull()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsFinite matcher object.&#xA;Returns phpunit_framework_constraint_isfinite &#xA;Since Method available since Release 5.0.0&#xA;" ilk="function" line="2284" lineend="2287" name="isFinite" returns="PHPUnit_Framework_Constraint_IsFinite" signature="phpunit_framework_constraint_isfinite isFinite()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsInfinite matcher object.&#xA;Returns phpunit_framework_constraint_isinfinite &#xA;Since Method available since Release 5.0.0&#xA;" ilk="function" line="2296" lineend="2299" name="isInfinite" returns="PHPUnit_Framework_Constraint_IsInfinite" signature="phpunit_framework_constraint_isinfinite isInfinite()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsNan matcher object.&#xA;Returns phpunit_framework_constraint_isnan &#xA;Since Method available since Release 5.0.0&#xA;" ilk="function" line="2308" lineend="2311" name="isNan" returns="PHPUnit_Framework_Constraint_IsNan" signature="phpunit_framework_constraint_isnan isNan()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_Attribute matcher object.&#xA;&lt;phpunit_framework_constraint&gt; $constraint  - &#xA;&lt;string&gt; $attributeName  - &#xA;Returns phpunit_framework_constraint_attribute &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="2323" lineend="2329" name="attribute" returns="PHPUnit_Framework_Constraint_Attribute" signature="phpunit_framework_constraint_attribute attribute(PHPUnit_Framework_Constraint $constraint, string $attributeName)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_TraversableContains matcher&#xA;object.&#xA;&lt;mixed&gt; $value  - &#xA;&lt;bool&gt; $checkForObjectIdentity  - &#xA;&lt;bool&gt; $checkForNonObjectIdentity  - &#xA;Returns phpunit_framework_constraint_traversablecontains &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2343" lineend="2346" name="contains" returns="PHPUnit_Framework_Constraint_TraversableContains" signature="phpunit_framework_constraint_traversablecontains contains(mixed $value, bool $checkForObjectIdentity = true, bool $checkForNonObjectIdentity = false)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher&#xA;object.&#xA;&lt;string&gt; $type  - &#xA;Returns phpunit_framework_constraint_traversablecontainsonly &#xA;Since Method available since Release 3.1.4&#xA;" ilk="function" line="2358" lineend="2361" name="containsOnly" returns="PHPUnit_Framework_Constraint_TraversableContainsOnly" signature="phpunit_framework_constraint_traversablecontainsonly containsOnly(string $type)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher&#xA;object.&#xA;&lt;string&gt; $classname  - &#xA;Returns phpunit_framework_constraint_traversablecontainsonly &#xA;" ilk="function" line="2371" lineend="2374" name="containsOnlyInstancesOf" returns="PHPUnit_Framework_Constraint_TraversableContainsOnly" signature="phpunit_framework_constraint_traversablecontainsonly containsOnlyInstancesOf(string $classname)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_ArrayHasKey matcher object.&#xA;&lt;mixed&gt; $key  - &#xA;Returns phpunit_framework_constraint_arrayhaskey &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2385" lineend="2388" name="arrayHasKey" returns="PHPUnit_Framework_Constraint_ArrayHasKey" signature="phpunit_framework_constraint_arrayhaskey arrayHasKey(mixed $key)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsEqual matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Returns phpunit_framework_constraint_isequal &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2403" lineend="2412" name="equalTo" returns="PHPUnit_Framework_Constraint_IsEqual" signature="phpunit_framework_constraint_isequal equalTo(mixed $value, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsEqual matcher object&#xA;that is wrapped in a PHPUnit_Framework_Constraint_Attribute matcher&#xA;object.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;mixed&gt; $value  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Returns phpunit_framework_constraint_attribute &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="2430" lineend="2442" name="attributeEqualTo" returns="PHPUnit_Framework_Constraint_Attribute" signature="phpunit_framework_constraint_attribute attributeEqualTo(string $attributeName, mixed $value, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsEmpty matcher object.&#xA;Returns phpunit_framework_constraint_isempty &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="2451" lineend="2454" name="isEmpty" returns="PHPUnit_Framework_Constraint_IsEmpty" signature="phpunit_framework_constraint_isempty isEmpty()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_FileExists matcher object.&#xA;Returns phpunit_framework_constraint_fileexists &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2463" lineend="2466" name="fileExists" returns="PHPUnit_Framework_Constraint_FileExists" signature="phpunit_framework_constraint_fileexists fileExists()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_GreaterThan matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_constraint_greaterthan &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2477" lineend="2480" name="greaterThan" returns="PHPUnit_Framework_Constraint_GreaterThan" signature="phpunit_framework_constraint_greaterthan greaterThan(mixed $value)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps&#xA;a PHPUnit_Framework_Constraint_IsEqual and a&#xA;PHPUnit_Framework_Constraint_GreaterThan matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_constraint_or &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="2493" lineend="2499" name="greaterThanOrEqual" returns="PHPUnit_Framework_Constraint_Or" signature="phpunit_framework_constraint_or greaterThanOrEqual(mixed $value)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_ClassHasAttribute matcher object.&#xA;&lt;string&gt; $attributeName  - &#xA;Returns phpunit_framework_constraint_classhasattribute &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="2510" lineend="2515" name="classHasAttribute" returns="PHPUnit_Framework_Constraint_ClassHasAttribute" signature="phpunit_framework_constraint_classhasattribute classHasAttribute(string $attributeName)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_ClassHasStaticAttribute matcher&#xA;object.&#xA;&lt;string&gt; $attributeName  - &#xA;Returns phpunit_framework_constraint_classhasstaticattribute &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="2527" lineend="2532" name="classHasStaticAttribute" returns="PHPUnit_Framework_Constraint_ClassHasStaticAttribute" signature="phpunit_framework_constraint_classhasstaticattribute classHasStaticAttribute(string $attributeName)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_ObjectHasAttribute matcher object.&#xA;&lt;string&gt; $attributeName  - &#xA;Returns phpunit_framework_constraint_objecthasattribute &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2543" lineend="2548" name="objectHasAttribute" returns="PHPUnit_Framework_Constraint_ObjectHasAttribute" signature="phpunit_framework_constraint_objecthasattribute objectHasAttribute(string $attributeName)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsIdentical matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_constraint_isidentical &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2559" lineend="2562" name="identicalTo" returns="PHPUnit_Framework_Constraint_IsIdentical" signature="phpunit_framework_constraint_isidentical identicalTo(mixed $value)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsInstanceOf matcher object.&#xA;&lt;string&gt; $className  - &#xA;Returns phpunit_framework_constraint_isinstanceof &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2573" lineend="2576" name="isInstanceOf" returns="PHPUnit_Framework_Constraint_IsInstanceOf" signature="phpunit_framework_constraint_isinstanceof isInstanceOf(string $className)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsType matcher object.&#xA;&lt;string&gt; $type  - &#xA;Returns phpunit_framework_constraint_istype &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2587" lineend="2590" name="isType" returns="PHPUnit_Framework_Constraint_IsType" signature="phpunit_framework_constraint_istype isType(string $type)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_LessThan matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_constraint_lessthan &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2601" lineend="2604" name="lessThan" returns="PHPUnit_Framework_Constraint_LessThan" signature="phpunit_framework_constraint_lessthan lessThan(mixed $value)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps&#xA;a PHPUnit_Framework_Constraint_IsEqual and a&#xA;PHPUnit_Framework_Constraint_LessThan matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_constraint_or &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="2617" lineend="2623" name="lessThanOrEqual" returns="PHPUnit_Framework_Constraint_Or" signature="phpunit_framework_constraint_or lessThanOrEqual(mixed $value)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_PCREMatch matcher object.&#xA;&lt;string&gt; $pattern  - &#xA;Returns phpunit_framework_constraint_pcrematch &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2634" lineend="2637" name="matchesRegularExpression" returns="PHPUnit_Framework_Constraint_PCREMatch" signature="phpunit_framework_constraint_pcrematch matchesRegularExpression(string $pattern)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_StringMatches matcher object.&#xA;&lt;string&gt; $string  - &#xA;Returns phpunit_framework_constraint_stringmatches &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="2648" lineend="2651" name="matches" returns="PHPUnit_Framework_Constraint_StringMatches" signature="phpunit_framework_constraint_stringmatches matches(string $string)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_StringStartsWith matcher object.&#xA;&lt;mixed&gt; $prefix  - &#xA;Returns phpunit_framework_constraint_stringstartswith &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="2662" lineend="2665" name="stringStartsWith" returns="PHPUnit_Framework_Constraint_StringStartsWith" signature="phpunit_framework_constraint_stringstartswith stringStartsWith(mixed $prefix)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_StringContains matcher object.&#xA;&lt;string&gt; $string  - &#xA;&lt;bool&gt; $case  - &#xA;Returns phpunit_framework_constraint_stringcontains &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2677" lineend="2680" name="stringContains" returns="PHPUnit_Framework_Constraint_StringContains" signature="phpunit_framework_constraint_stringcontains stringContains(string $string, bool $case = true)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_StringEndsWith matcher object.&#xA;&lt;mixed&gt; $suffix  - &#xA;Returns phpunit_framework_constraint_stringendswith &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="2691" lineend="2694" name="stringEndsWith" returns="PHPUnit_Framework_Constraint_StringEndsWith" signature="phpunit_framework_constraint_stringendswith stringEndsWith(mixed $suffix)" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit_Framework_Constraint_Count matcher object.&#xA;&lt;int&gt; $count  - &#xA;Returns phpunit_framework_constraint_count &#xA;" ilk="function" line="2703" lineend="2706" name="countOf" returns="PHPUnit_Framework_Constraint_Count" signature="phpunit_framework_constraint_count countOf(int $count)" />
        <scope attributes="public static" doc="&#xA;Fails a test with the given message.&#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="2714" lineend="2717" name="fail" signature="fail(string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Returns the value of an attribute of a class or an object.&#xA;This also works for attributes that are declared protected or private.&#xA;&lt;string|object&gt; $classOrObject  - &#xA;&lt;string&gt; $attributeName  - &#xA;Returns mixed &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="2730" lineend="2763" name="readAttribute" returns="mixed" signature="mixed readAttribute($classOrObject, string $attributeName)" />
        <scope attributes="public static" doc="&#xA;Returns the value of a static attribute.&#xA;This also works for attributes that are declared protected or private.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $attributeName  - &#xA;Returns mixed &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="2778" lineend="2814" name="getStaticAttribute" returns="mixed" signature="mixed getStaticAttribute(string $className, string $attributeName)" />
        <scope attributes="public static" doc="&#xA;Returns the value of an object&apos;s attribute.&#xA;This also works for attributes that are declared protected or private.&#xA;&lt;object&gt; $object  - &#xA;&lt;string&gt; $attributeName  - &#xA;Returns mixed &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="2829" lineend="2875" name="getObjectAttribute" returns="mixed" signature="mixed getObjectAttribute(object $object, string $attributeName)" />
        <scope attributes="public static" doc="&#xA;Mark the test as incomplete.&#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_IncompleteTestError&#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2886" lineend="2889" name="markTestIncomplete" signature="markTestIncomplete(string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Mark the test as skipped.&#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_SkippedTestError&#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2900" lineend="2903" name="markTestSkipped" signature="markTestSkipped(string $message = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Return the current assertion count.&#xA;Returns int &#xA;Since Method available since Release 3.3.3&#xA;" ilk="function" line="2912" lineend="2915" name="getCount" returns="int" signature="int getCount()" />
        <scope attributes="public static" doc="&#xA;Reset the assertion counter.&#xA;Since Method available since Release 3.3.3&#xA;" ilk="function" line="2922" lineend="2925" name="resetCount" signature="resetCount()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="AssertionFailedError.php">
    <scope ilk="blob" lang="PHP" name="AssertionFailedError.php" src="phpunit-5.5.0/src/Framework/AssertionFailedError.php">
      <scope classrefs="PHPUnit_Framework_Exception" doc="Thrown when an assertion failed.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" interfacerefs="PHPUnit_Framework_SelfDescribing" line="16" lineend="27" name="PHPUnit_Framework_AssertionFailedError">
        <scope attributes="public" doc="&#xA;Wrapper for getMessage() which is declared as final.&#xA;Returns string &#xA;" ilk="function" line="23" lineend="26" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="BaseTestListener.php">
    <scope ilk="blob" lang="PHP" name="BaseTestListener.php" src="phpunit-5.5.0/src/Framework/BaseTestListener.php">
      <scope attributes="abstract" doc="An empty Listener that can be extended to implement TestListener&#xA;with just a few lines of code.&#xA;&#xA;@see PHPUnit_Framework_TestListener for documentation on the API methods.&#xA;@since Class available since Release 4.0.0" ilk="class" interfacerefs="PHPUnit_Framework_TestListener" line="18" lineend="59" name="PHPUnit_Framework_BaseTestListener">
        <scope attributes="public" ilk="function" line="20" lineend="22" name="addError" signature="addError(PHPUnit_Framework_Test $test, Exception $e, $time)" />
        <scope attributes="public" ilk="function" line="24" lineend="26" name="addWarning" signature="addWarning(PHPUnit_Framework_Test $test, PHPUnit_Framework_Warning $e, $time)" />
        <scope attributes="public" ilk="function" line="28" lineend="30" name="addFailure" signature="addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time)" />
        <scope attributes="public" ilk="function" line="32" lineend="34" name="addIncompleteTest" signature="addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time)" />
        <scope attributes="public" ilk="function" line="36" lineend="38" name="addRiskyTest" signature="addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, $time)" />
        <scope attributes="public" ilk="function" line="40" lineend="42" name="addSkippedTest" signature="addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time)" />
        <scope attributes="public" ilk="function" line="44" lineend="46" name="startTestSuite" signature="startTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" ilk="function" line="48" lineend="50" name="endTestSuite" signature="endTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" ilk="function" line="52" lineend="54" name="startTest" signature="startTest(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" ilk="function" line="56" lineend="58" name="endTest" signature="endTest(PHPUnit_Framework_Test $test, $time)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="CodeCoverageException.php">
    <scope ilk="blob" lang="PHP" name="CodeCoverageException.php" src="phpunit-5.5.0/src/Framework/CodeCoverageException.php">
      <scope classrefs="PHPUnit_Framework_Exception" doc="@since Class available since Release 4.0.0" ilk="class" line="14" lineend="16" name="PHPUnit_Framework_CodeCoverageException" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="Constraint.php">
    <scope ilk="blob" lang="PHP" name="Constraint.php" src="phpunit-5.5.0/src/Framework/Constraint.php">
      <import line="11" module="SebastianBergmann\Exporter" symbol="Exporter" />
      <scope attributes="abstract" doc="Abstract base class for constraints. which are placed upon any value.&#xA;&#xA;@since      Interface available since Release 3.0.0" ilk="class" interfacerefs="Countable PHPUnit_Framework_SelfDescribing" line="18" lineend="153" name="PHPUnit_Framework_Constraint">
        <variable attributes="protected" citdl="Exporter" line="20" name="exporter" />
        <scope attributes="public __ctor__" ilk="function" line="22" lineend="25" name="__construct" signature="__construct()" />
        <scope attributes="public" doc="&#xA;Evaluates the constraint for parameter $other&#xA;If $returnResult is set to false (the default), an exception is thrown&#xA;in case of a failure. null is returned otherwise.&#xA;If $returnResult is true, the result of the evaluation is returned as&#xA;a boolean value instead: true in case of success, false in case of a&#xA;failure.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;bool&gt; $returnResult  - Whether to return a result or throw an exception&#xA;Returns mixed &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="45" lineend="60" name="evaluate" returns="mixed" signature="mixed evaluate(mixed $other, string $description = &apos;&apos;, bool $returnResult = false)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;This method can be overridden to implement the evaluation algorithm.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="72" lineend="75" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Counts the number of constraint elements.&#xA;Returns int &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="84" lineend="87" name="count" returns="int" signature="int count()" />
        <scope attributes="protected" doc="&#xA;Throws an exception for the given compared value and test description&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;sebastianbergmann\comparator\comparisonfailure&gt; $comparisonFailure  - &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="98" lineend="119" name="fail" signature="fail(mixed $other, string $description, SebastianBergmann\Comparator\ComparisonFailure \Comparator \ComparisonFailure $comparisonFailure=null)" />
        <scope attributes="protected" doc="&#xA;Return additional failure description where needed&#xA;The function can be overridden to provide additional failure&#xA;information like a diff&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="131" lineend="134" name="additionalFailureDescription" returns="string" signature="string additionalFailureDescription(mixed $other)" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;To provide additional failure information additionalFailureDescription&#xA;can be used.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="149" lineend="152" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="Error.php">
    <scope ilk="blob" lang="PHP" name="Error.php" src="phpunit-5.5.0/src/Framework/Error.php">
      <scope classrefs="PHPUnit_Framework_Exception" doc="Wrapper for PHP errors.&#xA;&#xA;@since Class available since Release 2.2.0" ilk="class" line="16" lineend="34" name="PHPUnit_Framework_Error">
        <scope attributes="public __ctor__" doc="&#xA;Constructor.&#xA;&lt;string&gt; $message  - &#xA;&lt;int&gt; $code  - &#xA;&lt;string&gt; $file  - &#xA;&lt;int&gt; $line  - &#xA;&lt;exception&gt; $previous  - &#xA;" ilk="function" line="27" lineend="33" name="__construct" signature="__construct(string $message, int $code, string $file, int $line, Exception $previous=null)" />
        <variable citdl="file" line="31" name="file" />
        <variable citdl="line" line="32" name="line" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="Exception.php">
    <scope ilk="blob" lang="PHP" name="Exception.php" src="phpunit-5.5.0/src/Framework/Exception.php">
      <scope classrefs="RuntimeException" doc="Base class for all PHPUnit Framework exceptions.&#xA;&#xA;Ensures that exceptions thrown during a test run do not leave stray&#xA;references behind.&#xA;&#xA;Every Exception contains a stack trace. Each stack frame contains the &apos;args&apos;&#xA;of the called function. The function arguments can contain references to&#xA;instantiated objects. The references prevent the objects from being&#xA;destructed (until test results are eventually printed), so memory cannot be&#xA;freed up.&#xA;&#xA;With enabled process isolation, test results are serialized in the child&#xA;process and unserialized in the parent process. The stack trace of Exceptions&#xA;may contain objects that cannot be serialized or unserialized (e.g., PDO&#xA;connections). Unserializing user-space objects from the child process into&#xA;the parent would break the intended encapsulation of process isolation.&#xA;&#xA;@see http://fabien.potencier.org/article/9/php-serialization-stack-traces-and-exceptions&#xA;@since Class available since Release 3.4.0" ilk="class" interfacerefs="PHPUnit_Exception" line="32" lineend="77" name="PHPUnit_Framework_Exception">
        <variable attributes="protected" citdl="array" doc="@var array" line="37" name="serializableTrace" />
        <scope attributes="public __ctor__" ilk="function" line="39" lineend="47" name="__construct" signature="__construct($message = &apos;&apos;, $code = 0, Exception $previous=null)" />
        <scope attributes="public" doc="&#xA;Returns the serializable trace (without &apos;args&apos;).&#xA;Returns array &#xA;" ilk="function" line="54" lineend="57" name="getSerializableTrace" returns="array" signature="array getSerializableTrace()" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;" ilk="function" line="62" lineend="71" name="__toString" returns="string" signature="string __toString()" />
        <scope attributes="public" ilk="function" line="73" lineend="76" name="__sleep" returns="array_keys()" signature="__sleep()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="ExceptionWrapper.php">
    <scope ilk="blob" lang="PHP" name="ExceptionWrapper.php" src="phpunit-5.5.0/src/Framework/ExceptionWrapper.php">
      <scope classrefs="PHPUnit_Framework_Exception" doc="Wraps Exceptions thrown by code under test.&#xA;&#xA;Re-instantiates Exceptions thrown by user-space code to retain their original&#xA;class names, properties, and stack traces (but without arguments).&#xA;&#xA;Unlike PHPUnit_Framework_Exception, the complete stack of previous Exceptions&#xA;is processed.&#xA;&#xA;@since Class available since Release 4.3.0" ilk="class" line="22" lineend="91" name="PHPUnit_Framework_ExceptionWrapper">
        <variable attributes="protected" citdl="string" doc="@var string" line="27" name="classname" />
        <variable attributes="protected" citdl="PHPUnit_Framework_ExceptionWrapper" doc="@var PHPUnit_Framework_ExceptionWrapper|null" line="32" name="previous" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;throwable|exception&gt; $e  - &#xA;" ilk="function" line="37" lineend="56" name="__construct" signature="__construct($e)" />
        <variable citdl="e.getFile()" line="44" name="file" />
        <variable citdl="e.getLine()" line="45" name="line" />
        <variable citdl="e.getTrace()" line="47" name="serializableTrace" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;" ilk="function" line="61" lineend="64" name="getClassname" returns="string" signature="string getClassname()" />
        <scope attributes="public" doc="&#xA;Returns phpunit_framework_exceptionwrapper &#xA;" ilk="function" line="69" lineend="72" name="getPreviousWrapped" returns="PHPUnit_Framework_ExceptionWrapper" signature="phpunit_framework_exceptionwrapper getPreviousWrapped()" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;" ilk="function" line="77" lineend="90" name="__toString" returns="string" signature="string __toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="ExpectationFailedException.php">
    <scope ilk="blob" lang="PHP" name="ExpectationFailedException.php" src="phpunit-5.5.0/src/Framework/ExpectationFailedException.php">
      <scope classrefs="PHPUnit_Framework_AssertionFailedError" doc="Exception for expectations which failed their check.&#xA;&#xA;The exception contains the error message and optionally a&#xA;SebastianBergmann\Comparator\ComparisonFailure which is used to&#xA;generate diff output of the failed expectations.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="20" lineend="41" name="PHPUnit_Framework_ExpectationFailedException">
        <variable attributes="protected" citdl="SebastianBergmann\Comparator\ComparisonFailure" doc="@var SebastianBergmann\Comparator\ComparisonFailure" line="25" name="comparisonFailure" />
        <scope attributes="public __ctor__" ilk="function" line="27" lineend="32" name="__construct" signature="__construct($message, SebastianBergmann \Comparator \ComparisonFailure $comparisonFailure=null, Exception $previous=null)" />
        <scope attributes="public" doc="&#xA;Returns sebastianbergmann\comparator\comparisonfailure &#xA;" ilk="function" line="37" lineend="40" name="getComparisonFailure" returns="SebastianBergmann\Comparator\ComparisonFailure" signature="sebastianbergmann\comparator\comparisonfailure getComparisonFailure()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="IncompleteTest.php">
    <scope ilk="blob" lang="PHP" name="IncompleteTest.php" src="phpunit-5.5.0/src/Framework/IncompleteTest.php">
      <scope ilk="interface" line="17" lineend="19" name="PHPUnit_Framework_IncompleteTest" signature="PHPUnit_Framework_IncompleteTest" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="IncompleteTestCase.php">
    <scope ilk="blob" lang="PHP" name="IncompleteTestCase.php" src="phpunit-5.5.0/src/Framework/IncompleteTestCase.php">
      <scope classrefs="PHPUnit_Framework_TestCase" doc="An incomplete test case&#xA;&#xA;@since Class available since Release 4.3.0" ilk="class" line="16" lineend="84" name="PHPUnit_Framework_IncompleteTestCase">
        <variable attributes="protected" citdl="string" doc="@var string" line="21" name="message" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="26" name="backupGlobals" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="31" name="backupStaticAttributes" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="36" name="runTestInSeparateProcess" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="41" name="useErrorHandler" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="46" name="useOutputBuffering" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="53" lineend="57" name="__construct" signature="__construct(string $className, string $methodName, string $message = &apos;&apos;)" />
        <scope attributes="protected" doc="&#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="62" lineend="65" name="runTest" signature="runTest()" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;" ilk="function" line="70" lineend="73" name="getMessage" returns="string" signature="string getMessage()" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the test case.&#xA;Returns string &#xA;" ilk="function" line="80" lineend="83" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="IncompleteTestError.php">
    <scope ilk="blob" lang="PHP" name="IncompleteTestError.php" src="phpunit-5.5.0/src/Framework/IncompleteTestError.php">
      <scope classrefs="PHPUnit_Framework_AssertionFailedError" doc="Extension to PHPUnit_Framework_AssertionFailedError to mark the special&#xA;case of an incomplete test.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" interfacerefs="PHPUnit_Framework_IncompleteTest" line="17" lineend="19" name="PHPUnit_Framework_IncompleteTestError" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="InvalidCoversTargetException.php">
    <scope ilk="blob" lang="PHP" name="InvalidCoversTargetException.php" src="phpunit-5.5.0/src/Framework/InvalidCoversTargetException.php">
      <scope classrefs="PHPUnit_Framework_CodeCoverageException" doc="@since Class available since Release 4.0.0" ilk="class" line="14" lineend="16" name="PHPUnit_Framework_InvalidCoversTargetException" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="OutputError.php">
    <scope ilk="blob" lang="PHP" name="OutputError.php" src="phpunit-5.5.0/src/Framework/OutputError.php">
      <scope classrefs="PHPUnit_Framework_AssertionFailedError" doc="Extension to PHPUnit_Framework_AssertionFailedError to mark the special&#xA;case of a test that printed output.&#xA;&#xA;@since Class available since Release 3.6.0" ilk="class" line="17" lineend="19" name="PHPUnit_Framework_OutputError" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="PHPUnit_Framework_CoveredCodeNotExecutedException.php">
    <scope ilk="blob" lang="PHP" name="PHPUnit_Framework_CoveredCodeNotExecutedException.php" src="phpunit-5.5.0/src/Framework/PHPUnit_Framework_CoveredCodeNotExecutedException.php">
      <scope classrefs="PHPUnit_Framework_RiskyTestError" doc="Extension to PHPUnit_Framework_AssertionFailedError to mark the special&#xA;case of a test that does not execute the code it wants to cover.&#xA;&#xA;@since Class available since Release 5.2.0" ilk="class" line="17" lineend="19" name="PHPUnit_Framework_CoveredCodeNotExecutedException" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="PHPUnit_Framework_MissingCoversAnnotationException.php">
    <scope ilk="blob" lang="PHP" name="PHPUnit_Framework_MissingCoversAnnotationException.php" src="phpunit-5.5.0/src/Framework/PHPUnit_Framework_MissingCoversAnnotationException.php">
      <scope classrefs="PHPUnit_Framework_RiskyTestError" doc="Extension to PHPUnit_Framework_AssertionFailedError to mark a test as risky&#xA;when it does not have a @covers annotation but is expected to have one.&#xA;&#xA;@since Class available since Release 5.3.0" ilk="class" line="17" lineend="19" name="PHPUnit_Framework_MissingCoversAnnotationException" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="RiskyTest.php">
    <scope ilk="blob" lang="PHP" name="RiskyTest.php" src="phpunit-5.5.0/src/Framework/RiskyTest.php">
      <scope ilk="interface" line="17" lineend="19" name="PHPUnit_Framework_RiskyTest" signature="PHPUnit_Framework_RiskyTest" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="RiskyTestError.php">
    <scope ilk="blob" lang="PHP" name="RiskyTestError.php" src="phpunit-5.5.0/src/Framework/RiskyTestError.php">
      <scope classrefs="PHPUnit_Framework_AssertionFailedError" doc="Extension to PHPUnit_Framework_AssertionFailedError to mark the special&#xA;case of a risky test.&#xA;&#xA;@since Class available since Release 4.0.0" ilk="class" interfacerefs="PHPUnit_Framework_RiskyTest" line="17" lineend="19" name="PHPUnit_Framework_RiskyTestError" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="SelfDescribing.php">
    <scope ilk="blob" lang="PHP" name="SelfDescribing.php" src="phpunit-5.5.0/src/Framework/SelfDescribing.php">
      <scope ilk="interface" line="16" lineend="24" name="PHPUnit_Framework_SelfDescribing" signature="PHPUnit_Framework_SelfDescribing">
        <scope attributes="public" doc="&#xA;Returns a string representation of the object.&#xA;Returns string &#xA;" ilk="function" line="23" lineend="23" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="SkippedTest.php">
    <scope ilk="blob" lang="PHP" name="SkippedTest.php" src="phpunit-5.5.0/src/Framework/SkippedTest.php">
      <scope ilk="interface" line="16" lineend="18" name="PHPUnit_Framework_SkippedTest" signature="PHPUnit_Framework_SkippedTest" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="SkippedTestCase.php">
    <scope ilk="blob" lang="PHP" name="SkippedTestCase.php" src="phpunit-5.5.0/src/Framework/SkippedTestCase.php">
      <scope classrefs="PHPUnit_Framework_TestCase" doc="A skipped test case&#xA;&#xA;@since Class available since Release 4.3.0" ilk="class" line="16" lineend="82" name="PHPUnit_Framework_SkippedTestCase">
        <variable attributes="protected" citdl="string" doc="@var string" line="21" name="message" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="26" name="backupGlobals" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="31" name="backupStaticAttributes" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="36" name="runTestInSeparateProcess" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="41" name="useErrorHandler" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="46" name="useOutputBuffering" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="51" lineend="55" name="__construct" signature="__construct($className, $methodName, string $message = &apos;&apos;)" />
        <scope attributes="protected" doc="&#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="60" lineend="63" name="runTest" signature="runTest()" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;" ilk="function" line="68" lineend="71" name="getMessage" returns="string" signature="string getMessage()" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the test case.&#xA;Returns string &#xA;" ilk="function" line="78" lineend="81" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="SkippedTestError.php">
    <scope ilk="blob" lang="PHP" name="SkippedTestError.php" src="phpunit-5.5.0/src/Framework/SkippedTestError.php">
      <scope classrefs="PHPUnit_Framework_AssertionFailedError" doc="Extension to PHPUnit_Framework_AssertionFailedError to mark the special&#xA;case of a skipped test.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" interfacerefs="PHPUnit_Framework_SkippedTest" line="17" lineend="19" name="PHPUnit_Framework_SkippedTestError" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="SkippedTestSuiteError.php">
    <scope ilk="blob" lang="PHP" name="SkippedTestSuiteError.php" src="phpunit-5.5.0/src/Framework/SkippedTestSuiteError.php">
      <scope classrefs="PHPUnit_Framework_AssertionFailedError" doc="Extension to PHPUnit_Framework_AssertionFailedError to mark the special&#xA;case of a skipped test suite.&#xA;&#xA;@since Class available since Release 3.1.0" ilk="class" interfacerefs="PHPUnit_Framework_SkippedTest" line="17" lineend="19" name="PHPUnit_Framework_SkippedTestSuiteError" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="SyntheticError.php">
    <scope ilk="blob" lang="PHP" name="SyntheticError.php" src="phpunit-5.5.0/src/Framework/SyntheticError.php">
      <scope classrefs="PHPUnit_Framework_AssertionFailedError" doc="Creates a synthetic failed assertion.&#xA;&#xA;@since Class available since Release 3.5.0" ilk="class" line="16" lineend="80" name="PHPUnit_Framework_SyntheticError">
        <variable attributes="protected" citdl="string" doc="The synthetic file.&#xA;&#xA;@var string" line="23" name="syntheticFile" />
        <variable attributes="protected" citdl="int" doc="The synthetic line number.&#xA;&#xA;@var int" line="30" name="syntheticLine" />
        <variable attributes="protected" citdl="array" doc="The synthetic trace.&#xA;&#xA;@var array" line="37" name="syntheticTrace" />
        <scope attributes="public __ctor__" doc="&#xA;Constructor.&#xA;&lt;string&gt; $message  - &#xA;&lt;int&gt; $code  - &#xA;&lt;string&gt; $file  - &#xA;&lt;int&gt; $line  - &#xA;&lt;array&gt; $trace  - &#xA;" ilk="function" line="48" lineend="55" name="__construct" signature="__construct(string $message, int $code, string $file, int $line, array $trace)" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;" ilk="function" line="60" lineend="63" name="getSyntheticFile" returns="string" signature="string getSyntheticFile()" />
        <scope attributes="public" doc="&#xA;Returns int &#xA;" ilk="function" line="68" lineend="71" name="getSyntheticLine" returns="int" signature="int getSyntheticLine()" />
        <scope attributes="public" doc="&#xA;Returns array &#xA;" ilk="function" line="76" lineend="79" name="getSyntheticTrace" returns="array" signature="array getSyntheticTrace()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="Test.php">
    <scope ilk="blob" lang="PHP" name="Test.php" src="phpunit-5.5.0/src/Framework/Test.php">
      <scope ilk="interface" interfacerefs="Countable" line="16" lineend="26" name="PHPUnit_Framework_Test" signature="PHPUnit_Framework_Test extends Countable">
        <scope attributes="public" doc="&#xA;Runs a test and collects its result in a TestResult instance.&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;Returns phpunit_framework_testresult &#xA;" ilk="function" line="25" lineend="25" name="run" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult run(PHPUnit_Framework_TestResult $result=null)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645200" path="TestCase.php">
    <scope ilk="blob" lang="PHP" name="TestCase.php" src="phpunit-5.5.0/src/Framework/TestCase.php">
      <import line="11" module="SebastianBergmann\GlobalState" symbol="Snapshot" />
      <import line="12" module="SebastianBergmann\GlobalState" symbol="Restorer" />
      <import line="13" module="SebastianBergmann\GlobalState" symbol="Blacklist" />
      <import line="14" module="SebastianBergmann\Diff" symbol="Differ" />
      <import line="15" module="SebastianBergmann\Exporter" symbol="Exporter" />
      <import line="16" module="SebastianBergmann\ObjectEnumerator" symbol="Enumerator" />
      <import line="17" module="Prophecy\Exception\Prediction" symbol="PredictionException" />
      <import line="18" module="Prophecy" symbol="Prophet" />
      <import line="19" module="DeepCopy" symbol="DeepCopy" />
      <scope attributes="abstract" classrefs="PHPUnit_Framework_Assert" doc="A TestCase defines the fixture to run multiple tests.&#xA;&#xA;To define a TestCase&#xA;&#xA;  1) Implement a subclass of PHPUnit_Framework_TestCase.&#xA;  2) Define instance variables that store the state of the fixture.&#xA;  3) Initialize the fixture state by overriding setUp().&#xA;  4) Clean-up after a test by overriding tearDown().&#xA;&#xA;Each test runs in its own fixture so there can be no side effects&#xA;among test runs.&#xA;&#xA;Here is an example:&#xA;&#xA;&lt;code&gt;&#xA;&lt;?php&#xA;class MathTest extends PHPUnit_Framework_TestCase&#xA;{&#xA;    public $value1;&#xA;    public $value2;&#xA;&#xA;    protected function setUp()&#xA;    {&#xA;        $this-&gt;value1 = 2;&#xA;        $this-&gt;value2 = 3;&#xA;    }&#xA;}&#xA;?&gt;&#xA;&lt;/code&gt;&#xA;&#xA;For each test implement a method which interacts with the fixture.&#xA;Verify the expected results with assertions specified by calling&#xA;assert with a boolean.&#xA;&#xA;&lt;code&gt;&#xA;&lt;?php&#xA;public function testPass()&#xA;{&#xA;    $this-&gt;assertTrue($this-&gt;value1 + $this-&gt;value2 == 5);&#xA;}&#xA;?&gt;&#xA;&lt;/code&gt;&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" interfacerefs="PHPUnit_Framework_Test PHPUnit_Framework_SelfDescribing" line="67" lineend="2569" name="PHPUnit_Framework_TestCase">
        <variable attributes="protected" citdl="bool" doc="Enable or disable the backup and restoration of the $GLOBALS array.&#xA;Overwrite this attribute in a child class of TestCase.&#xA;Setting this attribute in setUp() has no effect!&#xA;&#xA;@var bool" line="76" name="backupGlobals" />
        <variable attributes="protected" citdl="array" doc="@var array" line="81" name="backupGlobalsBlacklist" />
        <variable attributes="protected" citdl="bool" doc="Enable or disable the backup and restoration of static attributes.&#xA;Overwrite this attribute in a child class of TestCase.&#xA;Setting this attribute in setUp() has no effect!&#xA;&#xA;@var bool" line="90" name="backupStaticAttributes" />
        <variable attributes="protected" citdl="array" doc="@var array" line="95" name="backupStaticAttributesBlacklist" />
        <variable attributes="protected" citdl="bool" doc="Whether or not this test is to be run in a separate PHP process.&#xA;&#xA;@var bool" line="102" name="runTestInSeparateProcess" />
        <variable attributes="protected" citdl="bool" doc="Whether or not this test should preserve the global state when&#xA;running in a separate PHP process.&#xA;&#xA;@var bool" line="110" name="preserveGlobalState" />
        <variable attributes="private" citdl="bool" doc="Whether or not this test is running in a separate PHP process.&#xA;&#xA;@var bool" line="117" name="inIsolation" />
        <variable attributes="private" citdl="array" doc="@var array" line="122" name="data" />
        <variable attributes="private" citdl="string" doc="@var string" line="127" name="dataName" />
        <variable attributes="private" citdl="bool" doc="@var bool" line="132" name="useErrorHandler" />
        <variable attributes="private" citdl="string" doc="The name of the expected Exception.&#xA;&#xA;@var string" line="139" name="expectedException" />
        <variable attributes="private" citdl="string" doc="The message of the expected Exception.&#xA;&#xA;@var string" line="146" name="expectedExceptionMessage" />
        <variable attributes="private" citdl="string" doc="The regex pattern to validate the expected Exception message.&#xA;&#xA;@var string" line="153" name="expectedExceptionMessageRegExp" />
        <variable attributes="private" citdl="int" doc="The code of the expected Exception.&#xA;&#xA;@var int|string" line="160" name="expectedExceptionCode" />
        <variable attributes="private" citdl="string" doc="The name of the test case.&#xA;&#xA;@var string" line="167" name="name" />
        <variable attributes="private" citdl="array" doc="@var array" line="172" name="dependencies" />
        <variable attributes="private" citdl="array" doc="@var array" line="177" name="dependencyInput" />
        <variable attributes="private" citdl="array" doc="@var array" line="182" name="iniSettings" />
        <variable attributes="private" citdl="array" doc="@var array" line="187" name="locale" />
        <variable attributes="private" citdl="array" doc="@var array" line="192" name="mockObjects" />
        <variable attributes="private" citdl="array" doc="@var array" line="197" name="mockObjectGenerator" />
        <variable attributes="private" citdl="int" doc="@var int" line="202" name="status" />
        <variable attributes="private" citdl="string" doc="@var string" line="207" name="statusMessage" />
        <variable attributes="private" citdl="int" doc="@var int" line="212" name="numAssertions" />
        <variable attributes="private" citdl="PHPUnit_Framework_TestResult" doc="@var PHPUnit_Framework_TestResult" line="217" name="result" />
        <variable attributes="private" citdl="this.runTest()" doc="@var mixed" line="222" name="testResult" />
        <variable attributes="private" citdl="string" doc="@var string" line="227" name="output" />
        <variable attributes="private" citdl="string" doc="@var string" line="232" name="outputExpectedRegex" />
        <variable attributes="private" citdl="string" doc="@var string" line="237" name="outputExpectedString" />
        <variable attributes="private" citdl="boolean" doc="@var mixed" line="242" name="outputCallback" />
        <variable attributes="private" citdl="bool" doc="@var bool" line="247" name="outputBufferingActive" />
        <variable attributes="private" citdl="int" doc="@var int" line="252" name="outputBufferingLevel" />
        <variable attributes="private" citdl="SebastianBergmann\GlobalState\Snapshot" doc="@var SebastianBergmann\GlobalState\Snapshot" line="257" name="snapshot" />
        <variable attributes="private" citdl="Prophecy\Prophet" doc="@var Prophecy\Prophet" line="262" name="prophet" />
        <variable attributes="private" citdl="bool" doc="@var bool" line="267" name="beStrictAboutChangesToGlobalState" />
        <variable attributes="private" citdl="bool" doc="@var bool" line="272" name="registerMockObjectsFromTestArgumentsRecursively" />
        <variable attributes="private" citdl="string" doc="@var string[]" line="277" name="warnings" />
        <variable attributes="private" citdl="array" doc="@var array" line="282" name="groups" />
        <scope attributes="public __ctor__" doc="&#xA;Constructs a test case with the given name.&#xA;&lt;string&gt; $name  - &#xA;&lt;array&gt; $data  - &#xA;&lt;string&gt; $dataName  - &#xA;" ilk="function" line="291" lineend="299" name="__construct" signature="__construct(string $name = null, array $data=[], string $dataName = &apos;&apos;)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the test case.&#xA;Returns string &#xA;" ilk="function" line="306" lineend="317" name="toString" returns="string" signature="string toString()" />
        <scope attributes="public" doc="&#xA;Counts the number of test cases executed by run(TestResult result).&#xA;Returns int &#xA;" ilk="function" line="324" lineend="327" name="count" returns="int" signature="int count()" />
        <scope attributes="public" doc="&#xA;Since Method available since Release 5.4.0&#xA;" ilk="function" line="332" lineend="335" name="getGroups" returns="this.groups" signature="getGroups()" />
        <scope attributes="public" doc="&#xA;&lt;array&gt; $groups  - &#xA;Since Method available since Release 5.4.0&#xA;" ilk="function" line="342" lineend="345" name="setGroups" signature="setGroups(array $groups)" />
        <scope attributes="public" doc="&#xA;Returns the annotations for this test.&#xA;Returns array &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="354" lineend="360" name="getAnnotations" returns="array" signature="array getAnnotations()" />
        <scope attributes="public" doc="&#xA;Gets the name of a TestCase.&#xA;&lt;bool&gt; $withDataSet  - &#xA;Returns string &#xA;" ilk="function" line="369" lineend="376" name="getName" returns="string" signature="string getName(bool $withDataSet = true)" />
        <scope attributes="public" doc="&#xA;Returns the size of the test.&#xA;Returns int &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="385" lineend="391" name="getSize" returns="int" signature="int getSize()" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 5.3.4&#xA;" ilk="function" line="398" lineend="401" name="hasSize" returns="bool" signature="bool hasSize()" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 5.3.4&#xA;" ilk="function" line="408" lineend="411" name="isSmall" returns="bool" signature="bool isSmall()" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 5.3.4&#xA;" ilk="function" line="418" lineend="421" name="isMedium" returns="bool" signature="bool isMedium()" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 5.3.4&#xA;" ilk="function" line="428" lineend="431" name="isLarge" returns="bool" signature="bool isLarge()" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="438" lineend="445" name="getActualOutput" returns="string" signature="string getActualOutput()" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="452" lineend="463" name="hasOutput" returns="bool" signature="bool hasOutput()" />
        <scope attributes="public" doc="&#xA;&lt;string&gt; $expectedRegex  - &#xA;Since Method available since Release 3.6.0&#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="472" lineend="481" name="expectOutputRegex" signature="expectOutputRegex(string $expectedRegex)" />
        <scope attributes="public" doc="&#xA;&lt;string&gt; $expectedString  - &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="488" lineend="497" name="expectOutputString" signature="expectOutputString(string $expectedString)" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 3.6.5&#xA;Deprecated&#xA;" ilk="function" line="505" lineend="508" name="hasPerformedExpectationsOnOutput" returns="bool" signature="bool hasPerformedExpectationsOnOutput()" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 4.3.3&#xA;" ilk="function" line="515" lineend="518" name="hasExpectationOnOutput" returns="bool" signature="bool hasExpectationOnOutput()" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;Since Method available since Release 3.2.0&#xA;" ilk="function" line="525" lineend="528" name="getExpectedException" returns="string" signature="string getExpectedException()" />
        <scope attributes="public" doc="&#xA;&lt;mixed&gt; $exception  - &#xA;&lt;string&gt; $message  - &#xA;&lt;int|string&gt; $code  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since      Method available since Release 3.2.0&#xA;Deprecated Method deprecated since Release 5.2.0&#xA;" ilk="function" line="540" lineend="551" name="setExpectedException" signature="setExpectedException(mixed $exception, string $message = &apos;&apos;, $code = null)" />
        <scope attributes="public" doc="&#xA;&lt;mixed&gt; $exception  - &#xA;&lt;string&gt; $messageRegExp  - &#xA;&lt;int&gt; $code  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 4.3.0&#xA;" ilk="function" line="562" lineend="574" name="setExpectedExceptionRegExp" signature="setExpectedExceptionRegExp(mixed $exception, string $messageRegExp = &apos;&apos;, int $code = null)" />
        <scope attributes="public" doc="&#xA;&lt;string&gt; $exception  - &#xA;Since Method available since Release 5.2.0&#xA;" ilk="function" line="581" lineend="588" name="expectException" signature="expectException(string $exception)" />
        <scope attributes="public" doc="&#xA;&lt;int|string&gt; $code  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 5.2.0&#xA;" ilk="function" line="597" lineend="604" name="expectExceptionCode" signature="expectExceptionCode($code)" />
        <scope attributes="public" doc="&#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 5.2.0&#xA;" ilk="function" line="613" lineend="620" name="expectExceptionMessage" signature="expectExceptionMessage(string $message)" />
        <scope attributes="public" doc="&#xA;&lt;string&gt; $messageRegExp  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 5.2.0&#xA;" ilk="function" line="629" lineend="636" name="expectExceptionMessageRegExp" signature="expectExceptionMessageRegExp(string $messageRegExp)" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $flag  - &#xA;Since Method available since Release 5.4.0&#xA;" ilk="function" line="643" lineend="650" name="setRegisterMockObjectsFromTestArgumentsRecursively" signature="setRegisterMockObjectsFromTestArgumentsRecursively(bool $flag)" />
        <scope attributes="protected" doc="&#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="655" lineend="678" name="setExpectedExceptionFromAnnotation" signature="setExpectedExceptionFromAnnotation()" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $useErrorHandler  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="685" lineend="688" name="setUseErrorHandler" signature="setUseErrorHandler(bool $useErrorHandler)" />
        <scope attributes="protected" doc="&#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="693" lineend="706" name="setUseErrorHandlerFromAnnotation" signature="setUseErrorHandlerFromAnnotation()" />
        <scope attributes="protected" doc="&#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="711" lineend="725" name="checkRequirements" signature="checkRequirements()" />
        <scope attributes="public" doc="&#xA;Returns the status of this test.&#xA;Returns int &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="734" lineend="737" name="getStatus" returns="int" signature="int getStatus()" />
        <scope attributes="public" doc="&#xA;Returns the status message of this test.&#xA;Returns string &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="746" lineend="749" name="getStatusMessage" returns="string" signature="string getStatusMessage()" />
        <scope attributes="public" doc="&#xA;Returns whether or not this test has failed.&#xA;Returns bool &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="758" lineend="764" name="hasFailed" returns="bool" signature="bool hasFailed()" />
        <scope attributes="public" doc="&#xA;Runs the test case and collects the results in a TestResult object.&#xA;If no TestResult object is passed a new one will be created.&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;Returns phpunit_framework_testresult &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="776" lineend="902" name="run" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult run(PHPUnit_Framework_TestResult $result=null)" />
        <scope attributes="public" doc="&#xA;Runs the bare test sequence.&#xA;" ilk="function" line="907" lineend="1055" name="runBare" signature="runBare()" />
        <scope attributes="protected" doc="&#xA;Override to run the test and assert its state.&#xA;Returns mixed &#xA;Throws Exception|PHPUnit_Framework_Exception&#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="1065" lineend="1163" name="runTest" returns="mixed" signature="mixed runTest()" />
        <scope attributes="protected" doc="&#xA;Verifies the mock object expectations.&#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1170" lineend="1203" name="verifyMockObjects" signature="verifyMockObjects()" />
        <scope attributes="public" doc="Sets the name of a TestCase.&#xA;&#xA;@param  string" ilk="function" line="1210" lineend="1213" name="setName" signature="setName($name)" />
        <scope attributes="public" doc="&#xA;Sets the dependencies of a TestCase.&#xA;&lt;array&gt; $dependencies  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1222" lineend="1225" name="setDependencies" signature="setDependencies(array $dependencies)" />
        <scope attributes="public" doc="&#xA;Returns true if the tests has dependencies&#xA;Returns bool &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="1234" lineend="1237" name="hasDependencies" returns="bool" signature="bool hasDependencies()" />
        <scope attributes="public" doc="&#xA;Sets&#xA;&lt;array&gt; $dependencyInput  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1246" lineend="1249" name="setDependencyInput" signature="setDependencyInput(array $dependencyInput)" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $beStrictAboutChangesToGlobalState  - &#xA;Since Method available since Release 4.6.0&#xA;" ilk="function" line="1256" lineend="1259" name="setBeStrictAboutChangesToGlobalState" signature="setBeStrictAboutChangesToGlobalState(bool $beStrictAboutChangesToGlobalState)" />
        <scope attributes="public" doc="&#xA;Calling this method in setUp() has no effect!&#xA;&lt;bool&gt; $backupGlobals  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1268" lineend="1273" name="setBackupGlobals" signature="setBackupGlobals(bool $backupGlobals)" />
        <scope attributes="public" doc="&#xA;Calling this method in setUp() has no effect!&#xA;&lt;bool&gt; $backupStaticAttributes  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1282" lineend="1288" name="setBackupStaticAttributes" signature="setBackupStaticAttributes(bool $backupStaticAttributes)" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $runTestInSeparateProcess  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1297" lineend="1306" name="setRunTestInSeparateProcess" signature="setRunTestInSeparateProcess(bool $runTestInSeparateProcess)" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $preserveGlobalState  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1315" lineend="1322" name="setPreserveGlobalState" signature="setPreserveGlobalState(bool $preserveGlobalState)" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $inIsolation  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1331" lineend="1338" name="setInIsolation" signature="setInIsolation(bool $inIsolation)" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 4.3.0&#xA;" ilk="function" line="1345" lineend="1348" name="isInIsolation" returns="bool" signature="bool isInIsolation()" />
        <scope attributes="public" doc="&#xA;Returns mixed &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1355" lineend="1358" name="getResult" returns="mixed" signature="mixed getResult()" />
        <scope attributes="public" doc="&#xA;&lt;mixed&gt; $result  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1365" lineend="1368" name="setResult" signature="setResult(mixed $result)" />
        <scope attributes="public" doc="&#xA;&lt;callable&gt; $callback  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="1377" lineend="1384" name="setOutputCallback" signature="setOutputCallback(callable $callback)" />
        <scope attributes="public" doc="&#xA;Returns phpunit_framework_testresult &#xA;Since Method available since Release 3.5.7&#xA;" ilk="function" line="1391" lineend="1394" name="getTestResultObject" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult getTestResultObject()" />
        <scope attributes="public" doc="&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="1401" lineend="1404" name="setTestResultObject" signature="setTestResultObject(PHPUnit_Framework_TestResult $result)" />
        <scope attributes="public" doc="&#xA;&lt;phpunit_framework_mockobject_mockobject&gt; $mockObject  - &#xA;Since Method available since Release 5.4.0&#xA;" ilk="function" line="1411" lineend="1414" name="registerMockObject" signature="registerMockObject(PHPUnit_Framework_MockObject_MockObject $mockObject)" />
        <scope attributes="protected" doc="&#xA;This method is a wrapper for the ini_set() function that automatically&#xA;resets the modified php.ini setting to its original value after the&#xA;test is run.&#xA;&lt;string&gt; $varName  - &#xA;&lt;string&gt; $newValue  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1428" lineend="1447" name="iniSet" signature="iniSet(string $varName, string $newValue)" />
        <scope attributes="protected" doc="&#xA;This method is a wrapper for the setlocale() function that automatically&#xA;resets the locale to its original value after the test is run.&#xA;&lt;int&gt; $category  - &#xA;&lt;string&gt; $locale  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1460" lineend="1498" name="setLocale" signature="setLocale(int $category, string $locale)" />
        <scope attributes="public" doc="&#xA;Returns a builder object to create mock objects using a fluent interface.&#xA;&lt;string&gt; $className  - &#xA;Returns phpunit_framework_mockobject_mockbuilder &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1509" lineend="1512" name="getMockBuilder" returns="PHPUnit_Framework_MockObject_MockBuilder" signature="phpunit_framework_mockobject_mockbuilder getMockBuilder(string $className)" />
        <scope attributes="protected" doc="&#xA;Returns a test double for the specified class.&#xA;&lt;string&gt; $originalClassName  - &#xA;Returns phpunit_framework_mockobject_mockobject &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 5.4.0&#xA;" ilk="function" line="1525" lineend="1533" name="createMock" returns="PHPUnit_Framework_MockObject_MockObject" signature="phpunit_framework_mockobject_mockobject createMock(string $originalClassName)" />
        <scope attributes="protected" doc="&#xA;Returns a partial test double for the specified class.&#xA;&lt;string&gt; $originalClassName  - &#xA;&lt;array&gt; $methods  - &#xA;Returns phpunit_framework_mockobject_mockobject &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 5.5.0&#xA;" ilk="function" line="1547" lineend="1556" name="createPartialMock" returns="PHPUnit_Framework_MockObject_MockObject" signature="phpunit_framework_mockobject_mockobject createPartialMock(string $originalClassName, array $methods)" />
        <scope attributes="protected" doc="&#xA;Returns a mock object for the specified class.&#xA;&lt;string&gt; $originalClassName  - Name of the class to mock.&#xA;&lt;array|null&gt; $methods  - When provided, only methods whose names are in the array&#xA;                                           are replaced with a configurable test double. The behavior&#xA;                                           of the other methods is not changed.&#xA;                                           Providing null means that no methods will be replaced.&#xA;&lt;array&gt; $arguments  - Parameters to pass to the original class&apos; constructor.&#xA;&lt;string&gt; $mockClassName  - Class name for the generated test double class.&#xA;&lt;bool&gt; $callOriginalConstructor  - Can be used to disable the call to the original class&apos; constructor.&#xA;&lt;bool&gt; $callOriginalClone  - Can be used to disable the call to the original class&apos; clone constructor.&#xA;&lt;bool&gt; $callAutoload  - Can be used to disable __autoload() during the generation of the test double class.&#xA;&lt;bool&gt; $cloneArguments  - &#xA;&lt;bool&gt; $callOriginalMethods  - &#xA;&lt;object&gt; $proxyTarget  - &#xA;Returns phpunit_framework_mockobject_mockobject &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.0.0&#xA;Deprecated Method deprecated since Release 5.4.0&#xA;" ilk="function" line="1582" lineend="1602" name="getMock" returns="PHPUnit_Framework_MockObject_MockObject" signature="phpunit_framework_mockobject_mockobject getMock(string $originalClassName, $methods = [], array $arguments=[], string $mockClassName = &apos;&apos;, bool $callOriginalConstructor = true, bool $callOriginalClone = true, bool $callAutoload = true, bool $cloneArguments = false, bool $callOriginalMethods = false, object $proxyTarget = null)" />
        <scope attributes="protected" doc="&#xA;Returns a mock with disabled constructor object for the specified class.&#xA;&lt;string&gt; $originalClassName  - &#xA;Returns phpunit_framework_mockobject_mockobject &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 5.0.0&#xA;Deprecated Method deprecated since Release 5.4.0&#xA;" ilk="function" line="1616" lineend="1623" name="getMockWithoutInvokingTheOriginalConstructor" returns="PHPUnit_Framework_MockObject_MockObject" signature="phpunit_framework_mockobject_mockobject getMockWithoutInvokingTheOriginalConstructor(string $originalClassName)" />
        <scope attributes="protected" doc="&#xA;Mocks the specified class and returns the name of the mocked class.&#xA;&lt;string&gt; $originalClassName  - &#xA;&lt;array&gt; $methods  - &#xA;&lt;array&gt; $arguments  - &#xA;&lt;string&gt; $mockClassName  - &#xA;&lt;bool&gt; $callOriginalConstructor  - &#xA;&lt;bool&gt; $callOriginalClone  - &#xA;&lt;bool&gt; $callAutoload  - &#xA;&lt;bool&gt; $cloneArguments  - &#xA;Returns string &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1643" lineend="1657" name="getMockClass" returns="string" signature="string getMockClass(string $originalClassName, array $methods = [], array $arguments=[], string $mockClassName = &apos;&apos;, bool $callOriginalConstructor = false, bool $callOriginalClone = true, bool $callAutoload = true, bool $cloneArguments = false)" />
        <scope attributes="protected" doc="&#xA;Returns a mock object for the specified abstract class with all abstract&#xA;methods of the class mocked. Concrete methods are not mocked by default.&#xA;To mock concrete methods, use the 7th parameter ($mockedMethods).&#xA;&lt;string&gt; $originalClassName  - &#xA;&lt;array&gt; $arguments  - &#xA;&lt;string&gt; $mockClassName  - &#xA;&lt;bool&gt; $callOriginalConstructor  - &#xA;&lt;bool&gt; $callOriginalClone  - &#xA;&lt;bool&gt; $callAutoload  - &#xA;&lt;array&gt; $mockedMethods  - &#xA;&lt;bool&gt; $cloneArguments  - &#xA;Returns phpunit_framework_mockobject_mockobject &#xA;Since Method available since Release 3.4.0&#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="1679" lineend="1695" name="getMockForAbstractClass" returns="PHPUnit_Framework_MockObject_MockObject" signature="phpunit_framework_mockobject_mockobject getMockForAbstractClass(string $originalClassName, array $arguments=[], string $mockClassName = &apos;&apos;, bool $callOriginalConstructor = true, bool $callOriginalClone = true, bool $callAutoload = true, array $mockedMethods = [], bool $cloneArguments = false)" />
        <scope attributes="protected" doc="&#xA;Returns a mock object based on the given WSDL file.&#xA;&lt;string&gt; $wsdlFile  - &#xA;&lt;string&gt; $originalClassName  - &#xA;&lt;string&gt; $mockClassName  - &#xA;&lt;array&gt; $methods  - &#xA;&lt;bool&gt; $callOriginalConstructor  - &#xA;&lt;array&gt; $options  - An array of options passed to SOAPClient::_construct&#xA;Returns phpunit_framework_mockobject_mockobject &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1711" lineend="1741" name="getMockFromWsdl" returns="PHPUnit_Framework_MockObject_MockObject" signature="phpunit_framework_mockobject_mockobject getMockFromWsdl(string $wsdlFile, string $originalClassName = &apos;&apos;, string $mockClassName = &apos;&apos;, array $methods=[], bool $callOriginalConstructor = true, array $options=[])" />
        <scope attributes="protected" doc="&#xA;Returns a mock object for the specified trait with all abstract methods&#xA;of the trait mocked. Concrete methods to mock can be specified with the&#xA;`$mockedMethods` parameter.&#xA;&lt;string&gt; $traitName  - &#xA;&lt;array&gt; $arguments  - &#xA;&lt;string&gt; $mockClassName  - &#xA;&lt;bool&gt; $callOriginalConstructor  - &#xA;&lt;bool&gt; $callOriginalClone  - &#xA;&lt;bool&gt; $callAutoload  - &#xA;&lt;array&gt; $mockedMethods  - &#xA;&lt;bool&gt; $cloneArguments  - &#xA;Returns phpunit_framework_mockobject_mockobject &#xA;Since Method available since Release 4.0.0&#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="1763" lineend="1779" name="getMockForTrait" returns="PHPUnit_Framework_MockObject_MockObject" signature="phpunit_framework_mockobject_mockobject getMockForTrait(string $traitName, array $arguments=[], string $mockClassName = &apos;&apos;, bool $callOriginalConstructor = true, bool $callOriginalClone = true, bool $callAutoload = true, array $mockedMethods = [], bool $cloneArguments = false)" />
        <scope attributes="protected" doc="&#xA;Returns an object for the specified trait.&#xA;&lt;string&gt; $traitName  - &#xA;&lt;array&gt; $arguments  - &#xA;&lt;string&gt; $traitClassName  - &#xA;&lt;bool&gt; $callOriginalConstructor  - &#xA;&lt;bool&gt; $callOriginalClone  - &#xA;&lt;bool&gt; $callAutoload  - &#xA;&lt;bool&gt; $cloneArguments  - &#xA;Returns object &#xA;Since Method available since Release 3.6.0&#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="1798" lineend="1809" name="getObjectForTrait" returns="object" signature="object getObjectForTrait(string $traitName, array $arguments=[], string $traitClassName = &apos;&apos;, bool $callOriginalConstructor = true, bool $callOriginalClone = true, bool $callAutoload = true, bool $cloneArguments = false)" />
        <scope attributes="protected" doc="&#xA;&lt;string|null&gt; $classOrInterface  - &#xA;Returns \prophecy\prophecy\objectprophecy &#xA;Throws \LogicException&#xA;Since Method available since Release 4.5.0&#xA;" ilk="function" line="1820" lineend="1823" name="prophesize" returns="\Prophecy\Prophecy\ObjectProphecy" signature="\prophecy\prophecy\objectprophecy prophesize($classOrInterface = null)" />
        <scope attributes="public" doc="&#xA;Adds a value to the assertion counter.&#xA;&lt;int&gt; $count  - &#xA;Since Method available since Release 3.3.3&#xA;" ilk="function" line="1832" lineend="1835" name="addToAssertionCount" signature="addToAssertionCount(int $count)" />
        <scope attributes="public" doc="&#xA;Returns the number of assertions performed by this test.&#xA;Returns int &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1844" lineend="1847" name="getNumAssertions" returns="int" signature="int getNumAssertions()" />
        <scope attributes="public static" doc="&#xA;Returns a matcher that matches when the method is executed&#xA;zero or more times.&#xA;Returns phpunit_framework_mockobject_matcher_anyinvokedcount &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1857" lineend="1860" name="any" returns="PHPUnit_Framework_MockObject_Matcher_AnyInvokedCount" signature="phpunit_framework_mockobject_matcher_anyinvokedcount any()" />
        <scope attributes="public static" doc="&#xA;Returns a matcher that matches when the method is never executed.&#xA;Returns phpunit_framework_mockobject_matcher_invokedcount &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1869" lineend="1872" name="never" returns="PHPUnit_Framework_MockObject_Matcher_InvokedCount" signature="phpunit_framework_mockobject_matcher_invokedcount never()" />
        <scope attributes="public static" doc="&#xA;Returns a matcher that matches when the method is executed&#xA;at least N times.&#xA;&lt;int&gt; $requiredInvocations  - &#xA;Returns phpunit_framework_mockobject_matcher_invokedatleastcount &#xA;Since Method available since Release 4.2.0&#xA;" ilk="function" line="1884" lineend="1889" name="atLeast" returns="PHPUnit_Framework_MockObject_Matcher_InvokedAtLeastCount" signature="phpunit_framework_mockobject_matcher_invokedatleastcount atLeast(int $requiredInvocations)" />
        <scope attributes="public static" doc="&#xA;Returns a matcher that matches when the method is executed at least once.&#xA;Returns phpunit_framework_mockobject_matcher_invokedatleastonce &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1898" lineend="1901" name="atLeastOnce" returns="PHPUnit_Framework_MockObject_Matcher_InvokedAtLeastOnce" signature="phpunit_framework_mockobject_matcher_invokedatleastonce atLeastOnce()" />
        <scope attributes="public static" doc="&#xA;Returns a matcher that matches when the method is executed exactly once.&#xA;Returns phpunit_framework_mockobject_matcher_invokedcount &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1910" lineend="1913" name="once" returns="PHPUnit_Framework_MockObject_Matcher_InvokedCount" signature="phpunit_framework_mockobject_matcher_invokedcount once()" />
        <scope attributes="public static" doc="&#xA;Returns a matcher that matches when the method is executed&#xA;exactly $count times.&#xA;&lt;int&gt; $count  - &#xA;Returns phpunit_framework_mockobject_matcher_invokedcount &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1925" lineend="1928" name="exactly" returns="PHPUnit_Framework_MockObject_Matcher_InvokedCount" signature="phpunit_framework_mockobject_matcher_invokedcount exactly(int $count)" />
        <scope attributes="public static" doc="&#xA;Returns a matcher that matches when the method is executed&#xA;at most N times.&#xA;&lt;int&gt; $allowedInvocations  - &#xA;Returns phpunit_framework_mockobject_matcher_invokedatmostcount &#xA;Since Method available since Release 4.2.0&#xA;" ilk="function" line="1940" lineend="1945" name="atMost" returns="PHPUnit_Framework_MockObject_Matcher_InvokedAtMostCount" signature="phpunit_framework_mockobject_matcher_invokedatmostcount atMost(int $allowedInvocations)" />
        <scope attributes="public static" doc="&#xA;Returns a matcher that matches when the method is executed&#xA;at the given index.&#xA;&lt;int&gt; $index  - &#xA;Returns phpunit_framework_mockobject_matcher_invokedatindex &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1957" lineend="1960" name="at" returns="PHPUnit_Framework_MockObject_Matcher_InvokedAtIndex" signature="phpunit_framework_mockobject_matcher_invokedatindex at(int $index)" />
        <scope attributes="public static" doc="&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_mockobject_stub_return &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1969" lineend="1972" name="returnValue" returns="PHPUnit_Framework_MockObject_Stub_Return" signature="phpunit_framework_mockobject_stub_return returnValue(mixed $value)" />
        <scope attributes="public static" doc="&#xA;&lt;array&gt; $valueMap  - &#xA;Returns phpunit_framework_mockobject_stub_returnvaluemap &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="1981" lineend="1984" name="returnValueMap" returns="PHPUnit_Framework_MockObject_Stub_ReturnValueMap" signature="phpunit_framework_mockobject_stub_returnvaluemap returnValueMap(array $valueMap)" />
        <scope attributes="public static" doc="&#xA;&lt;int&gt; $argumentIndex  - &#xA;Returns phpunit_framework_mockobject_stub_returnargument &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1993" lineend="1998" name="returnArgument" returns="PHPUnit_Framework_MockObject_Stub_ReturnArgument" signature="phpunit_framework_mockobject_stub_returnargument returnArgument(int $argumentIndex)" />
        <scope attributes="public static" doc="&#xA;&lt;mixed&gt; $callback  - &#xA;Returns phpunit_framework_mockobject_stub_returncallback &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="2007" lineend="2010" name="returnCallback" returns="PHPUnit_Framework_MockObject_Stub_ReturnCallback" signature="phpunit_framework_mockobject_stub_returncallback returnCallback(mixed $callback)" />
        <scope attributes="public static" doc="&#xA;Returns the current object.&#xA;This method is useful when mocking a fluent interface.&#xA;Returns phpunit_framework_mockobject_stub_returnself &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="2021" lineend="2024" name="returnSelf" returns="PHPUnit_Framework_MockObject_Stub_ReturnSelf" signature="phpunit_framework_mockobject_stub_returnself returnSelf()" />
        <scope attributes="public static" doc="&#xA;&lt;throwable|exception&gt; $exception  - &#xA;Returns phpunit_framework_mockobject_stub_exception &#xA;Since Method available since Release 3.1.0&#xA;Todo   Add type declaration when support for PHP 5 is dropped&#xA;" ilk="function" line="2035" lineend="2038" name="throwException" returns="PHPUnit_Framework_MockObject_Stub_Exception" signature="phpunit_framework_mockobject_stub_exception throwException($exception)" />
        <scope attributes="public static" doc="&#xA;&lt;mixed&gt; $value,  - ...&#xA;Returns phpunit_framework_mockobject_stub_consecutivecalls &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2047" lineend="2052" name="onConsecutiveCalls" returns="PHPUnit_Framework_MockObject_Stub_ConsecutiveCalls" signature="phpunit_framework_mockobject_stub_consecutivecalls onConsecutiveCalls(mixed $value)" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 5.4.0&#xA;" ilk="function" line="2059" lineend="2062" name="usesDataProvider" returns="bool" signature="bool usesDataProvider()" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;Since Method available since Release 5.4.0&#xA;" ilk="function" line="2069" lineend="2072" name="dataDescription" returns="string" signature="string dataDescription()" />
        <scope attributes="protected" doc="&#xA;Gets the data set description of a TestCase.&#xA;&lt;bool&gt; $includeData  - &#xA;Returns string &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="2083" lineend="2102" name="getDataSetAsString" returns="string" signature="string getDataSetAsString(bool $includeData = true)" />
        <scope attributes="protected" doc="&#xA;Creates a default TestResult object.&#xA;Returns phpunit_framework_testresult &#xA;" ilk="function" line="2109" lineend="2112" name="createResult" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult createResult()" />
        <scope attributes="protected" doc="&#xA;Since Method available since Release 3.5.4&#xA;" ilk="function" line="2117" lineend="2195" name="handleDependencies" returns="boolean" signature="handleDependencies()" />
        <scope attributes="public static" doc="&#xA;This method is called before the first test of this test class is run.&#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="2202" lineend="2204" name="setUpBeforeClass" signature="setUpBeforeClass()" />
        <scope attributes="protected" doc="&#xA;Sets up the fixture, for example, open a network connection.&#xA;This method is called before a test is executed.&#xA;" ilk="function" line="2210" lineend="2212" name="setUp" signature="setUp()" />
        <scope attributes="protected" doc="&#xA;Performs assertions shared by all tests of a test case.&#xA;This method is called before the execution of a test starts&#xA;and after setUp() is called.&#xA;Since Method available since Release 3.2.8&#xA;" ilk="function" line="2222" lineend="2224" name="assertPreConditions" signature="assertPreConditions()" />
        <scope attributes="protected" doc="&#xA;Performs assertions shared by all tests of a test case.&#xA;This method is called before the execution of a test ends&#xA;and before tearDown() is called.&#xA;Since Method available since Release 3.2.8&#xA;" ilk="function" line="2234" lineend="2236" name="assertPostConditions" signature="assertPostConditions()" />
        <scope attributes="protected" doc="&#xA;Tears down the fixture, for example, close a network connection.&#xA;This method is called after a test is executed.&#xA;" ilk="function" line="2242" lineend="2244" name="tearDown" signature="tearDown()" />
        <scope attributes="public static" doc="&#xA;This method is called after the last test of this test class is run.&#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="2251" lineend="2253" name="tearDownAfterClass" signature="tearDownAfterClass()" />
        <scope attributes="protected" doc="&#xA;This method is called when a test method did not execute successfully.&#xA;&lt;exception|throwable&gt; $e  - &#xA;Since Method available since Release 3.4.0&#xA;Throws Exception|Throwable&#xA;" ilk="function" line="2264" lineend="2276" name="onNotSuccessfulTest" signature="onNotSuccessfulTest($e)" />
        <scope attributes="protected" doc="&#xA;Performs custom preparations on the process isolation template.&#xA;&lt;text_template&gt; $template  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="2285" lineend="2287" name="prepareTemplate" signature="prepareTemplate(Text_Template $template)" />
        <scope attributes="protected" doc="&#xA;Get the mock object generator, creating it if it doesn&apos;t exist.&#xA;Returns phpunit_framework_mockobject_generator &#xA;" ilk="function" line="2294" lineend="2301" name="getMockObjectGenerator" returns="PHPUnit_Framework_MockObject_Generator" signature="phpunit_framework_mockobject_generator getMockObjectGenerator()" />
        <scope attributes="private" doc="&#xA;Since Method available since Release 4.2.0&#xA;" ilk="function" line="2306" lineend="2316" name="startOutputBuffering" signature="startOutputBuffering()" />
        <scope attributes="private" doc="&#xA;Since Method available since Release 4.2.0&#xA;" ilk="function" line="2321" lineend="2348" name="stopOutputBuffering" signature="stopOutputBuffering()" />
        <scope attributes="private" ilk="function" line="2350" lineend="2360" name="snapshotGlobalState" signature="snapshotGlobalState()" />
        <scope attributes="private" ilk="function" line="2362" lineend="2396" name="restoreGlobalState" signature="restoreGlobalState()" />
        <scope attributes="private" doc="&#xA;&lt;bool&gt; $backupGlobals  - &#xA;Returns snapshot &#xA;" ilk="function" line="2403" lineend="2441" name="createGlobalStateSnapshot" returns="Snapshot" signature="snapshot createGlobalStateSnapshot(bool $backupGlobals)" />
        <scope attributes="private" doc="&#xA;&lt;snapshot&gt; $before  - &#xA;&lt;snapshot&gt; $after  - &#xA;Throws PHPUnit_Framework_RiskyTestError&#xA;" ilk="function" line="2449" lineend="2474" name="compareGlobalStateSnapshots" signature="compareGlobalStateSnapshots(Snapshot $before, Snapshot $after)" />
        <scope attributes="private" doc="&#xA;&lt;array&gt; $before  - &#xA;&lt;array&gt; $after  - &#xA;&lt;string&gt; $header  - &#xA;Throws PHPUnit_Framework_RiskyTestError&#xA;" ilk="function" line="2483" lineend="2498" name="compareGlobalStateSnapshotPart" signature="compareGlobalStateSnapshotPart(array $before, array $after, string $header)" />
        <scope attributes="private" doc="&#xA;Returns prophecy\prophet &#xA;Since Method available since Release 4.5.0&#xA;" ilk="function" line="2505" lineend="2512" name="getProphet" returns="Prophecy\Prophet" signature="prophecy\prophet getProphet()" />
        <scope attributes="private" doc="&#xA;&lt;phpunit_framework_mockobject_mockobject&gt; $mock  - &#xA;Returns bool &#xA;Since Method available since Release 5.0.0&#xA;" ilk="function" line="2521" lineend="2542" name="shouldInvocationMockerBeReset" returns="bool" signature="bool shouldInvocationMockerBeReset(PHPUnit_Framework_MockObject_MockObject $mock)" />
        <scope attributes="private" doc="&#xA;&lt;array&gt; $testArguments  - &#xA;Since Method available since Release 5.0.0&#xA;" ilk="function" line="2549" lineend="2568" name="registerMockObjectsFromTestArguments" signature="registerMockObjectsFromTestArguments(array $testArguments)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="TestFailure.php">
    <scope ilk="blob" lang="PHP" name="TestFailure.php" src="phpunit-5.5.0/src/Framework/TestFailure.php">
      <scope doc="A TestFailure collects a failed test together with the caught exception.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" line="16" lineend="169" name="PHPUnit_Framework_TestFailure">
        <variable attributes="private" citdl="string" doc="@var string" line="21" name="testName" />
        <variable attributes="protected" citdl="PHPUnit_Framework_Test" doc="@var PHPUnit_Framework_Test|null" line="26" name="failedTest" />
        <variable attributes="protected" citdl="Exception" doc="@var Exception" line="31" name="thrownException" />
        <scope attributes="public __ctor__" doc="&#xA;Constructs a TestFailure with the given test and exception.&#xA;&lt;phpunit_framework_test&gt; $failedTest  - &#xA;&lt;throwable&gt; $t  - &#xA;" ilk="function" line="39" lineend="52" name="__construct" signature="__construct(PHPUnit_Framework_Test $failedTest, Throwable $t)" />
        <scope attributes="public" doc="&#xA;Returns a short description of the failure.&#xA;Returns string &#xA;" ilk="function" line="59" lineend="66" name="toString" returns="string" signature="string toString()" />
        <scope attributes="public" doc="&#xA;Returns a description for the thrown exception.&#xA;Returns string &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="75" lineend="78" name="getExceptionAsString" returns="string" signature="string getExceptionAsString()" />
        <scope attributes="public static" doc="&#xA;Returns a description for an exception.&#xA;&lt;exception&gt; $e  - &#xA;Returns string &#xA;Since Method available since Release 3.2.0&#xA;" ilk="function" line="89" lineend="110" name="exceptionToString" returns="string" signature="string exceptionToString(Exception $e)" />
        <scope attributes="public" doc="&#xA;Returns the name of the failing test (including data set, if any).&#xA;Returns string &#xA;Since Method available since Release 4.3.0&#xA;" ilk="function" line="119" lineend="122" name="getTestName" returns="string" signature="string getTestName()" />
        <scope attributes="public" doc="&#xA;Returns the failing test.&#xA;Note: The test object is not set when the test is executed in process&#xA;isolation.&#xA;See PHPUnit_Framework_Exception&#xA;Returns phpunit_framework_test|null &#xA;" ilk="function" line="134" lineend="137" name="failedTest" returns="PHPUnit_Framework_Test" signature="phpunit_framework_test failedTest()" />
        <scope attributes="public" doc="&#xA;Gets the thrown exception.&#xA;Returns exception &#xA;" ilk="function" line="144" lineend="147" name="thrownException" returns="Exception" signature="exception thrownException()" />
        <scope attributes="public" doc="&#xA;Returns the exception&apos;s message.&#xA;Returns string &#xA;" ilk="function" line="154" lineend="157" name="exceptionMessage" returns="string" signature="string exceptionMessage()" />
        <scope attributes="public" doc="&#xA;Returns true if the thrown exception&#xA;is of type AssertionFailedError.&#xA;Returns bool &#xA;" ilk="function" line="165" lineend="168" name="isFailure" returns="bool" signature="bool isFailure()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="TestListener.php">
    <scope ilk="blob" lang="PHP" name="TestListener.php" src="phpunit-5.5.0/src/Framework/TestListener.php">
      <scope ilk="interface" line="16" lineend="114" name="PHPUnit_Framework_TestListener" signature="PHPUnit_Framework_TestListener">
        <scope attributes="public" doc="&#xA;An error occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="25" lineend="25" name="addError" signature="addError(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A failure occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_assertionfailederror&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="49" lineend="49" name="addFailure" signature="addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, float $time)" />
        <scope attributes="public" doc="&#xA;Incomplete test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="58" lineend="58" name="addIncompleteTest" signature="addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Risky test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="69" lineend="69" name="addRiskyTest" signature="addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Skipped test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="80" lineend="80" name="addSkippedTest" signature="addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A test suite started.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since Method available since Release 2.2.0&#xA;" ilk="function" line="89" lineend="89" name="startTestSuite" signature="startTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test suite ended.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since Method available since Release 2.2.0&#xA;" ilk="function" line="98" lineend="98" name="endTestSuite" signature="endTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test started.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="105" lineend="105" name="startTest" signature="startTest(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;A test ended.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="113" lineend="113" name="endTest" signature="endTest(PHPUnit_Framework_Test $test, float $time)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="TestResult.php">
    <scope ilk="blob" lang="PHP" name="TestResult.php" src="phpunit-5.5.0/src/Framework/TestResult.php">
      <import line="11" module="SebastianBergmann\CodeCoverage" symbol="CodeCoverage" />
      <import alias="CodeCoverageException" line="12" module="SebastianBergmann\CodeCoverage" symbol="Exception" />
      <import line="13" module="SebastianBergmann\CodeCoverage" symbol="CoveredCodeNotExecutedException" />
      <import line="14" module="SebastianBergmann\CodeCoverage" symbol="MissingCoversAnnotationException" />
      <import line="15" module="SebastianBergmann\CodeCoverage" symbol="UnintentionallyCoveredCodeException" />
      <import line="16" module="SebastianBergmann\ResourceOperations" symbol="ResourceOperations" />
      <scope doc="A TestResult collects the results of executing a test case.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" interfacerefs="Countable" line="23" lineend="1353" name="PHPUnit_Framework_TestResult">
        <variable attributes="protected" citdl="array" doc="@var array" line="28" name="passed" />
        <variable attributes="protected" citdl="array" doc="@var array" line="33" name="errors" />
        <variable attributes="protected" citdl="array" doc="@var array" line="38" name="failures" />
        <variable attributes="protected" citdl="array" doc="@var array" line="43" name="warnings" />
        <variable attributes="protected" citdl="array" doc="@var array" line="48" name="notImplemented" />
        <variable attributes="protected" citdl="array" doc="@var array" line="53" name="risky" />
        <variable attributes="protected" citdl="array" doc="@var array" line="58" name="skipped" />
        <variable attributes="protected" citdl="array" doc="@var array" line="63" name="listeners" />
        <variable attributes="protected" citdl="int" doc="@var int" line="68" name="runTests" />
        <variable attributes="protected" citdl="float" doc="@var float" line="73" name="time" />
        <variable attributes="protected" citdl="PHPUnit_Framework_TestSuite" doc="@var PHPUnit_Framework_TestSuite" line="78" name="topTestSuite" />
        <variable attributes="protected" citdl="CodeCoverage" doc="Code Coverage information.&#xA;&#xA;@var CodeCoverage" line="85" name="codeCoverage" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="90" name="convertErrorsToExceptions" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="95" name="stop" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="100" name="stopOnError" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="105" name="stopOnFailure" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="110" name="stopOnWarning" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="115" name="beStrictAboutTestsThatDoNotTestAnything" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="120" name="beStrictAboutOutputDuringTests" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="125" name="beStrictAboutTodoAnnotatedTests" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="130" name="beStrictAboutResourceUsageDuringSmallTests" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="135" name="enforceTimeLimit" />
        <variable attributes="protected" citdl="int" doc="@var int" line="140" name="timeoutForSmallTests" />
        <variable attributes="protected" citdl="int" doc="@var int" line="145" name="timeoutForMediumTests" />
        <variable attributes="protected" citdl="int" doc="@var int" line="150" name="timeoutForLargeTests" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="155" name="stopOnRisky" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="160" name="stopOnIncomplete" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="165" name="stopOnSkipped" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="170" name="lastTestFailed" />
        <variable attributes="private" citdl="bool" doc="@var bool" line="175" name="registerMockObjectsFromTestArgumentsRecursively" />
        <scope attributes="public" doc="Registers a TestListener.&#xA;&#xA;@param  PHPUnit_Framework_TestListener" ilk="function" line="182" lineend="185" name="addListener" signature="addListener(PHPUnit_Framework_TestListener $listener)" />
        <scope attributes="public" doc="&#xA;Unregisters a TestListener.&#xA;&lt;phpunit_framework_testlistener&gt; $listener  - &#xA;" ilk="function" line="192" lineend="199" name="removeListener" signature="removeListener(PHPUnit_Framework_TestListener $listener)" />
        <scope attributes="public" doc="&#xA;Flushes all flushable TestListeners.&#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="206" lineend="213" name="flushListeners" signature="flushListeners()" />
        <scope attributes="public" doc="&#xA;Adds an error to the list of errors.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;throwable&gt; $t  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="222" lineend="265" name="addError" signature="addError(PHPUnit_Framework_Test $test, Throwable $t, float $time)" />
        <scope attributes="public" doc="&#xA;Adds a warning to the list of warnings.&#xA;The passed in exception caused the warning.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_warning&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 5.1.0&#xA;" ilk="function" line="277" lineend="294" name="addWarning" signature="addWarning(PHPUnit_Framework_Test $test, PHPUnit_Framework_Warning $e, float $time)" />
        <scope attributes="public" doc="&#xA;Adds a failure to the list of failures.&#xA;The passed in exception caused the failure.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_assertionfailederror&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="304" lineend="343" name="addFailure" signature="addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, float $time)" />
        <scope attributes="public" doc="&#xA;Informs the result that a testsuite will be started.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since Method available since Release 2.2.0&#xA;" ilk="function" line="352" lineend="361" name="startTestSuite" signature="startTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;Informs the result that a testsuite was completed.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since Method available since Release 2.2.0&#xA;" ilk="function" line="370" lineend="375" name="endTestSuite" signature="endTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;Informs the result that a test will be started.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="382" lineend="390" name="startTest" signature="startTest(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;Informs the result that a test was completed.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="398" lineend="418" name="endTest" signature="endTest(PHPUnit_Framework_Test $test, float $time)" />
        <scope attributes="public" doc="&#xA;Returns true if no risky test occurred.&#xA;Returns bool &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="427" lineend="430" name="allHarmless" returns="bool" signature="bool allHarmless()" />
        <scope attributes="public" doc="&#xA;Gets the number of risky tests.&#xA;Returns int &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="439" lineend="442" name="riskyCount" returns="int" signature="int riskyCount()" />
        <scope attributes="public" doc="&#xA;Returns true if no incomplete test occurred.&#xA;Returns bool &#xA;" ilk="function" line="449" lineend="452" name="allCompletelyImplemented" returns="bool" signature="bool allCompletelyImplemented()" />
        <scope attributes="public" doc="&#xA;Gets the number of incomplete tests.&#xA;Returns int &#xA;" ilk="function" line="459" lineend="462" name="notImplementedCount" returns="int" signature="int notImplementedCount()" />
        <scope attributes="public" doc="&#xA;Returns an Enumeration for the risky tests.&#xA;Returns array &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="471" lineend="474" name="risky" returns="array" signature="array risky()" />
        <scope attributes="public" doc="&#xA;Returns an Enumeration for the incomplete tests.&#xA;Returns array &#xA;" ilk="function" line="481" lineend="484" name="notImplemented" returns="array" signature="array notImplemented()" />
        <scope attributes="public" doc="&#xA;Returns true if no test has been skipped.&#xA;Returns bool &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="493" lineend="496" name="noneSkipped" returns="bool" signature="bool noneSkipped()" />
        <scope attributes="public" doc="&#xA;Gets the number of skipped tests.&#xA;Returns int &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="505" lineend="508" name="skippedCount" returns="int" signature="int skippedCount()" />
        <scope attributes="public" doc="&#xA;Returns an Enumeration for the skipped tests.&#xA;Returns array &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="517" lineend="520" name="skipped" returns="array" signature="array skipped()" />
        <scope attributes="public" doc="&#xA;Gets the number of detected errors.&#xA;Returns int &#xA;" ilk="function" line="527" lineend="530" name="errorCount" returns="int" signature="int errorCount()" />
        <scope attributes="public" doc="&#xA;Returns an Enumeration for the errors.&#xA;Returns array &#xA;" ilk="function" line="537" lineend="540" name="errors" returns="array" signature="array errors()" />
        <scope attributes="public" doc="&#xA;Gets the number of detected failures.&#xA;Returns int &#xA;" ilk="function" line="547" lineend="550" name="failureCount" returns="int" signature="int failureCount()" />
        <scope attributes="public" doc="&#xA;Returns an Enumeration for the failures.&#xA;Returns array &#xA;" ilk="function" line="557" lineend="560" name="failures" returns="array" signature="array failures()" />
        <scope attributes="public" doc="&#xA;Gets the number of detected warnings.&#xA;Returns int &#xA;Since Method available since Release 5.1.0&#xA;" ilk="function" line="569" lineend="572" name="warningCount" returns="int" signature="int warningCount()" />
        <scope attributes="public" doc="&#xA;Returns an Enumeration for the warnings.&#xA;Returns array &#xA;Since Method available since Release 5.1.0&#xA;" ilk="function" line="581" lineend="584" name="warnings" returns="array" signature="array warnings()" />
        <scope attributes="public" doc="&#xA;Returns the names of the tests that have passed.&#xA;Returns array &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="593" lineend="596" name="passed" returns="array" signature="array passed()" />
        <scope attributes="public" doc="&#xA;Returns the (top) test suite.&#xA;Returns phpunit_framework_testsuite &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="605" lineend="608" name="topTestSuite" returns="PHPUnit_Framework_TestSuite" signature="phpunit_framework_testsuite topTestSuite()" />
        <scope attributes="public" doc="&#xA;Returns whether code coverage information should be collected.&#xA;Returns bool  - If code coverage should be collected&#xA;Since Method available since Release 3.2.0&#xA;" ilk="function" line="617" lineend="620" name="getCollectCodeCoverageInformation" returns="bool" signature="bool getCollectCodeCoverageInformation()" />
        <scope attributes="public" doc="&#xA;Runs a TestCase.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="627" lineend="891" name="run" signature="run(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;Gets the number of run tests.&#xA;Returns int &#xA;" ilk="function" line="898" lineend="901" name="count" returns="int" signature="int count()" />
        <scope attributes="public" doc="&#xA;Checks whether the test run should stop.&#xA;Returns bool &#xA;" ilk="function" line="908" lineend="911" name="shouldStop" returns="bool" signature="bool shouldStop()" />
        <scope attributes="public" doc="&#xA;Marks that the test run should stop.&#xA;" ilk="function" line="916" lineend="919" name="stop" signature="stop()" />
        <scope attributes="public" doc="&#xA;Returns the code coverage object.&#xA;Returns codecoverage &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="928" lineend="931" name="getCodeCoverage" returns="CodeCoverage" signature="codecoverage getCodeCoverage()" />
        <scope attributes="public" doc="&#xA;Sets the code coverage object.&#xA;&lt;codecoverage&gt; $codeCoverage  - &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="940" lineend="943" name="setCodeCoverage" signature="setCodeCoverage(CodeCoverage $codeCoverage)" />
        <scope attributes="public" doc="&#xA;Enables or disables the error-to-exception conversion.&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.2.14&#xA;" ilk="function" line="954" lineend="961" name="convertErrorsToExceptions" signature="convertErrorsToExceptions(bool $flag)" />
        <scope attributes="public" doc="&#xA;Returns the error-to-exception conversion setting.&#xA;Returns bool &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="970" lineend="973" name="getConvertErrorsToExceptions" returns="bool" signature="bool getConvertErrorsToExceptions()" />
        <scope attributes="public" doc="&#xA;Enables or disables the stopping when an error occurs.&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="984" lineend="991" name="stopOnError" signature="stopOnError(bool $flag)" />
        <scope attributes="public" doc="&#xA;Enables or disables the stopping when a failure occurs.&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1002" lineend="1009" name="stopOnFailure" signature="stopOnFailure(bool $flag)" />
        <scope attributes="public" doc="&#xA;Enables or disables the stopping when a warning occurs.&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 5.1.0&#xA;" ilk="function" line="1020" lineend="1027" name="stopOnWarning" signature="stopOnWarning(bool $flag)" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="1036" lineend="1043" name="beStrictAboutTestsThatDoNotTestAnything" signature="beStrictAboutTestsThatDoNotTestAnything(bool $flag)" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="1050" lineend="1053" name="isStrictAboutTestsThatDoNotTestAnything" returns="bool" signature="bool isStrictAboutTestsThatDoNotTestAnything()" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="1062" lineend="1069" name="beStrictAboutOutputDuringTests" signature="beStrictAboutOutputDuringTests(bool $flag)" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="1076" lineend="1079" name="isStrictAboutOutputDuringTests" returns="bool" signature="bool isStrictAboutOutputDuringTests()" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 5.0.0&#xA;" ilk="function" line="1088" lineend="1095" name="beStrictAboutResourceUsageDuringSmallTests" signature="beStrictAboutResourceUsageDuringSmallTests(bool $flag)" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 5.0.0&#xA;" ilk="function" line="1102" lineend="1105" name="isStrictAboutResourceUsageDuringSmallTests" returns="bool" signature="bool isStrictAboutResourceUsageDuringSmallTests()" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 5.0.0&#xA;" ilk="function" line="1114" lineend="1121" name="enforceTimeLimit" signature="enforceTimeLimit(bool $flag)" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 5.0.0&#xA;" ilk="function" line="1128" lineend="1131" name="enforcesTimeLimit" returns="bool" signature="bool enforcesTimeLimit()" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 4.2.0&#xA;" ilk="function" line="1140" lineend="1147" name="beStrictAboutTodoAnnotatedTests" signature="beStrictAboutTodoAnnotatedTests(bool $flag)" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;Since Method available since Release 4.2.0&#xA;" ilk="function" line="1154" lineend="1157" name="isStrictAboutTodoAnnotatedTests" returns="bool" signature="bool isStrictAboutTodoAnnotatedTests()" />
        <scope attributes="public" doc="&#xA;Enables or disables the stopping for risky tests.&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="1168" lineend="1175" name="stopOnRisky" signature="stopOnRisky(bool $flag)" />
        <scope attributes="public" doc="&#xA;Enables or disables the stopping for incomplete tests.&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1186" lineend="1193" name="stopOnIncomplete" signature="stopOnIncomplete(bool $flag)" />
        <scope attributes="public" doc="&#xA;Enables or disables the stopping for skipped tests.&#xA;&lt;bool&gt; $flag  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1204" lineend="1211" name="stopOnSkipped" signature="stopOnSkipped(bool $flag)" />
        <scope attributes="public" doc="&#xA;Returns the time spent running the tests.&#xA;Returns float &#xA;" ilk="function" line="1218" lineend="1221" name="time" returns="float" signature="float time()" />
        <scope attributes="public" doc="&#xA;Returns whether the entire test was successful or not.&#xA;Returns bool &#xA;" ilk="function" line="1228" lineend="1231" name="wasSuccessful" returns="bool" signature="bool wasSuccessful()" />
        <scope attributes="public" doc="&#xA;Sets the timeout for small tests.&#xA;&lt;int&gt; $timeout  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="1242" lineend="1249" name="setTimeoutForSmallTests" signature="setTimeoutForSmallTests(int $timeout)" />
        <scope attributes="public" doc="&#xA;Sets the timeout for medium tests.&#xA;&lt;int&gt; $timeout  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="1260" lineend="1267" name="setTimeoutForMediumTests" signature="setTimeoutForMediumTests(int $timeout)" />
        <scope attributes="public" doc="&#xA;Sets the timeout for large tests.&#xA;&lt;int&gt; $timeout  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="1278" lineend="1285" name="setTimeoutForLargeTests" signature="setTimeoutForLargeTests(int $timeout)" />
        <scope attributes="public" doc="&#xA;Returns the set timeout for large tests.&#xA;Returns int &#xA;" ilk="function" line="1292" lineend="1295" name="getTimeoutForLargeTests" returns="int" signature="int getTimeoutForLargeTests()" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $flag  - &#xA;Since Method available since Release 5.4.0&#xA;" ilk="function" line="1302" lineend="1309" name="setRegisterMockObjectsFromTestArgumentsRecursively" signature="setRegisterMockObjectsFromTestArgumentsRecursively(bool $flag)" />
        <scope attributes="protected" doc="&#xA;Returns the class hierarchy for a given class.&#xA;&lt;string&gt; $className  - &#xA;&lt;bool&gt; $asReflectionObjects  - &#xA;Returns array &#xA;" ilk="function" line="1319" lineend="1352" name="getHierarchy" returns="array" signature="array getHierarchy(string $className, bool $asReflectionObjects = false)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="TestSuite.php">
    <scope ilk="blob" lang="PHP" name="TestSuite.php" src="phpunit-5.5.0/src/Framework/TestSuite.php">
      <scope doc="A TestSuite is a composite of Tests. It runs a collection of test cases.&#xA;&#xA;Here is an example using the dynamic test definition.&#xA;&#xA;&lt;code&gt;&#xA;&lt;?php&#xA;$suite = new PHPUnit_Framework_TestSuite;&#xA;$suite-&gt;addTest(new MathTest(&apos;testPass&apos;));&#xA;?&gt;&#xA;&lt;/code&gt;&#xA;&#xA;Alternatively, a TestSuite can extract the tests to be run automatically.&#xA;To do so you pass a ReflectionClass instance for your&#xA;PHPUnit_Framework_TestCase class to the PHPUnit_Framework_TestSuite&#xA;constructor.&#xA;&#xA;&lt;code&gt;&#xA;&lt;?php&#xA;$suite = new PHPUnit_Framework_TestSuite(&#xA;  new ReflectionClass(&apos;MathTest&apos;)&#xA;);&#xA;?&gt;&#xA;&lt;/code&gt;&#xA;&#xA;This constructor creates a suite with all the methods starting with&#xA;&quot;test&quot; that take no arguments.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" interfacerefs="PHPUnit_Framework_Test PHPUnit_Framework_SelfDescribing IteratorAggregate" line="41" lineend="1042" name="PHPUnit_Framework_TestSuite">
        <variable attributes="private" citdl="int" doc="Last count of tests in this suite.&#xA;&#xA;@var int|null" line="48" name="cachedNumTests" />
        <variable attributes="protected" citdl="bool" doc="Enable or disable the backup and restoration of the $GLOBALS array.&#xA;&#xA;@var bool" line="55" name="backupGlobals" />
        <variable attributes="protected" citdl="bool" doc="Enable or disable the backup and restoration of static attributes.&#xA;&#xA;@var bool" line="62" name="backupStaticAttributes" />
        <variable attributes="private" citdl="bool" doc="@var bool" line="67" name="beStrictAboutChangesToGlobalState" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="72" name="runTestInSeparateProcess" />
        <variable attributes="protected" citdl="string" doc="The name of the test suite.&#xA;&#xA;@var string" line="79" name="name" />
        <variable attributes="protected" citdl="array" doc="The test groups of the test suite.&#xA;&#xA;@var array" line="86" name="groups" />
        <variable attributes="protected" citdl="array" doc="The tests in the test suite.&#xA;&#xA;@var array" line="93" name="tests" />
        <variable attributes="protected" citdl="int" doc="The number of tests in the test suite.&#xA;&#xA;@var int" line="100" name="numTests" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="105" name="testCase" />
        <variable attributes="protected" citdl="array" doc="@var array" line="110" name="foundClasses" />
        <variable attributes="private" citdl="PHPUnit_Runner_Filter_Factory" doc="@var PHPUnit_Runner_Filter_Factory" line="115" name="iteratorFilter" />
        <scope attributes="public __ctor__" doc="&#xA;Constructs a new TestSuite:&#xA;  - PHPUnit_Framework_TestSuite() constructs an empty TestSuite.&#xA;  - PHPUnit_Framework_TestSuite(ReflectionClass) constructs a&#xA;    TestSuite from the given class.&#xA;  - PHPUnit_Framework_TestSuite(ReflectionClass, String)&#xA;    constructs a TestSuite from the given class with the given&#xA;    name.&#xA;  - PHPUnit_Framework_TestSuite(String) either constructs a&#xA;    TestSuite from the given class (if the passed string is the&#xA;    name of an existing class) or constructs an empty TestSuite&#xA;    with the given name.&#xA;&lt;mixed&gt; $theClass  - &#xA;&lt;string&gt; $name  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="139" lineend="210" name="__construct" signature="__construct(mixed $theClass = &apos;&apos;, string $name = &apos;&apos;)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the test suite.&#xA;Returns string &#xA;" ilk="function" line="217" lineend="220" name="toString" returns="string" signature="string toString()" />
        <scope attributes="public" doc="&#xA;Adds a test to the suite.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;array&gt; $groups  - &#xA;" ilk="function" line="228" lineend="257" name="addTest" signature="addTest(PHPUnit_Framework_Test $test, array $groups = [])" />
        <scope attributes="public" doc="&#xA;Adds the tests from the given class to the suite.&#xA;&lt;mixed&gt; $testClass  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="266" lineend="306" name="addTestSuite" signature="addTestSuite(mixed $testClass)" />
        <scope attributes="public" doc="&#xA;Wraps both &lt;code&gt;addTest()&lt;/code&gt; and &lt;code&gt;addTestSuite&lt;/code&gt;&#xA;as well as the separate import statements for the user&apos;s convenience.&#xA;If the named file cannot be read or there are no new tests that can be&#xA;added, a &lt;code&gt;PHPUnit_Framework_WarningTestCase&lt;/code&gt; will be created instead,&#xA;leaving the current test run untouched.&#xA;&lt;string&gt; $filename  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 2.3.0&#xA;" ilk="function" line="322" lineend="391" name="addTestFile" signature="addTestFile(string $filename)" />
        <scope attributes="public" doc="&#xA;Wrapper for addTestFile() that adds multiple test files.&#xA;&lt;array|iterator&gt; $filenames  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 2.3.0&#xA;" ilk="function" line="402" lineend="415" name="addTestFiles" signature="addTestFiles($filenames)" />
        <scope attributes="public" doc="&#xA;Counts the number of test cases that will be run by this test.&#xA;&lt;bool&gt; $preferCache  - Indicates if cache is preferred.&#xA;Returns int &#xA;" ilk="function" line="424" lineend="439" name="count" returns="int" signature="int count(bool $preferCache = false)" />
        <scope attributes="public static" doc="&#xA;&lt;reflectionclass&gt; $theClass  - &#xA;&lt;string&gt; $name  - &#xA;Returns phpunit_framework_test &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="449" lineend="620" name="createTest" returns="PHPUnit_Framework_Test" signature="phpunit_framework_test createTest(ReflectionClass $theClass, string $name)" />
        <scope attributes="protected" doc="&#xA;Creates a default TestResult object.&#xA;Returns phpunit_framework_testresult &#xA;" ilk="function" line="627" lineend="630" name="createResult" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult createResult()" />
        <scope attributes="public" doc="&#xA;Returns the name of the suite.&#xA;Returns string &#xA;" ilk="function" line="637" lineend="640" name="getName" returns="string" signature="string getName()" />
        <scope attributes="public" doc="&#xA;Returns the test groups of the suite.&#xA;Returns array &#xA;Since Method available since Release 3.2.0&#xA;" ilk="function" line="649" lineend="652" name="getGroups" returns="array" signature="array getGroups()" />
        <scope attributes="public" ilk="function" line="654" lineend="657" name="getGroupDetails" returns="this.groups" signature="getGroupDetails()" />
        <scope attributes="public" doc="&#xA;Set tests groups of the test case&#xA;&lt;array&gt; $groups  - &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="666" lineend="669" name="setGroupDetails" signature="setGroupDetails(array $groups)" />
        <scope attributes="public" doc="&#xA;Runs the tests and collects their result in a TestResult.&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;Returns phpunit_framework_testresult &#xA;" ilk="function" line="678" lineend="767" name="run" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult run(PHPUnit_Framework_TestResult $result=null)" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $runTestInSeparateProcess  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.7.0&#xA;" ilk="function" line="776" lineend="783" name="setRunTestInSeparateProcess" signature="setRunTestInSeparateProcess(bool $runTestInSeparateProcess)" />
        <scope attributes="public" doc="&#xA;Runs a test.&#xA;Deprecated&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;" ilk="function" line="793" lineend="796" name="runTest" signature="runTest(PHPUnit_Framework_Test $test, PHPUnit_Framework_TestResult $result)" />
        <scope attributes="public" doc="Sets the name of the suite.&#xA;&#xA;@param  string" ilk="function" line="803" lineend="806" name="setName" signature="setName($name)" />
        <scope attributes="public" doc="Returns the test at the given index.&#xA;&#xA;@param  int|false&#xA;&#xA;@return PHPUnit_Framework_Test" ilk="function" line="815" lineend="822" name="testAt" returns="PHPUnit_Framework_Test" signature="phpunit_framework_test testAt($index)" />
        <scope attributes="public" doc="&#xA;Returns the tests as an enumeration.&#xA;Returns array &#xA;" ilk="function" line="829" lineend="832" name="tests" returns="array" signature="array tests()" />
        <scope attributes="public" doc="&#xA;Set tests of the test suite&#xA;&lt;array&gt; $tests  - &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="841" lineend="844" name="setTests" signature="setTests(array $tests)" />
        <scope attributes="public" doc="&#xA;Mark the test suite as skipped.&#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_SkippedTestSuiteError&#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="855" lineend="858" name="markTestSuiteSkipped" signature="markTestSuiteSkipped(string $message = &apos;&apos;)" />
        <scope attributes="protected" doc="&#xA;&lt;reflectionclass&gt; $class  - &#xA;&lt;reflectionmethod&gt; $method  - &#xA;" ilk="function" line="864" lineend="899" name="addTestMethod" signature="addTestMethod(ReflectionClass $class, ReflectionMethod $method)" />
        <scope attributes="public static" doc="&#xA;&lt;reflectionmethod&gt; $method  - &#xA;Returns bool &#xA;" ilk="function" line="906" lineend="918" name="isTestMethod" returns="bool" signature="bool isTestMethod(ReflectionMethod $method)" />
        <scope attributes="protected static" doc="&#xA;&lt;string&gt; $message  - &#xA;Returns phpunit_framework_warningtestcase &#xA;" ilk="function" line="925" lineend="928" name="warning" returns="PHPUnit_Framework_WarningTestCase" signature="phpunit_framework_warningtestcase warning(string $message)" />
        <scope attributes="protected static" doc="&#xA;&lt;string&gt; $class  - &#xA;&lt;string&gt; $methodName  - &#xA;&lt;string&gt; $message  - &#xA;Returns phpunit_framework_skippedtestcase &#xA;Since Method available since Release 4.3.0&#xA;" ilk="function" line="939" lineend="942" name="skipTest" returns="PHPUnit_Framework_SkippedTestCase" signature="phpunit_framework_skippedtestcase skipTest(string $class, string $methodName, string $message)" />
        <scope attributes="protected static" doc="&#xA;&lt;string&gt; $class  - &#xA;&lt;string&gt; $methodName  - &#xA;&lt;string&gt; $message  - &#xA;Returns phpunit_framework_incompletetestcase &#xA;Since Method available since Release 4.3.0&#xA;" ilk="function" line="953" lineend="956" name="incompleteTest" returns="PHPUnit_Framework_IncompleteTestCase" signature="phpunit_framework_incompletetestcase incompleteTest(string $class, string $methodName, string $message)" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $beStrictAboutChangesToGlobalState  - &#xA;Since Method available since Release 4.6.0&#xA;" ilk="function" line="963" lineend="968" name="setbeStrictAboutChangesToGlobalState" signature="setbeStrictAboutChangesToGlobalState(bool $beStrictAboutChangesToGlobalState)" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $backupGlobals  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="975" lineend="980" name="setBackupGlobals" signature="setBackupGlobals(bool $backupGlobals)" />
        <scope attributes="public" doc="&#xA;&lt;bool&gt; $backupStaticAttributes  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="987" lineend="993" name="setBackupStaticAttributes" signature="setBackupStaticAttributes(bool $backupStaticAttributes)" />
        <scope attributes="public" doc="&#xA;Returns an iterator for this test suite.&#xA;Returns recursiveiteratoriterator &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1002" lineend="1011" name="getIterator" returns="RecursiveIteratorIterator" signature="recursiveiteratoriterator getIterator()" />
        <scope attributes="public" ilk="function" line="1013" lineend="1021" name="injectFilter" signature="injectFilter(PHPUnit_Runner_Filter_Factory $filter)" />
        <scope attributes="protected" doc="&#xA;Template Method that is called before the tests&#xA;of this test suite are run.&#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1029" lineend="1031" name="setUp" signature="setUp()" />
        <scope attributes="protected" doc="&#xA;Template Method that is called after the tests&#xA;of this test suite have finished running.&#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1039" lineend="1041" name="tearDown" signature="tearDown()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="UnintentionallyCoveredCodeError.php">
    <scope ilk="blob" lang="PHP" name="UnintentionallyCoveredCodeError.php" src="phpunit-5.5.0/src/Framework/UnintentionallyCoveredCodeError.php">
      <scope classrefs="PHPUnit_Framework_RiskyTestError" doc="Extension to PHPUnit_Framework_AssertionFailedError to mark the special&#xA;case of a test that unintentionally covers code.&#xA;&#xA;@since Class available since Release 4.0.0" ilk="class" line="17" lineend="19" name="PHPUnit_Framework_UnintentionallyCoveredCodeError" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="Warning.php">
    <scope ilk="blob" lang="PHP" name="Warning.php" src="phpunit-5.5.0/src/Framework/Warning.php">
      <scope classrefs="PHPUnit_Framework_Exception" doc="Thrown when an there is a warning.&#xA;&#xA;@since Class available since Release 5.0.0" ilk="class" interfacerefs="PHPUnit_Framework_SelfDescribing" line="16" lineend="27" name="PHPUnit_Framework_Warning">
        <scope attributes="public" doc="&#xA;Wrapper for getMessage() which is declared as final.&#xA;Returns string &#xA;" ilk="function" line="23" lineend="26" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="WarningTestCase.php">
    <scope ilk="blob" lang="PHP" name="WarningTestCase.php" src="phpunit-5.5.0/src/Framework/WarningTestCase.php">
      <scope classrefs="PHPUnit_Framework_TestCase" doc="A warning.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" line="16" lineend="81" name="PHPUnit_Framework_WarningTestCase">
        <variable attributes="protected" citdl="string" doc="@var string" line="21" name="message" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="26" name="backupGlobals" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="31" name="backupStaticAttributes" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="36" name="runTestInSeparateProcess" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="41" name="useErrorHandler" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="46" lineend="50" name="__construct" signature="__construct(string $message = &apos;&apos;)" />
        <scope attributes="protected" doc="&#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="55" lineend="58" name="runTest" signature="runTest()" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="65" lineend="68" name="getMessage" returns="string" signature="string getMessage()" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the test case.&#xA;Returns string &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="77" lineend="80" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="Deprecated.php">
    <scope ilk="blob" lang="PHP" name="Deprecated.php" src="phpunit-5.5.0/src/Framework/Error/Deprecated.php">
      <scope classrefs="PHPUnit_Framework_Error" doc="Wrapper for PHP deprecated errors.&#xA;You can disable deprecated-to-exception conversion by setting&#xA;&#xA;&lt;code&gt;&#xA;PHPUnit_Framework_Error_Deprecated::$enabled = false;&#xA;&lt;/code&gt;&#xA;&#xA;@since Class available since Release 3.3.0" ilk="class" line="21" lineend="24" name="PHPUnit_Framework_Error_Deprecated">
        <variable attributes="public static" citdl="boolean" line="23" name="enabled" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="Notice.php">
    <scope ilk="blob" lang="PHP" name="Notice.php" src="phpunit-5.5.0/src/Framework/Error/Notice.php">
      <scope classrefs="PHPUnit_Framework_Error" doc="Wrapper for PHP notices.&#xA;You can disable notice-to-exception conversion by setting&#xA;&#xA;&lt;code&gt;&#xA;PHPUnit_Framework_Error_Notice::$enabled = false;&#xA;&lt;/code&gt;&#xA;&#xA;@since Class available since Release 3.3.0" ilk="class" line="21" lineend="24" name="PHPUnit_Framework_Error_Notice">
        <variable attributes="public static" citdl="boolean" line="23" name="enabled" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="Warning.php">
    <scope ilk="blob" lang="PHP" name="Warning.php" src="phpunit-5.5.0/src/Framework/Error/Warning.php">
      <scope classrefs="PHPUnit_Framework_Error" doc="Wrapper for PHP warnings.&#xA;You can disable notice-to-exception conversion by setting&#xA;&#xA;&lt;code&gt;&#xA;PHPUnit_Framework_Error_Warning::$enabled = false;&#xA;&lt;/code&gt;&#xA;&#xA;@since Class available since Release 3.3.0" ilk="class" line="21" lineend="24" name="PHPUnit_Framework_Error_Warning">
        <variable attributes="public static" citdl="boolean" line="23" name="enabled" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="DataProvider.php">
    <scope ilk="blob" lang="PHP" name="DataProvider.php" src="phpunit-5.5.0/src/Framework/TestSuite/DataProvider.php">
      <scope classrefs="PHPUnit_Framework_TestSuite" doc="@since Class available since Release 3.4.0" ilk="class" line="14" lineend="27" name="PHPUnit_Framework_TestSuite_DataProvider">
        <scope attributes="public" doc="&#xA;Sets the dependencies of a TestCase.&#xA;&lt;array&gt; $dependencies  - &#xA;" ilk="function" line="21" lineend="26" name="setDependencies" signature="setDependencies(array $dependencies)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="Functions.php">
    <scope ilk="blob" lang="PHP" name="Functions.php" src="phpunit-5.5.0/src/Framework/Assert/Functions.php">
      <scope doc="&#xA;Returns a matcher that matches when the method is executed&#xA;zero or more times.&#xA;Returns phpunit_framework_mockobject_matcher_anyinvokedcount &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="19" lineend="25" name="any" returns="PHPUnit_Framework_MockObject_Matcher_AnyInvokedCount" signature="phpunit_framework_mockobject_matcher_anyinvokedcount any()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsAnything matcher object.&#xA;Returns phpunit_framework_constraint_isanything &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="34" lineend="40" name="anything" returns="PHPUnit_Framework_Constraint_IsAnything" signature="phpunit_framework_constraint_isanything anything()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_ArrayHasKey matcher object.&#xA;&lt;mixed&gt; $key  - &#xA;Returns phpunit_framework_constraint_arrayhaskey &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="51" lineend="57" name="arrayHasKey" returns="PHPUnit_Framework_Constraint_ArrayHasKey" signature="phpunit_framework_constraint_arrayhaskey arrayHasKey(mixed $key)" />
      <scope doc="&#xA;Asserts that an array has a specified key.&#xA;&lt;mixed&gt; $key  - &#xA;&lt;array|arrayaccess&gt; $array  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="68" lineend="74" name="assertArrayHasKey" returns="call_user_func_array()" signature="assertArrayHasKey(mixed $key, $array, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that an array has a specified subset.&#xA;&lt;array|arrayaccess&gt; $subset  - &#xA;&lt;array|arrayaccess&gt; $array  - &#xA;&lt;bool&gt; $strict  - Check for object identity&#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 4.4.0&#xA;" ilk="function" line="86" lineend="92" name="assertArraySubset" returns="call_user_func_array()" signature="assertArraySubset($subset, $array, bool $strict = false, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that an array does not have a specified key.&#xA;&lt;mixed&gt; $key  - &#xA;&lt;array|arrayaccess&gt; $array  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="103" lineend="109" name="assertArrayNotHasKey" returns="call_user_func_array()" signature="assertArrayNotHasKey(mixed $key, $array, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a haystack that is stored in a static attribute of a class&#xA;or an attribute of an object contains a needle.&#xA;&lt;mixed&gt; $needle  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;mixed&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;&lt;bool&gt; $checkForObjectIdentity  - &#xA;&lt;bool&gt; $checkForNonObjectIdentity  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="125" lineend="131" name="assertAttributeContains" returns="call_user_func_array()" signature="assertAttributeContains(mixed $needle, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = &apos;&apos;, bool $ignoreCase = false, bool $checkForObjectIdentity = true, bool $checkForNonObjectIdentity = false)" />
      <scope doc="&#xA;Asserts that a haystack that is stored in a static attribute of a class&#xA;or an attribute of an object contains only values of a given type.&#xA;&lt;string&gt; $type  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;mixed&gt; $haystackClassOrObject  - &#xA;&lt;bool&gt; $isNativeType  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.4&#xA;" ilk="function" line="145" lineend="151" name="assertAttributeContainsOnly" returns="call_user_func_array()" signature="assertAttributeContainsOnly(string $type, string $haystackAttributeName, mixed $haystackClassOrObject, bool $isNativeType = null, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts the number of elements of an array, Countable or Traversable&#xA;that is stored in an attribute.&#xA;&lt;int&gt; $expectedCount  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;mixed&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="164" lineend="170" name="assertAttributeCount" returns="call_user_func_array()" signature="assertAttributeCount(int $expectedCount, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a static attribute of a class or an attribute of an object&#xA;is empty.&#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;mixed&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="182" lineend="188" name="assertAttributeEmpty" returns="call_user_func_array()" signature="assertAttributeEmpty(string $haystackAttributeName, mixed $haystackClassOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is equal to an attribute of an object.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;" ilk="function" line="202" lineend="208" name="assertAttributeEquals" returns="call_user_func_array()" signature="assertAttributeEquals(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = &apos;&apos;, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
      <scope doc="&#xA;Asserts that an attribute is greater than another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="220" lineend="226" name="assertAttributeGreaterThan" returns="call_user_func_array()" signature="assertAttributeGreaterThan(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that an attribute is greater than or equal to another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="238" lineend="244" name="assertAttributeGreaterThanOrEqual" returns="call_user_func_array()" signature="assertAttributeGreaterThanOrEqual(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that an attribute is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $attributeName  - &#xA;&lt;mixed&gt; $classOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="256" lineend="262" name="assertAttributeInstanceOf" returns="call_user_func_array()" signature="assertAttributeInstanceOf(string $expected, string $attributeName, mixed $classOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that an attribute is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $attributeName  - &#xA;&lt;mixed&gt; $classOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="274" lineend="280" name="assertAttributeInternalType" returns="call_user_func_array()" signature="assertAttributeInternalType(string $expected, string $attributeName, mixed $classOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that an attribute is smaller than another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="292" lineend="298" name="assertAttributeLessThan" returns="call_user_func_array()" signature="assertAttributeLessThan(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that an attribute is smaller than or equal to another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="310" lineend="316" name="assertAttributeLessThanOrEqual" returns="call_user_func_array()" signature="assertAttributeLessThanOrEqual(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a haystack that is stored in a static attribute of a class&#xA;or an attribute of an object does not contain a needle.&#xA;&lt;mixed&gt; $needle  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;mixed&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;&lt;bool&gt; $checkForObjectIdentity  - &#xA;&lt;bool&gt; $checkForNonObjectIdentity  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="332" lineend="338" name="assertAttributeNotContains" returns="call_user_func_array()" signature="assertAttributeNotContains(mixed $needle, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = &apos;&apos;, bool $ignoreCase = false, bool $checkForObjectIdentity = true, bool $checkForNonObjectIdentity = false)" />
      <scope doc="&#xA;Asserts that a haystack that is stored in a static attribute of a class&#xA;or an attribute of an object does not contain only values of a given&#xA;type.&#xA;&lt;string&gt; $type  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;mixed&gt; $haystackClassOrObject  - &#xA;&lt;bool&gt; $isNativeType  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.4&#xA;" ilk="function" line="353" lineend="359" name="assertAttributeNotContainsOnly" returns="call_user_func_array()" signature="assertAttributeNotContainsOnly(string $type, string $haystackAttributeName, mixed $haystackClassOrObject, bool $isNativeType = null, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts the number of elements of an array, Countable or Traversable&#xA;that is stored in an attribute.&#xA;&lt;int&gt; $expectedCount  - &#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;mixed&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="372" lineend="378" name="assertAttributeNotCount" returns="call_user_func_array()" signature="assertAttributeNotCount(int $expectedCount, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a static attribute of a class or an attribute of an object&#xA;is not empty.&#xA;&lt;string&gt; $haystackAttributeName  - &#xA;&lt;mixed&gt; $haystackClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="390" lineend="396" name="assertAttributeNotEmpty" returns="call_user_func_array()" signature="assertAttributeNotEmpty(string $haystackAttributeName, mixed $haystackClassOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is not equal to an attribute of an object.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;string&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;" ilk="function" line="410" lineend="416" name="assertAttributeNotEquals" returns="call_user_func_array()" signature="assertAttributeNotEquals(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = &apos;&apos;, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
      <scope doc="&#xA;Asserts that an attribute is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $attributeName  - &#xA;&lt;mixed&gt; $classOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="428" lineend="434" name="assertAttributeNotInstanceOf" returns="call_user_func_array()" signature="assertAttributeNotInstanceOf(string $expected, string $attributeName, mixed $classOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that an attribute is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $attributeName  - &#xA;&lt;mixed&gt; $classOrObject  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="446" lineend="452" name="assertAttributeNotInternalType" returns="call_user_func_array()" signature="assertAttributeNotInternalType(string $expected, string $attributeName, mixed $classOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable and an attribute of an object do not have the&#xA;same type and value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;object&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="463" lineend="469" name="assertAttributeNotSame" returns="call_user_func_array()" signature="assertAttributeNotSame(mixed $expected, string $actualAttributeName, object $actualClassOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable and an attribute of an object have the same type&#xA;and value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;string&gt; $actualAttributeName  - &#xA;&lt;object&gt; $actualClassOrObject  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="480" lineend="486" name="assertAttributeSame" returns="call_user_func_array()" signature="assertAttributeSame(mixed $expected, string $actualAttributeName, object $actualClassOrObject, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a class has a specified attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="497" lineend="503" name="assertClassHasAttribute" returns="call_user_func_array()" signature="assertClassHasAttribute(string $attributeName, string $className, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a class has a specified static attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="514" lineend="520" name="assertClassHasStaticAttribute" returns="call_user_func_array()" signature="assertClassHasStaticAttribute(string $attributeName, string $className, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a class does not have a specified attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="531" lineend="537" name="assertClassNotHasAttribute" returns="call_user_func_array()" signature="assertClassNotHasAttribute(string $attributeName, string $className, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a class does not have a specified static attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="548" lineend="554" name="assertClassNotHasStaticAttribute" returns="call_user_func_array()" signature="assertClassNotHasStaticAttribute(string $attributeName, string $className, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a haystack contains a needle.&#xA;&lt;mixed&gt; $needle  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;&lt;bool&gt; $checkForObjectIdentity  - &#xA;&lt;bool&gt; $checkForNonObjectIdentity  - &#xA;Since Method available since Release 2.1.0&#xA;" ilk="function" line="568" lineend="574" name="assertContains" returns="call_user_func_array()" signature="assertContains(mixed $needle, mixed $haystack, string $message = &apos;&apos;, bool $ignoreCase = false, bool $checkForObjectIdentity = true, bool $checkForNonObjectIdentity = false)" />
      <scope doc="&#xA;Asserts that a haystack contains only values of a given type.&#xA;&lt;string&gt; $type  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;bool&gt; $isNativeType  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.4&#xA;" ilk="function" line="586" lineend="592" name="assertContainsOnly" returns="call_user_func_array()" signature="assertContainsOnly(string $type, mixed $haystack, bool $isNativeType = null, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a haystack contains only instances of a given classname&#xA;&lt;string&gt; $classname  - &#xA;&lt;array|traversable&gt; $haystack  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="601" lineend="607" name="assertContainsOnlyInstancesOf" returns="call_user_func_array()" signature="assertContainsOnlyInstancesOf(string $classname, $haystack, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts the number of elements of an array, Countable or Traversable.&#xA;&lt;int&gt; $expectedCount  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="616" lineend="622" name="assertCount" returns="call_user_func_array()" signature="assertCount(int $expectedCount, mixed $haystack, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is empty.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="632" lineend="638" name="assertEmpty" returns="call_user_func_array()" signature="assertEmpty(mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a hierarchy of DOMElements matches.&#xA;&lt;domelement&gt; $expectedElement  - &#xA;&lt;domelement&gt; $actualElement  - &#xA;&lt;bool&gt; $checkAttributes  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="650" lineend="656" name="assertEqualXMLStructure" returns="call_user_func_array()" signature="assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement, bool $checkAttributes = false, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two variables are equal.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;" ilk="function" line="669" lineend="675" name="assertEquals" returns="call_user_func_array()" signature="assertEquals(mixed $expected, mixed $actual, string $message = &apos;&apos;, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
      <scope doc="&#xA;Asserts that a condition is not true.&#xA;&lt;bool&gt; $condition  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="685" lineend="691" name="assertNotTrue" returns="call_user_func_array()" signature="assertNotTrue(bool $condition, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a condition is false.&#xA;&lt;bool&gt; $condition  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="701" lineend="707" name="assertFalse" returns="call_user_func_array()" signature="assertFalse(bool $condition, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that the contents of one file is equal to the contents of another&#xA;file.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Since Method available since Release 3.2.14&#xA;" ilk="function" line="721" lineend="727" name="assertFileEquals" returns="call_user_func_array()" signature="assertFileEquals(string $expected, string $actual, string $message = &apos;&apos;, bool $canonicalize = false, bool $ignoreCase = false)" />
      <scope doc="&#xA;Asserts that a file exists.&#xA;&lt;string&gt; $filename  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="737" lineend="743" name="assertFileExists" returns="call_user_func_array()" signature="assertFileExists(string $filename, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that the contents of one file is not equal to the contents of&#xA;another file.&#xA;&lt;string&gt; $expected  - &#xA;&lt;string&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Since Method available since Release 3.2.14&#xA;" ilk="function" line="757" lineend="763" name="assertFileNotEquals" returns="call_user_func_array()" signature="assertFileNotEquals(string $expected, string $actual, string $message = &apos;&apos;, bool $canonicalize = false, bool $ignoreCase = false)" />
      <scope doc="&#xA;Asserts that a file does not exist.&#xA;&lt;string&gt; $filename  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="773" lineend="779" name="assertFileNotExists" returns="call_user_func_array()" signature="assertFileNotExists(string $filename, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a value is greater than another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="790" lineend="796" name="assertGreaterThan" returns="call_user_func_array()" signature="assertGreaterThan(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a value is greater than or equal to another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="807" lineend="813" name="assertGreaterThanOrEqual" returns="call_user_func_array()" signature="assertGreaterThanOrEqual(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="824" lineend="830" name="assertInstanceOf" returns="call_user_func_array()" signature="assertInstanceOf(string $expected, mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="841" lineend="847" name="assertInternalType" returns="call_user_func_array()" signature="assertInternalType(string $expected, mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a string is a valid JSON string.&#xA;&lt;string&gt; $actualJson  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.7.20&#xA;" ilk="function" line="857" lineend="863" name="assertJson" returns="call_user_func_array()" signature="assertJson(string $actualJson, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two JSON files are equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualFile  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="872" lineend="878" name="assertJsonFileEqualsJsonFile" returns="call_user_func_array()" signature="assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two JSON files are not equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualFile  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="887" lineend="893" name="assertJsonFileNotEqualsJsonFile" returns="call_user_func_array()" signature="assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that the generated JSON encoded object and the content of the given file are equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualJson  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="902" lineend="908" name="assertJsonStringEqualsJsonFile" returns="call_user_func_array()" signature="assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two given JSON encoded objects or arrays are equal.&#xA;&lt;string&gt; $expectedJson  - &#xA;&lt;string&gt; $actualJson  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="917" lineend="923" name="assertJsonStringEqualsJsonString" returns="call_user_func_array()" signature="assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that the generated JSON encoded object and the content of the given file are not equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualJson  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="932" lineend="938" name="assertJsonStringNotEqualsJsonFile" returns="call_user_func_array()" signature="assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two given JSON encoded objects or arrays are not equal.&#xA;&lt;string&gt; $expectedJson  - &#xA;&lt;string&gt; $actualJson  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="947" lineend="953" name="assertJsonStringNotEqualsJsonString" returns="call_user_func_array()" signature="assertJsonStringNotEqualsJsonString(string $expectedJson, string $actualJson, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a value is smaller than another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="964" lineend="970" name="assertLessThan" returns="call_user_func_array()" signature="assertLessThan(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a value is smaller than or equal to another value.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="981" lineend="987" name="assertLessThanOrEqual" returns="call_user_func_array()" signature="assertLessThanOrEqual(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is finite.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="995" lineend="1001" name="assertFinite" returns="call_user_func_array()" signature="assertFinite(mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is infinite.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1009" lineend="1015" name="assertInfinite" returns="call_user_func_array()" signature="assertInfinite(mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is nan.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1023" lineend="1029" name="assertNan" returns="call_user_func_array()" signature="assertNan(mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a haystack does not contain a needle.&#xA;&lt;mixed&gt; $needle  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;&lt;bool&gt; $checkForObjectIdentity  - &#xA;&lt;bool&gt; $checkForNonObjectIdentity  - &#xA;Since Method available since Release 2.1.0&#xA;" ilk="function" line="1043" lineend="1049" name="assertNotContains" returns="call_user_func_array()" signature="assertNotContains(mixed $needle, mixed $haystack, string $message = &apos;&apos;, bool $ignoreCase = false, bool $checkForObjectIdentity = true, bool $checkForNonObjectIdentity = false)" />
      <scope doc="&#xA;Asserts that a haystack does not contain only values of a given type.&#xA;&lt;string&gt; $type  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;bool&gt; $isNativeType  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.4&#xA;" ilk="function" line="1061" lineend="1067" name="assertNotContainsOnly" returns="call_user_func_array()" signature="assertNotContainsOnly(string $type, mixed $haystack, bool $isNativeType = null, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts the number of elements of an array, Countable or Traversable.&#xA;&lt;int&gt; $expectedCount  - &#xA;&lt;mixed&gt; $haystack  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1076" lineend="1082" name="assertNotCount" returns="call_user_func_array()" signature="assertNotCount(int $expectedCount, mixed $haystack, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is not empty.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="1092" lineend="1098" name="assertNotEmpty" returns="call_user_func_array()" signature="assertNotEmpty(mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two variables are not equal.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Since Method available since Release 2.3.0&#xA;" ilk="function" line="1113" lineend="1119" name="assertNotEquals" returns="call_user_func_array()" signature="assertNotEquals(mixed $expected, mixed $actual, string $message = &apos;&apos;, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
      <scope doc="&#xA;Asserts that a variable is not of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1130" lineend="1136" name="assertNotInstanceOf" returns="call_user_func_array()" signature="assertNotInstanceOf(string $expected, mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is not of a given type.&#xA;&lt;string&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1147" lineend="1153" name="assertNotInternalType" returns="call_user_func_array()" signature="assertNotInternalType(string $expected, mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a condition is not false.&#xA;&lt;bool&gt; $condition  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="1163" lineend="1169" name="assertNotFalse" returns="call_user_func_array()" signature="assertNotFalse(bool $condition, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is not null.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1177" lineend="1183" name="assertNotNull" returns="call_user_func_array()" signature="assertNotNull(mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a string does not match a given regular expression.&#xA;&lt;string&gt; $pattern  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 2.1.0&#xA;" ilk="function" line="1194" lineend="1200" name="assertNotRegExp" returns="call_user_func_array()" signature="assertNotRegExp(string $pattern, string $string, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two variables do not have the same type and value.&#xA;Used on objects, it asserts that two variables do not reference&#xA;the same object.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1211" lineend="1217" name="assertNotSame" returns="call_user_func_array()" signature="assertNotSame(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Assert that the size of two arrays (or `Countable` or `Traversable` objects)&#xA;is not the same.&#xA;&lt;array|countable|traversable&gt; $expected  - &#xA;&lt;array|countable|traversable&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1227" lineend="1233" name="assertNotSameSize" returns="call_user_func_array()" signature="assertNotSameSize($expected, $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a variable is null.&#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1241" lineend="1247" name="assertNull" returns="call_user_func_array()" signature="assertNull(mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that an object has a specified attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;object&gt; $object  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1258" lineend="1264" name="assertObjectHasAttribute" returns="call_user_func_array()" signature="assertObjectHasAttribute(string $attributeName, object $object, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that an object does not have a specified attribute.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;object&gt; $object  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1275" lineend="1281" name="assertObjectNotHasAttribute" returns="call_user_func_array()" signature="assertObjectNotHasAttribute(string $attributeName, object $object, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a string matches a given regular expression.&#xA;&lt;string&gt; $pattern  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1290" lineend="1296" name="assertRegExp" returns="call_user_func_array()" signature="assertRegExp(string $pattern, string $string, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two variables have the same type and value.&#xA;Used on objects, it asserts that two variables reference&#xA;the same object.&#xA;&lt;mixed&gt; $expected  - &#xA;&lt;mixed&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1307" lineend="1313" name="assertSame" returns="call_user_func_array()" signature="assertSame(mixed $expected, mixed $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Assert that the size of two arrays (or `Countable` or `Traversable` objects)&#xA;is the same.&#xA;&lt;array|countable|traversable&gt; $expected  - &#xA;&lt;array|countable|traversable&gt; $actual  - &#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="1323" lineend="1329" name="assertSameSize" returns="call_user_func_array()" signature="assertSameSize($expected, $actual, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a string ends not with a given prefix.&#xA;&lt;string&gt; $suffix  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1340" lineend="1346" name="assertStringEndsNotWith" returns="call_user_func_array()" signature="assertStringEndsNotWith(string $suffix, string $string, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a string ends with a given prefix.&#xA;&lt;string&gt; $suffix  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1357" lineend="1363" name="assertStringEndsWith" returns="call_user_func_array()" signature="assertStringEndsWith(string $suffix, string $string, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that the contents of a string is equal&#xA;to the contents of a file.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualString  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1377" lineend="1383" name="assertStringEqualsFile" returns="call_user_func_array()" signature="assertStringEqualsFile(string $expectedFile, string $actualString, string $message = &apos;&apos;, bool $canonicalize = false, bool $ignoreCase = false)" />
      <scope doc="&#xA;Asserts that a string matches a given format string.&#xA;&lt;string&gt; $format  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1394" lineend="1400" name="assertStringMatchesFormat" returns="call_user_func_array()" signature="assertStringMatchesFormat(string $format, string $string, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a string matches a given format file.&#xA;&lt;string&gt; $formatFile  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1411" lineend="1417" name="assertStringMatchesFormatFile" returns="call_user_func_array()" signature="assertStringMatchesFormatFile(string $formatFile, string $string, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that the contents of a string is not equal&#xA;to the contents of a file.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualString  - &#xA;&lt;string&gt; $message  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1431" lineend="1437" name="assertStringNotEqualsFile" returns="call_user_func_array()" signature="assertStringNotEqualsFile(string $expectedFile, string $actualString, string $message = &apos;&apos;, bool $canonicalize = false, bool $ignoreCase = false)" />
      <scope doc="&#xA;Asserts that a string does not match a given format string.&#xA;&lt;string&gt; $format  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1448" lineend="1454" name="assertStringNotMatchesFormat" returns="call_user_func_array()" signature="assertStringNotMatchesFormat(string $format, string $string, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a string does not match a given format string.&#xA;&lt;string&gt; $formatFile  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1465" lineend="1471" name="assertStringNotMatchesFormatFile" returns="call_user_func_array()" signature="assertStringNotMatchesFormatFile(string $formatFile, string $string, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a string starts not with a given prefix.&#xA;&lt;string&gt; $prefix  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1482" lineend="1488" name="assertStringStartsNotWith" returns="call_user_func_array()" signature="assertStringStartsNotWith(string $prefix, string $string, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a string starts with a given prefix.&#xA;&lt;string&gt; $prefix  - &#xA;&lt;string&gt; $string  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="1499" lineend="1505" name="assertStringStartsWith" returns="call_user_func_array()" signature="assertStringStartsWith(string $prefix, string $string, string $message = &apos;&apos;)" />
      <scope doc="Evaluates a PHPUnit_Framework_Constraint matcher object.&#xA;&#xA;@param  mixed$value&#xA;@param PHPUnit_Framework_Constraint $constraint&#xA;@param string                       $message&#xA;&#xA;@since Method available since Release 3.0.0" ilk="function" line="1516" lineend="1522" name="assertThat" returns="call_user_func_array()" signature="assertThat($value, PHPUnit_Framework_Constraint $constraint, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that a condition is true.&#xA;&lt;bool&gt; $condition  - &#xA;&lt;string&gt; $message  - &#xA;Throws PHPUnit_Framework_AssertionFailedError&#xA;" ilk="function" line="1532" lineend="1538" name="assertTrue" returns="call_user_func_array()" signature="assertTrue(bool $condition, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two XML files are equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualFile  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1549" lineend="1555" name="assertXmlFileEqualsXmlFile" returns="call_user_func_array()" signature="assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two XML files are not equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualFile  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1566" lineend="1572" name="assertXmlFileNotEqualsXmlFile" returns="call_user_func_array()" signature="assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two XML documents are equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualXml  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1583" lineend="1589" name="assertXmlStringEqualsXmlFile" returns="call_user_func_array()" signature="assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two XML documents are equal.&#xA;&lt;string&gt; $expectedXml  - &#xA;&lt;string&gt; $actualXml  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1600" lineend="1606" name="assertXmlStringEqualsXmlString" returns="call_user_func_array()" signature="assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two XML documents are not equal.&#xA;&lt;string&gt; $expectedFile  - &#xA;&lt;string&gt; $actualXml  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1617" lineend="1623" name="assertXmlStringNotEqualsXmlFile" returns="call_user_func_array()" signature="assertXmlStringNotEqualsXmlFile(string $expectedFile, string $actualXml, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Asserts that two XML documents are not equal.&#xA;&lt;string&gt; $expectedXml  - &#xA;&lt;string&gt; $actualXml  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1634" lineend="1640" name="assertXmlStringNotEqualsXmlString" returns="call_user_func_array()" signature="assertXmlStringNotEqualsXmlString(string $expectedXml, string $actualXml, string $message = &apos;&apos;)" />
      <scope doc="&#xA;Returns a matcher that matches when the method is executed&#xA;at the given $index.&#xA;&lt;int&gt; $index  - &#xA;Returns phpunit_framework_mockobject_matcher_invokedatindex &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1652" lineend="1658" name="at" returns="PHPUnit_Framework_MockObject_Matcher_InvokedAtIndex" signature="phpunit_framework_mockobject_matcher_invokedatindex at(int $index)" />
      <scope doc="&#xA;Returns a matcher that matches when the method is executed at least once.&#xA;Returns phpunit_framework_mockobject_matcher_invokedatleastonce &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1667" lineend="1673" name="atLeastOnce" returns="PHPUnit_Framework_MockObject_Matcher_InvokedAtLeastOnce" signature="phpunit_framework_mockobject_matcher_invokedatleastonce atLeastOnce()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_Attribute matcher object.&#xA;&lt;phpunit_framework_constraint&gt; $constraint  - &#xA;&lt;string&gt; $attributeName  - &#xA;Returns phpunit_framework_constraint_attribute &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1685" lineend="1691" name="attribute" returns="PHPUnit_Framework_Constraint_Attribute" signature="phpunit_framework_constraint_attribute attribute(PHPUnit_Framework_Constraint $constraint, string $attributeName)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsEqual matcher object&#xA;that is wrapped in a PHPUnit_Framework_Constraint_Attribute matcher&#xA;object.&#xA;&lt;string&gt; $attributeName  - &#xA;&lt;mixed&gt; $value  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Returns phpunit_framework_constraint_attribute &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1709" lineend="1715" name="attributeEqualTo" returns="PHPUnit_Framework_Constraint_Attribute" signature="phpunit_framework_constraint_attribute attributeEqualTo(string $attributeName, mixed $value, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_Callback matcher object.&#xA;&lt;callable&gt; $callback  - &#xA;Returns phpunit_framework_constraint_callback &#xA;" ilk="function" line="1724" lineend="1730" name="callback" returns="PHPUnit_Framework_Constraint_Callback" signature="phpunit_framework_constraint_callback callback(callable $callback)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_ClassHasAttribute matcher object.&#xA;&lt;string&gt; $attributeName  - &#xA;Returns phpunit_framework_constraint_classhasattribute &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1741" lineend="1747" name="classHasAttribute" returns="PHPUnit_Framework_Constraint_ClassHasAttribute" signature="phpunit_framework_constraint_classhasattribute classHasAttribute(string $attributeName)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_ClassHasStaticAttribute matcher&#xA;object.&#xA;&lt;string&gt; $attributeName  - &#xA;Returns phpunit_framework_constraint_classhasstaticattribute &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1759" lineend="1765" name="classHasStaticAttribute" returns="PHPUnit_Framework_Constraint_ClassHasStaticAttribute" signature="phpunit_framework_constraint_classhasstaticattribute classHasStaticAttribute(string $attributeName)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_TraversableContains matcher&#xA;object.&#xA;&lt;mixed&gt; $value  - &#xA;&lt;bool&gt; $checkForObjectIdentity  - &#xA;&lt;bool&gt; $checkForNonObjectIdentity  - &#xA;Returns phpunit_framework_constraint_traversablecontains &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1779" lineend="1785" name="contains" returns="PHPUnit_Framework_Constraint_TraversableContains" signature="phpunit_framework_constraint_traversablecontains contains(mixed $value, bool $checkForObjectIdentity = true, bool $checkForNonObjectIdentity = false)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher&#xA;object.&#xA;&lt;string&gt; $type  - &#xA;Returns phpunit_framework_constraint_traversablecontainsonly &#xA;Since Method available since Release 3.1.4&#xA;" ilk="function" line="1797" lineend="1803" name="containsOnly" returns="PHPUnit_Framework_Constraint_TraversableContainsOnly" signature="phpunit_framework_constraint_traversablecontainsonly containsOnly(string $type)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher&#xA;object.&#xA;&lt;string&gt; $classname  - &#xA;Returns phpunit_framework_constraint_traversablecontainsonly &#xA;" ilk="function" line="1813" lineend="1819" name="containsOnlyInstancesOf" returns="PHPUnit_Framework_Constraint_TraversableContainsOnly" signature="phpunit_framework_constraint_traversablecontainsonly containsOnlyInstancesOf(string $classname)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsEqual matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Returns phpunit_framework_constraint_isequal &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1834" lineend="1840" name="equalTo" returns="PHPUnit_Framework_Constraint_IsEqual" signature="phpunit_framework_constraint_isequal equalTo(mixed $value, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
      <scope doc="&#xA;Returns a matcher that matches when the method is executed&#xA;exactly $count times.&#xA;&lt;int&gt; $count  - &#xA;Returns phpunit_framework_mockobject_matcher_invokedcount &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1852" lineend="1858" name="exactly" returns="PHPUnit_Framework_MockObject_Matcher_InvokedCount" signature="phpunit_framework_mockobject_matcher_invokedcount exactly(int $count)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_FileExists matcher object.&#xA;Returns phpunit_framework_constraint_fileexists &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1867" lineend="1873" name="fileExists" returns="PHPUnit_Framework_Constraint_FileExists" signature="phpunit_framework_constraint_fileexists fileExists()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_GreaterThan matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_constraint_greaterthan &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1884" lineend="1890" name="greaterThan" returns="PHPUnit_Framework_Constraint_GreaterThan" signature="phpunit_framework_constraint_greaterthan greaterThan(mixed $value)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps&#xA;a PHPUnit_Framework_Constraint_IsEqual and a&#xA;PHPUnit_Framework_Constraint_GreaterThan matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_constraint_or &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="1903" lineend="1909" name="greaterThanOrEqual" returns="PHPUnit_Framework_Constraint_Or" signature="phpunit_framework_constraint_or greaterThanOrEqual(mixed $value)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsIdentical matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_constraint_isidentical &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1920" lineend="1926" name="identicalTo" returns="PHPUnit_Framework_Constraint_IsIdentical" signature="phpunit_framework_constraint_isidentical identicalTo(mixed $value)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsEmpty matcher object.&#xA;Returns phpunit_framework_constraint_isempty &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1935" lineend="1941" name="isEmpty" returns="PHPUnit_Framework_Constraint_IsEmpty" signature="phpunit_framework_constraint_isempty isEmpty()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsFalse matcher object.&#xA;Returns phpunit_framework_constraint_isfalse &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1950" lineend="1956" name="isFalse" returns="PHPUnit_Framework_Constraint_IsFalse" signature="phpunit_framework_constraint_isfalse isFalse()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsInstanceOf matcher object.&#xA;&lt;string&gt; $className  - &#xA;Returns phpunit_framework_constraint_isinstanceof &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="1967" lineend="1973" name="isInstanceOf" returns="PHPUnit_Framework_Constraint_IsInstanceOf" signature="phpunit_framework_constraint_isinstanceof isInstanceOf(string $className)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsJson matcher object.&#xA;Returns phpunit_framework_constraint_isjson &#xA;Since Method available since Release 3.7.20&#xA;" ilk="function" line="1982" lineend="1988" name="isJson" returns="PHPUnit_Framework_Constraint_IsJson" signature="phpunit_framework_constraint_isjson isJson()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsNull matcher object.&#xA;Returns phpunit_framework_constraint_isnull &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="1997" lineend="2003" name="isNull" returns="PHPUnit_Framework_Constraint_IsNull" signature="phpunit_framework_constraint_isnull isNull()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsTrue matcher object.&#xA;Returns phpunit_framework_constraint_istrue &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="2012" lineend="2018" name="isTrue" returns="PHPUnit_Framework_Constraint_IsTrue" signature="phpunit_framework_constraint_istrue isTrue()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_IsType matcher object.&#xA;&lt;string&gt; $type  - &#xA;Returns phpunit_framework_constraint_istype &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2029" lineend="2035" name="isType" returns="PHPUnit_Framework_Constraint_IsType" signature="phpunit_framework_constraint_istype isType(string $type)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_LessThan matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_constraint_lessthan &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2046" lineend="2052" name="lessThan" returns="PHPUnit_Framework_Constraint_LessThan" signature="phpunit_framework_constraint_lessthan lessThan(mixed $value)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps&#xA;a PHPUnit_Framework_Constraint_IsEqual and a&#xA;PHPUnit_Framework_Constraint_LessThan matcher object.&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_constraint_or &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="2065" lineend="2071" name="lessThanOrEqual" returns="PHPUnit_Framework_Constraint_Or" signature="phpunit_framework_constraint_or lessThanOrEqual(mixed $value)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_And matcher object.&#xA;Returns phpunit_framework_constraint_and &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2080" lineend="2086" name="logicalAnd" returns="PHPUnit_Framework_Constraint_And" signature="phpunit_framework_constraint_and logicalAnd()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_Not matcher object.&#xA;&lt;phpunit_framework_constraint&gt; $constraint  - &#xA;Returns phpunit_framework_constraint_not &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2097" lineend="2103" name="logicalNot" returns="PHPUnit_Framework_Constraint_Not" signature="phpunit_framework_constraint_not logicalNot(PHPUnit_Framework_Constraint $constraint)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_Or matcher object.&#xA;Returns phpunit_framework_constraint_or &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2112" lineend="2118" name="logicalOr" returns="PHPUnit_Framework_Constraint_Or" signature="phpunit_framework_constraint_or logicalOr()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_Xor matcher object.&#xA;Returns phpunit_framework_constraint_xor &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2127" lineend="2133" name="logicalXor" returns="PHPUnit_Framework_Constraint_Xor" signature="phpunit_framework_constraint_xor logicalXor()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_StringMatches matcher object.&#xA;&lt;string&gt; $string  - &#xA;Returns phpunit_framework_constraint_stringmatches &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="2144" lineend="2150" name="matches" returns="PHPUnit_Framework_Constraint_StringMatches" signature="phpunit_framework_constraint_stringmatches matches(string $string)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_PCREMatch matcher object.&#xA;&lt;string&gt; $pattern  - &#xA;Returns phpunit_framework_constraint_pcrematch &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2161" lineend="2167" name="matchesRegularExpression" returns="PHPUnit_Framework_Constraint_PCREMatch" signature="phpunit_framework_constraint_pcrematch matchesRegularExpression(string $pattern)" />
      <scope doc="&#xA;Returns a matcher that matches when the method is never executed.&#xA;Returns phpunit_framework_mockobject_matcher_invokedcount &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2176" lineend="2182" name="never" returns="PHPUnit_Framework_MockObject_Matcher_InvokedCount" signature="phpunit_framework_mockobject_matcher_invokedcount never()" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_ObjectHasAttribute matcher object.&#xA;&lt;string&gt; $attributeName  - &#xA;Returns phpunit_framework_constraint_objecthasattribute &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2193" lineend="2199" name="objectHasAttribute" returns="PHPUnit_Framework_Constraint_ObjectHasAttribute" signature="phpunit_framework_constraint_objecthasattribute objectHasAttribute(string $attributeName)" />
      <scope doc="&#xA;&lt;mixed&gt; $value,  - ...&#xA;Returns phpunit_framework_mockobject_stub_consecutivecalls &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2208" lineend="2214" name="onConsecutiveCalls" returns="PHPUnit_Framework_MockObject_Stub_ConsecutiveCalls" signature="phpunit_framework_mockobject_stub_consecutivecalls onConsecutiveCalls(mixed $value)" />
      <scope doc="&#xA;Returns a matcher that matches when the method is executed exactly once.&#xA;Returns phpunit_framework_mockobject_matcher_invokedcount &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2223" lineend="2229" name="once" returns="PHPUnit_Framework_MockObject_Matcher_InvokedCount" signature="phpunit_framework_mockobject_matcher_invokedcount once()" />
      <scope doc="&#xA;&lt;int&gt; $argumentIndex  - &#xA;Returns phpunit_framework_mockobject_stub_returnargument &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="2238" lineend="2244" name="returnArgument" returns="PHPUnit_Framework_MockObject_Stub_ReturnArgument" signature="phpunit_framework_mockobject_stub_returnargument returnArgument(int $argumentIndex)" />
      <scope doc="&#xA;&lt;mixed&gt; $callback  - &#xA;Returns phpunit_framework_mockobject_stub_returncallback &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="2253" lineend="2259" name="returnCallback" returns="PHPUnit_Framework_MockObject_Stub_ReturnCallback" signature="phpunit_framework_mockobject_stub_returncallback returnCallback(mixed $callback)" />
      <scope doc="&#xA;Returns the current object.&#xA;This method is useful when mocking a fluent interface.&#xA;Returns phpunit_framework_mockobject_stub_returnself &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="2270" lineend="2276" name="returnSelf" returns="PHPUnit_Framework_MockObject_Stub_ReturnSelf" signature="phpunit_framework_mockobject_stub_returnself returnSelf()" />
      <scope doc="&#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_mockobject_stub_return &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2285" lineend="2291" name="returnValue" returns="PHPUnit_Framework_MockObject_Stub_Return" signature="phpunit_framework_mockobject_stub_return returnValue(mixed $value)" />
      <scope doc="&#xA;&lt;array&gt; $valueMap  - &#xA;Returns phpunit_framework_mockobject_stub_returnvaluemap &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="2300" lineend="2306" name="returnValueMap" returns="PHPUnit_Framework_MockObject_Stub_ReturnValueMap" signature="phpunit_framework_mockobject_stub_returnvaluemap returnValueMap(array $valueMap)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_StringContains matcher object.&#xA;&lt;string&gt; $string  - &#xA;&lt;bool&gt; $case  - &#xA;Returns phpunit_framework_constraint_stringcontains &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="2318" lineend="2324" name="stringContains" returns="PHPUnit_Framework_Constraint_StringContains" signature="phpunit_framework_constraint_stringcontains stringContains(string $string, bool $case = true)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_StringEndsWith matcher object.&#xA;&lt;mixed&gt; $suffix  - &#xA;Returns phpunit_framework_constraint_stringendswith &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="2335" lineend="2341" name="stringEndsWith" returns="PHPUnit_Framework_Constraint_StringEndsWith" signature="phpunit_framework_constraint_stringendswith stringEndsWith(mixed $suffix)" />
      <scope doc="&#xA;Returns a PHPUnit_Framework_Constraint_StringStartsWith matcher object.&#xA;&lt;mixed&gt; $prefix  - &#xA;Returns phpunit_framework_constraint_stringstartswith &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="2352" lineend="2358" name="stringStartsWith" returns="PHPUnit_Framework_Constraint_StringStartsWith" signature="phpunit_framework_constraint_stringstartswith stringStartsWith(mixed $prefix)" />
      <scope doc="&#xA;&lt;exception&gt; $exception  - &#xA;Returns phpunit_framework_mockobject_stub_exception &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="2367" lineend="2373" name="throwException" returns="PHPUnit_Framework_MockObject_Stub_Exception" signature="phpunit_framework_mockobject_stub_exception throwException(Exception $exception)" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="And.php">
    <scope ilk="blob" lang="PHP" name="And.php" src="phpunit-5.5.0/src/Framework/Constraint/And.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Logical AND.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="16" lineend="125" name="PHPUnit_Framework_Constraint_And">
        <variable attributes="protected" citdl="PHPUnit_Framework_Constraint" doc="@var PHPUnit_Framework_Constraint[]" line="21" name="constraints" />
        <variable attributes="protected" citdl="PHPUnit_Framework_Constraint" doc="@var PHPUnit_Framework_Constraint" line="26" name="lastConstraint" />
        <scope attributes="public" doc="&#xA;&lt;phpunit_framework_constraint[]&gt; $constraints  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="33" lineend="47" name="setConstraints" signature="setConstraints(array $constraints)" />
        <scope attributes="public" doc="&#xA;Evaluates the constraint for parameter $other&#xA;If $returnResult is set to false (the default), an exception is thrown&#xA;in case of a failure. null is returned otherwise.&#xA;If $returnResult is true, the result of the evaluation is returned as&#xA;a boolean value instead: true in case of success, false in case of a&#xA;failure.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;bool&gt; $returnResult  - Whether to return a result or throw an exception&#xA;Returns mixed &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="67" lineend="86" name="evaluate" returns="mixed" signature="mixed evaluate(mixed $other, string $description = &apos;&apos;, bool $returnResult = false)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="93" lineend="106" name="toString" returns="string" signature="string toString()" />
        <scope attributes="public" doc="&#xA;Counts the number of constraint elements.&#xA;Returns int &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="115" lineend="124" name="count" returns="int" signature="int count()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="ArrayHasKey.php">
    <scope ilk="blob" lang="PHP" name="ArrayHasKey.php" src="phpunit-5.5.0/src/Framework/Constraint/ArrayHasKey.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the array it is evaluated for has a given key.&#xA;&#xA;Uses array_key_exists() to check if the key is found in the input array, if&#xA;not found the evaluation fails.&#xA;&#xA;The array key is passed in the constructor.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="21" lineend="82" name="PHPUnit_Framework_Constraint_ArrayHasKey">
        <variable attributes="protected" citdl="int" doc="@var int|string" line="26" name="key" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;int|string&gt; $key  - &#xA;" ilk="function" line="31" lineend="35" name="__construct" signature="__construct($key)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="45" lineend="56" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="63" lineend="66" name="toString" returns="string" signature="string toString()" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="78" lineend="81" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645201" path="ArraySubset.php">
    <scope ilk="blob" lang="PHP" name="ArraySubset.php" src="phpunit-5.5.0/src/Framework/Constraint/ArraySubset.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the array it is evaluated for has a specified subset.&#xA;&#xA;Uses array_replace_recursive() to check if a key value subset is part of the&#xA;subject array.&#xA;&#xA;@since Class available since Release 4.4.0" ilk="class" line="19" lineend="85" name="PHPUnit_Framework_Constraint_ArraySubset">
        <variable attributes="protected" citdl="array" doc="@var array|ArrayAccess" line="24" name="subset" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="29" name="strict" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;array|arrayaccess&gt; $subset  - &#xA;&lt;bool&gt; $strict  - Check for object identity&#xA;" ilk="function" line="35" lineend="40" name="__construct" signature="__construct($subset, bool $strict = false)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;array|arrayaccess&gt; $other  - Array or ArrayAccess object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="50" lineend="59" name="matches" returns="bool" signature="bool matches($other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="66" lineend="69" name="toString" returns="string" signature="string toString()" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="81" lineend="84" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="Attribute.php">
    <scope ilk="blob" lang="PHP" name="Attribute.php" src="phpunit-5.5.0/src/Framework/Constraint/Attribute.php">
      <scope classrefs="PHPUnit_Framework_Constraint_Composite" doc="@since Class available since Release 3.1.0" ilk="class" line="14" lineend="87" name="PHPUnit_Framework_Constraint_Attribute">
        <variable attributes="protected" citdl="string" doc="@var string" line="19" name="attributeName" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;phpunit_framework_constraint&gt; $constraint  - &#xA;&lt;string&gt; $attributeName  - &#xA;" ilk="function" line="25" lineend="30" name="__construct" signature="__construct(PHPUnit_Framework_Constraint $constraint, string $attributeName)" />
        <scope attributes="public" doc="&#xA;Evaluates the constraint for parameter $other&#xA;If $returnResult is set to false (the default), an exception is thrown&#xA;in case of a failure. null is returned otherwise.&#xA;If $returnResult is true, the result of the evaluation is returned as&#xA;a boolean value instead: true in case of success, false in case of a&#xA;failure.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;bool&gt; $returnResult  - Whether to return a result or throw an exception&#xA;Returns mixed &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="50" lineend="60" name="evaluate" returns="mixed" signature="mixed evaluate(mixed $other, string $description = &apos;&apos;, bool $returnResult = false)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="67" lineend="71" name="toString" returns="string" signature="string toString()" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="83" lineend="86" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="Callback.php">
    <scope ilk="blob" lang="PHP" name="Callback.php" src="phpunit-5.5.0/src/Framework/Constraint/Callback.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that evaluates against a specified closure." ilk="class" line="14" lineend="59" name="PHPUnit_Framework_Constraint_Callback">
        <variable attributes="private" citdl="callback" line="16" name="callback" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;callable&gt; $callback  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="23" lineend="35" name="__construct" signature="__construct(callable $callback)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $value. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="45" lineend="48" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="55" lineend="58" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="ClassHasAttribute.php">
    <scope ilk="blob" lang="PHP" name="ClassHasAttribute.php" src="phpunit-5.5.0/src/Framework/Constraint/ClassHasAttribute.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the class it is evaluated for has a given&#xA;attribute.&#xA;&#xA;The attribute name is passed in the constructor.&#xA;&#xA;@since Class available since Release 3.1.0" ilk="class" line="19" lineend="82" name="PHPUnit_Framework_Constraint_ClassHasAttribute">
        <variable attributes="protected" citdl="string" doc="@var string" line="24" name="attributeName" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $attributeName  - &#xA;" ilk="function" line="29" lineend="33" name="__construct" signature="__construct(string $attributeName)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="43" lineend="48" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="55" lineend="61" name="toString" returns="string" signature="string toString()" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="73" lineend="81" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="ClassHasStaticAttribute.php">
    <scope ilk="blob" lang="PHP" name="ClassHasStaticAttribute.php" src="phpunit-5.5.0/src/Framework/Constraint/ClassHasStaticAttribute.php">
      <scope classrefs="PHPUnit_Framework_Constraint_ClassHasAttribute" doc="Constraint that asserts that the class it is evaluated for has a given&#xA;static attribute.&#xA;&#xA;The attribute name is passed in the constructor.&#xA;&#xA;@since Class available since Release 3.1.0" ilk="class" line="19" lineend="56" name="PHPUnit_Framework_Constraint_ClassHasStaticAttribute">
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="29" lineend="40" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="49" lineend="55" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="Composite.php">
    <scope ilk="blob" lang="PHP" name="Composite.php" src="phpunit-5.5.0/src/Framework/Constraint/Composite.php">
      <scope attributes="abstract" classrefs="PHPUnit_Framework_Constraint" doc="@since Class available since Release 3.1.0" ilk="class" line="14" lineend="70" name="PHPUnit_Framework_Constraint_Composite">
        <variable attributes="protected" citdl="PHPUnit_Framework_Constraint" doc="@var PHPUnit_Framework_Constraint" line="19" name="innerConstraint" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;phpunit_framework_constraint&gt; $innerConstraint  - &#xA;" ilk="function" line="24" lineend="28" name="__construct" signature="__construct(PHPUnit_Framework_Constraint $innerConstraint)" />
        <scope attributes="public" doc="&#xA;Evaluates the constraint for parameter $other&#xA;If $returnResult is set to false (the default), an exception is thrown&#xA;in case of a failure. null is returned otherwise.&#xA;If $returnResult is true, the result of the evaluation is returned as&#xA;a boolean value instead: true in case of success, false in case of a&#xA;failure.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;bool&gt; $returnResult  - Whether to return a result or throw an exception&#xA;Returns mixed &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="48" lineend="59" name="evaluate" returns="mixed" signature="mixed evaluate(mixed $other, string $description = &apos;&apos;, bool $returnResult = false)" />
        <scope attributes="public" doc="&#xA;Counts the number of constraint elements.&#xA;Returns int &#xA;" ilk="function" line="66" lineend="69" name="count" returns="int" signature="int count()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="Count.php">
    <scope ilk="blob" lang="PHP" name="Count.php" src="phpunit-5.5.0/src/Framework/Constraint/Count.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="@since Class available since Release 3.6.0" ilk="class" line="14" lineend="104" name="PHPUnit_Framework_Constraint_Count">
        <variable attributes="protected" citdl="int" doc="@var int" line="19" name="expectedCount" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;int&gt; $expected  - &#xA;" ilk="function" line="24" lineend="28" name="__construct" signature="__construct(int $expected)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - &#xA;Returns bool &#xA;" ilk="function" line="38" lineend="41" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="protected" doc="&#xA;&lt;mixed&gt; $other  - &#xA;Returns bool &#xA;" ilk="function" line="48" lineend="73" name="getCountOf" returns="bool" signature="bool getCountOf(mixed $other)" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="85" lineend="92" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;" ilk="function" line="97" lineend="103" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="Exception.php">
    <scope ilk="blob" lang="PHP" name="Exception.php" src="phpunit-5.5.0/src/Framework/Constraint/Exception.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="@since Class available since Release 3.6.6" ilk="class" line="14" lineend="88" name="PHPUnit_Framework_Constraint_Exception">
        <variable attributes="protected" citdl="string" doc="@var string" line="19" name="className" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $className  - &#xA;" ilk="function" line="24" lineend="28" name="__construct" signature="__construct(string $className)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="38" lineend="41" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="53" lineend="74" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="81" lineend="87" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="ExceptionCode.php">
    <scope ilk="blob" lang="PHP" name="ExceptionCode.php" src="phpunit-5.5.0/src/Framework/Constraint/ExceptionCode.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="@since Class available since Release 3.6.6" ilk="class" line="14" lineend="69" name="PHPUnit_Framework_Constraint_ExceptionCode">
        <variable attributes="protected" citdl="int" doc="@var int" line="19" name="expectedCode" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;int&gt; $expected  - &#xA;" ilk="function" line="24" lineend="28" name="__construct" signature="__construct(int $expected)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;exception&gt; $other  - &#xA;Returns bool &#xA;" ilk="function" line="38" lineend="41" name="matches" returns="bool" signature="bool matches(Exception $other)" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="53" lineend="60" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;" ilk="function" line="65" lineend="68" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="ExceptionMessage.php">
    <scope ilk="blob" lang="PHP" name="ExceptionMessage.php" src="phpunit-5.5.0/src/Framework/Constraint/ExceptionMessage.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="@since Class available since Release 3.6.6" ilk="class" line="14" lineend="69" name="PHPUnit_Framework_Constraint_ExceptionMessage">
        <variable attributes="protected" citdl="int" doc="@var int" line="19" name="expectedMessage" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $expected  - &#xA;" ilk="function" line="24" lineend="28" name="__construct" signature="__construct(string $expected)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;exception&gt; $other  - &#xA;Returns bool &#xA;" ilk="function" line="38" lineend="41" name="matches" returns="bool" signature="bool matches(Exception $other)" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="53" lineend="60" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;" ilk="function" line="65" lineend="68" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="ExceptionMessageRegExp.php">
    <scope ilk="blob" lang="PHP" name="ExceptionMessageRegExp.php" src="phpunit-5.5.0/src/Framework/Constraint/ExceptionMessageRegExp.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="@since Class available since Release 4.3.0" ilk="class" line="14" lineend="77" name="PHPUnit_Framework_Constraint_ExceptionMessageRegExp">
        <variable attributes="protected" citdl="int" doc="@var int" line="19" name="expectedMessageRegExp" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $expected  - &#xA;" ilk="function" line="24" lineend="28" name="__construct" signature="__construct(string $expected)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;exception&gt; $other  - &#xA;Returns bool &#xA;" ilk="function" line="38" lineend="49" name="matches" returns="bool" signature="bool matches(Exception $other)" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="61" lineend="68" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns string &#xA;" ilk="function" line="73" lineend="76" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="FileExists.php">
    <scope ilk="blob" lang="PHP" name="FileExists.php" src="phpunit-5.5.0/src/Framework/Constraint/FileExists.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that checks if the file(name) that it is evaluated for exists.&#xA;&#xA;The file path to check is passed as $other in evaluate().&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="18" lineend="60" name="PHPUnit_Framework_Constraint_FileExists">
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="28" lineend="31" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="43" lineend="49" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="56" lineend="59" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="GreaterThan.php">
    <scope ilk="blob" lang="PHP" name="GreaterThan.php" src="phpunit-5.5.0/src/Framework/Constraint/GreaterThan.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the value it is evaluated for is greater&#xA;than a given value.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="17" lineend="55" name="PHPUnit_Framework_Constraint_GreaterThan">
        <variable attributes="protected" citdl="numeric" doc="@var numeric" line="22" name="value" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;numeric&gt; $value  - &#xA;" ilk="function" line="27" lineend="31" name="__construct" signature="__construct(numeric $value)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="41" lineend="44" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="51" lineend="54" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="IsAnything.php">
    <scope ilk="blob" lang="PHP" name="IsAnything.php" src="phpunit-5.5.0/src/Framework/Constraint/IsAnything.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that accepts any input value.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="16" lineend="62" name="PHPUnit_Framework_Constraint_IsAnything">
        <scope attributes="public" doc="&#xA;Evaluates the constraint for parameter $other&#xA;If $returnResult is set to false (the default), an exception is thrown&#xA;in case of a failure. null is returned otherwise.&#xA;If $returnResult is true, the result of the evaluation is returned as&#xA;a boolean value instead: true in case of success, false in case of a&#xA;failure.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;bool&gt; $returnResult  - Whether to return a result or throw an exception&#xA;Returns mixed &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="36" lineend="39" name="evaluate" returns="mixed" signature="mixed evaluate(mixed $other, string $description = &apos;&apos;, bool $returnResult = false)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="46" lineend="49" name="toString" returns="string" signature="string toString()" />
        <scope attributes="public" doc="&#xA;Counts the number of constraint elements.&#xA;Returns int &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="58" lineend="61" name="count" returns="int" signature="int count()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="IsEmpty.php">
    <scope ilk="blob" lang="PHP" name="IsEmpty.php" src="phpunit-5.5.0/src/Framework/Constraint/IsEmpty.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that checks whether a variable is empty().&#xA;&#xA;@since Class available since Release 3.5.0" ilk="class" line="16" lineend="66" name="PHPUnit_Framework_Constraint_IsEmpty">
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="26" lineend="33" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="40" lineend="43" name="toString" returns="string" signature="string toString()" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="55" lineend="65" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="IsEqual.php">
    <scope ilk="blob" lang="PHP" name="IsEqual.php" src="phpunit-5.5.0/src/Framework/Constraint/IsEqual.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that checks if one value is equal to another.&#xA;&#xA;Equality is checked with PHP&apos;s == operator, the operator is explained in&#xA;detail at {@url http://www.php.net/manual/en/types.comparisons.php}.&#xA;Two values are equal if they have the same value disregarding type.&#xA;&#xA;The expected value is passed in the constructor.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="22" lineend="179" name="PHPUnit_Framework_Constraint_IsEqual">
        <variable attributes="protected" citdl="value" doc="@var mixed" line="27" name="value" />
        <variable attributes="protected" citdl="float" doc="@var float" line="32" name="delta" />
        <variable attributes="protected" citdl="int" doc="@var int" line="37" name="maxDepth" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="42" name="canonicalize" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="47" name="ignoreCase" />
        <variable attributes="protected" citdl="SebastianBergmann\Comparator\ComparisonFailure" doc="@var SebastianBergmann\Comparator\ComparisonFailure" line="52" name="lastFailure" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;mixed&gt; $value  - &#xA;&lt;float&gt; $delta  - &#xA;&lt;int&gt; $maxDepth  - &#xA;&lt;bool&gt; $canonicalize  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="63" lineend="88" name="__construct" signature="__construct(mixed $value, float $delta = 0.0, int $maxDepth = 10, bool $canonicalize = false, bool $ignoreCase = false)" />
        <scope attributes="public" doc="&#xA;Evaluates the constraint for parameter $other&#xA;If $returnResult is set to false (the default), an exception is thrown&#xA;in case of a failure. null is returned otherwise.&#xA;If $returnResult is true, the result of the evaluation is returned as&#xA;a boolean value instead: true in case of success, false in case of a&#xA;failure.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;bool&gt; $returnResult  - Whether to return a result or throw an exception&#xA;Returns mixed &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="108" lineend="144" name="evaluate" returns="mixed" signature="mixed evaluate(mixed $other, string $description = &apos;&apos;, bool $returnResult = false)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="151" lineend="178" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="IsFalse.php">
    <scope ilk="blob" lang="PHP" name="IsFalse.php" src="phpunit-5.5.0/src/Framework/Constraint/IsFalse.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that accepts false.&#xA;&#xA;@since Class available since Release 3.3.0" ilk="class" line="16" lineend="40" name="PHPUnit_Framework_Constraint_IsFalse">
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="26" lineend="29" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="36" lineend="39" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="IsFinite.php">
    <scope ilk="blob" lang="PHP" name="IsFinite.php" src="phpunit-5.5.0/src/Framework/Constraint/IsFinite.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that accepts finite.&#xA;&#xA;@since      Class available since Release 5.0.0" ilk="class" line="16" lineend="40" name="PHPUnit_Framework_Constraint_IsFinite">
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="26" lineend="29" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="36" lineend="39" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="IsIdentical.php">
    <scope ilk="blob" lang="PHP" name="IsIdentical.php" src="phpunit-5.5.0/src/Framework/Constraint/IsIdentical.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that one value is identical to another.&#xA;&#xA;Identical check is performed with PHP&apos;s === operator, the operator is&#xA;explained in detail at&#xA;{@url http://www.php.net/manual/en/types.comparisons.php}.&#xA;Two values are identical if they have the same value and are of the same&#xA;type.&#xA;&#xA;The expected value is passed in the constructor.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="24" lineend="132" name="PHPUnit_Framework_Constraint_IsIdentical">
        <variable citdl="int" ilk="constant" line="29" name="EPSILON" />
        <variable attributes="protected" citdl="value" doc="@var mixed" line="34" name="value" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;mixed&gt; $value  - &#xA;" ilk="function" line="39" lineend="43" name="__construct" signature="__construct(mixed $value)" />
        <scope attributes="public" doc="&#xA;Evaluates the constraint for parameter $other&#xA;If $returnResult is set to false (the default), an exception is thrown&#xA;in case of a failure. null is returned otherwise.&#xA;If $returnResult is true, the result of the evaluation is returned as&#xA;a boolean value instead: true in case of success, false in case of a&#xA;failure.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;bool&gt; $returnResult  - Whether to return a result or throw an exception&#xA;Returns mixed &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="63" lineend="92" name="evaluate" returns="mixed" signature="mixed evaluate(mixed $other, string $description = &apos;&apos;, bool $returnResult = false)" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="104" lineend="115" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="122" lineend="131" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="IsInfinite.php">
    <scope ilk="blob" lang="PHP" name="IsInfinite.php" src="phpunit-5.5.0/src/Framework/Constraint/IsInfinite.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that accepts infinite.&#xA;&#xA;@since      Class available since Release 5.0.0" ilk="class" line="16" lineend="40" name="PHPUnit_Framework_Constraint_IsInfinite">
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="26" lineend="29" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="36" lineend="39" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="IsInstanceOf.php">
    <scope ilk="blob" lang="PHP" name="IsInstanceOf.php" src="phpunit-5.5.0/src/Framework/Constraint/IsInstanceOf.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the object it is evaluated for is an instance&#xA;of a given class.&#xA;&#xA;The expected class name is passed in the constructor.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="19" lineend="94" name="PHPUnit_Framework_Constraint_IsInstanceOf">
        <variable attributes="protected" citdl="string" doc="@var string" line="24" name="className" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $className  - &#xA;" ilk="function" line="29" lineend="33" name="__construct" signature="__construct(string $className)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="43" lineend="46" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="58" lineend="66" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="73" lineend="80" name="toString" returns="string" signature="string toString()" />
        <scope attributes="private" ilk="function" line="82" lineend="93" name="getType" returns="string" signature="getType()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="IsJson.php">
    <scope ilk="blob" lang="PHP" name="IsJson.php" src="phpunit-5.5.0/src/Framework/Constraint/IsJson.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that a string is valid JSON.&#xA;&#xA;@since Class available since Release 3.7.20" ilk="class" line="16" lineend="77" name="PHPUnit_Framework_Constraint_IsJson">
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="26" lineend="38" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="50" lineend="66" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="73" lineend="76" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="IsNan.php">
    <scope ilk="blob" lang="PHP" name="IsNan.php" src="phpunit-5.5.0/src/Framework/Constraint/IsNan.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that accepts nan.&#xA;&#xA;@since      Class available since Release 5.0.0" ilk="class" line="16" lineend="40" name="PHPUnit_Framework_Constraint_IsNan">
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="26" lineend="29" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="36" lineend="39" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645202" path="IsNull.php">
    <scope ilk="blob" lang="PHP" name="IsNull.php" src="phpunit-5.5.0/src/Framework/Constraint/IsNull.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that accepts null.&#xA;&#xA;@since Class available since Release 3.3.0" ilk="class" line="16" lineend="40" name="PHPUnit_Framework_Constraint_IsNull">
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="26" lineend="29" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="36" lineend="39" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="IsTrue.php">
    <scope ilk="blob" lang="PHP" name="IsTrue.php" src="phpunit-5.5.0/src/Framework/Constraint/IsTrue.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that accepts true.&#xA;&#xA;@since Class available since Release 3.3.0" ilk="class" line="16" lineend="40" name="PHPUnit_Framework_Constraint_IsTrue">
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="26" lineend="29" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="36" lineend="39" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="IsType.php">
    <scope ilk="blob" lang="PHP" name="IsType.php" src="phpunit-5.5.0/src/Framework/Constraint/IsType.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the value it is evaluated for is of a&#xA;specified type.&#xA;&#xA;The expected value is passed in the constructor.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="19" lineend="143" name="PHPUnit_Framework_Constraint_IsType">
        <variable citdl="string" ilk="constant" line="21" name="TYPE_ARRAY" />
        <variable citdl="string" ilk="constant" line="22" name="TYPE_BOOL" />
        <variable citdl="string" ilk="constant" line="23" name="TYPE_FLOAT" />
        <variable citdl="string" ilk="constant" line="24" name="TYPE_INT" />
        <variable citdl="string" ilk="constant" line="25" name="TYPE_NULL" />
        <variable citdl="string" ilk="constant" line="26" name="TYPE_NUMERIC" />
        <variable citdl="string" ilk="constant" line="27" name="TYPE_OBJECT" />
        <variable citdl="string" ilk="constant" line="28" name="TYPE_RESOURCE" />
        <variable citdl="string" ilk="constant" line="29" name="TYPE_STRING" />
        <variable citdl="string" ilk="constant" line="30" name="TYPE_SCALAR" />
        <variable citdl="string" ilk="constant" line="31" name="TYPE_CALLABLE" />
        <variable attributes="protected" citdl="array" doc="@var array" line="52" name="types" />
        <variable attributes="protected" citdl="string" doc="@var string" line="57" name="type" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $type  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="64" lineend="79" name="__construct" signature="__construct(string $type)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="89" lineend="129" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="136" lineend="142" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="JsonMatches.php">
    <scope ilk="blob" lang="PHP" name="JsonMatches.php" src="phpunit-5.5.0/src/Framework/Constraint/JsonMatches.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Asserts whether or not two JSON objects are equal.&#xA;&#xA;@since Class available since Release 3.7.0" ilk="class" line="16" lineend="71" name="PHPUnit_Framework_Constraint_JsonMatches">
        <variable attributes="protected" citdl="string" doc="@var string" line="21" name="value" />
        <scope attributes="public __ctor__" doc="&#xA;Creates a new constraint.&#xA;&lt;string&gt; $value  - &#xA;" ilk="function" line="28" lineend="32" name="__construct" signature="__construct(string $value)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;This method can be overridden to implement the evaluation algorithm.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="44" lineend="57" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the object.&#xA;Returns string &#xA;" ilk="function" line="64" lineend="70" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="LessThan.php">
    <scope ilk="blob" lang="PHP" name="LessThan.php" src="phpunit-5.5.0/src/Framework/Constraint/LessThan.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the value it is evaluated for is less than&#xA;a given value.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="17" lineend="55" name="PHPUnit_Framework_Constraint_LessThan">
        <variable attributes="protected" citdl="numeric" doc="@var numeric" line="22" name="value" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;numeric&gt; $value  - &#xA;" ilk="function" line="27" lineend="31" name="__construct" signature="__construct(numeric $value)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="41" lineend="44" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="51" lineend="54" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="Not.php">
    <scope ilk="blob" lang="PHP" name="Not.php" src="phpunit-5.5.0/src/Framework/Constraint/Not.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Logical NOT.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="16" lineend="160" name="PHPUnit_Framework_Constraint_Not">
        <variable attributes="protected" citdl="PHPUnit_Framework_Constraint" doc="@var PHPUnit_Framework_Constraint" line="21" name="constraint" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;phpunit_framework_constraint&gt; $constraint  - &#xA;" ilk="function" line="26" lineend="35" name="__construct" signature="__construct(PHPUnit_Framework_Constraint $constraint)" />
        <scope attributes="public static" doc="&#xA;&lt;string&gt; $string  - &#xA;Returns string &#xA;" ilk="function" line="42" lineend="71" name="negate" returns="string" signature="string negate(string $string)" />
        <scope attributes="public" doc="&#xA;Evaluates the constraint for parameter $other&#xA;If $returnResult is set to false (the default), an exception is thrown&#xA;in case of a failure. null is returned otherwise.&#xA;If $returnResult is true, the result of the evaluation is returned as&#xA;a boolean value instead: true in case of success, false in case of a&#xA;failure.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;bool&gt; $returnResult  - Whether to return a result or throw an exception&#xA;Returns mixed &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="91" lineend="102" name="evaluate" returns="mixed" signature="mixed evaluate(mixed $other, string $description = &apos;&apos;, bool $returnResult = false)" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="114" lineend="127" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="134" lineend="147" name="toString" returns="string" signature="string toString()" />
        <scope attributes="public" doc="&#xA;Counts the number of constraint elements.&#xA;Returns int &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="156" lineend="159" name="count" returns="int" signature="int count()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="ObjectHasAttribute.php">
    <scope ilk="blob" lang="PHP" name="ObjectHasAttribute.php" src="phpunit-5.5.0/src/Framework/Constraint/ObjectHasAttribute.php">
      <scope classrefs="PHPUnit_Framework_Constraint_ClassHasAttribute" doc="Constraint that asserts that the object it is evaluated for has a given&#xA;attribute.&#xA;&#xA;The attribute name is passed in the constructor.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="19" lineend="35" name="PHPUnit_Framework_Constraint_ObjectHasAttribute">
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="29" lineend="34" name="matches" returns="bool" signature="bool matches(mixed $other)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="Or.php">
    <scope ilk="blob" lang="PHP" name="Or.php" src="phpunit-5.5.0/src/Framework/Constraint/Or.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Logical OR.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="16" lineend="117" name="PHPUnit_Framework_Constraint_Or">
        <variable attributes="protected" citdl="PHPUnit_Framework_Constraint" doc="@var PHPUnit_Framework_Constraint[]" line="21" name="constraints" />
        <scope attributes="public" doc="&#xA;&lt;phpunit_framework_constraint[]&gt; $constraints  - &#xA;" ilk="function" line="26" lineend="39" name="setConstraints" signature="setConstraints(array $constraints)" />
        <scope attributes="public" doc="&#xA;Evaluates the constraint for parameter $other&#xA;If $returnResult is set to false (the default), an exception is thrown&#xA;in case of a failure. null is returned otherwise.&#xA;If $returnResult is true, the result of the evaluation is returned as&#xA;a boolean value instead: true in case of success, false in case of a&#xA;failure.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;bool&gt; $returnResult  - Whether to return a result or throw an exception&#xA;Returns mixed &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="59" lineend="78" name="evaluate" returns="mixed" signature="mixed evaluate(mixed $other, string $description = &apos;&apos;, bool $returnResult = false)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="85" lineend="98" name="toString" returns="string" signature="string toString()" />
        <scope attributes="public" doc="&#xA;Counts the number of constraint elements.&#xA;Returns int &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="107" lineend="116" name="count" returns="int" signature="int count()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="PCREMatch.php">
    <scope ilk="blob" lang="PHP" name="PCREMatch.php" src="phpunit-5.5.0/src/Framework/Constraint/PCREMatch.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the string it is evaluated for matches&#xA;a regular expression.&#xA;&#xA;Checks a given value using the Perl Compatible Regular Expression extension&#xA;in PHP. The pattern is matched by executing preg_match().&#xA;&#xA;The pattern string passed in the constructor.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="22" lineend="63" name="PHPUnit_Framework_Constraint_PCREMatch">
        <variable attributes="protected" citdl="string" doc="@var string" line="27" name="pattern" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $pattern  - &#xA;" ilk="function" line="32" lineend="36" name="__construct" signature="__construct(string $pattern)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="46" lineend="49" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="56" lineend="62" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="SameSize.php">
    <scope ilk="blob" lang="PHP" name="SameSize.php" src="phpunit-5.5.0/src/Framework/Constraint/SameSize.php">
      <scope classrefs="PHPUnit_Framework_Constraint_Count" doc="@since Class available since Release 3.6.0" ilk="class" line="14" lineend="28" name="PHPUnit_Framework_Constraint_SameSize">
        <variable attributes="protected" citdl="int" doc="@var int" line="19" name="expectedCount" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;int&gt; $expected  - &#xA;" ilk="function" line="24" lineend="27" name="__construct" signature="__construct(int $expected)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="StringContains.php">
    <scope ilk="blob" lang="PHP" name="StringContains.php" src="phpunit-5.5.0/src/Framework/Constraint/StringContains.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the string it is evaluated for contains&#xA;a given string.&#xA;&#xA;Uses strpos() to find the position of the string in the input, if not found&#xA;the evaluation fails.&#xA;&#xA;The sub-string is passed in the constructor.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="22" lineend="81" name="PHPUnit_Framework_Constraint_StringContains">
        <variable attributes="protected" citdl="string" doc="@var string" line="27" name="string" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="32" name="ignoreCase" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $string  - &#xA;&lt;bool&gt; $ignoreCase  - &#xA;" ilk="function" line="38" lineend="44" name="__construct" signature="__construct(string $string, bool $ignoreCase = false)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="54" lineend="61" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="68" lineend="80" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="StringEndsWith.php">
    <scope ilk="blob" lang="PHP" name="StringEndsWith.php" src="phpunit-5.5.0/src/Framework/Constraint/StringEndsWith.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the string it is evaluated for ends with a given&#xA;suffix.&#xA;&#xA;@since Class available since Release 3.4.0" ilk="class" line="17" lineend="55" name="PHPUnit_Framework_Constraint_StringEndsWith">
        <variable attributes="protected" citdl="string" doc="@var string" line="22" name="suffix" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $suffix  - &#xA;" ilk="function" line="27" lineend="31" name="__construct" signature="__construct(string $suffix)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="41" lineend="44" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="51" lineend="54" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="StringMatches.php">
    <scope ilk="blob" lang="PHP" name="StringMatches.php" src="phpunit-5.5.0/src/Framework/Constraint/StringMatches.php">
      <import line="11" module="SebastianBergmann\Diff" symbol="Differ" />
      <scope classrefs="PHPUnit_Framework_Constraint_PCREMatch" doc="...&#xA;&#xA;@since Class available since Release 3.5.0" ilk="class" line="18" lineend="101" name="PHPUnit_Framework_Constraint_StringMatches">
        <variable attributes="protected" citdl="string" doc="@var string" line="23" name="string" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $string  - &#xA;" ilk="function" line="28" lineend="37" name="__construct" signature="__construct(string $string)" />
        <variable citdl="this.createPatternFromFormat()" line="34" name="pattern" />
        <scope attributes="protected" ilk="function" line="39" lineend="42" name="failureDescription" returns="string" signature="failureDescription($other)" />
        <scope attributes="protected" ilk="function" line="44" lineend="65" name="additionalFailureDescription" returns="differ.diff()" signature="additionalFailureDescription($other)" />
        <scope attributes="protected" ilk="function" line="67" lineend="100" name="createPatternFromFormat" returns="string" signature="createPatternFromFormat($string)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="StringStartsWith.php">
    <scope ilk="blob" lang="PHP" name="StringStartsWith.php" src="phpunit-5.5.0/src/Framework/Constraint/StringStartsWith.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the string it is evaluated for begins with a&#xA;given prefix.&#xA;&#xA;@since Class available since Release 3.4.0" ilk="class" line="17" lineend="55" name="PHPUnit_Framework_Constraint_StringStartsWith">
        <variable attributes="protected" citdl="string" doc="@var string" line="22" name="prefix" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $prefix  - &#xA;" ilk="function" line="27" lineend="31" name="__construct" signature="__construct(string $prefix)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="41" lineend="44" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="51" lineend="54" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="TraversableContains.php">
    <scope ilk="blob" lang="PHP" name="TraversableContains.php" src="phpunit-5.5.0/src/Framework/Constraint/TraversableContains.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the Traversable it is applied to contains&#xA;a given value.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="17" lineend="125" name="PHPUnit_Framework_Constraint_TraversableContains">
        <variable attributes="protected" citdl="bool" doc="@var bool" line="22" name="checkForObjectIdentity" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="27" name="checkForNonObjectIdentity" />
        <variable attributes="protected" citdl="value" doc="@var mixed" line="32" name="value" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;mixed&gt; $value  - &#xA;&lt;bool&gt; $checkForObjectIdentity  - &#xA;&lt;bool&gt; $checkForNonObjectIdentity  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="41" lineend="56" name="__construct" signature="__construct(mixed $value, bool $checkForObjectIdentity = true, bool $checkForNonObjectIdentity = false)" />
        <scope attributes="protected" doc="&#xA;Evaluates the constraint for parameter $other. Returns true if the&#xA;constraint is met, false otherwise.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;Returns bool &#xA;" ilk="function" line="66" lineend="91" name="matches" returns="bool" signature="bool matches(mixed $other)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="98" lineend="105" name="toString" returns="string" signature="string toString()" />
        <scope attributes="protected" doc="&#xA;Returns the description of the failure&#xA;The beginning of failure messages is &quot;Failed asserting that&quot; in most&#xA;cases. This method should return the second part of that sentence.&#xA;&lt;mixed&gt; $other  - Evaluated value or object.&#xA;Returns string &#xA;" ilk="function" line="117" lineend="124" name="failureDescription" returns="string" signature="string failureDescription(mixed $other)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="TraversableContainsOnly.php">
    <scope ilk="blob" lang="PHP" name="TraversableContainsOnly.php" src="phpunit-5.5.0/src/Framework/Constraint/TraversableContainsOnly.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Constraint that asserts that the Traversable it is applied to contains&#xA;only values of a given type.&#xA;&#xA;@since Class available since Release 3.1.4" ilk="class" line="17" lineend="95" name="PHPUnit_Framework_Constraint_TraversableContainsOnly">
        <variable attributes="protected" citdl="PHPUnit_Framework_Constraint" doc="@var PHPUnit_Framework_Constraint" line="22" name="constraint" />
        <variable attributes="protected" citdl="string" doc="@var string" line="27" name="type" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string&gt; $type  - &#xA;&lt;bool&gt; $isNativeType  - &#xA;" ilk="function" line="33" lineend="46" name="__construct" signature="__construct(string $type, bool $isNativeType = true)" />
        <scope attributes="public" doc="&#xA;Evaluates the constraint for parameter $other&#xA;If $returnResult is set to false (the default), an exception is thrown&#xA;in case of a failure. null is returned otherwise.&#xA;If $returnResult is true, the result of the evaluation is returned as&#xA;a boolean value instead: true in case of success, false in case of a&#xA;failure.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;bool&gt; $returnResult  - Whether to return a result or throw an exception&#xA;Returns mixed &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="66" lineend="84" name="evaluate" returns="mixed" signature="mixed evaluate(mixed $other, string $description = &apos;&apos;, bool $returnResult = false)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="91" lineend="94" name="toString" returns="string" signature="string toString()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="Xor.php">
    <scope ilk="blob" lang="PHP" name="Xor.php" src="phpunit-5.5.0/src/Framework/Constraint/Xor.php">
      <scope classrefs="PHPUnit_Framework_Constraint" doc="Logical XOR.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="16" lineend="122" name="PHPUnit_Framework_Constraint_Xor">
        <variable attributes="protected" citdl="PHPUnit_Framework_Constraint" doc="@var PHPUnit_Framework_Constraint[]" line="21" name="constraints" />
        <scope attributes="public" doc="&#xA;&lt;phpunit_framework_constraint[]&gt; $constraints  - &#xA;" ilk="function" line="26" lineend="39" name="setConstraints" signature="setConstraints(array $constraints)" />
        <scope attributes="public" doc="&#xA;Evaluates the constraint for parameter $other&#xA;If $returnResult is set to false (the default), an exception is thrown&#xA;in case of a failure. null is returned otherwise.&#xA;If $returnResult is true, the result of the evaluation is returned as&#xA;a boolean value instead: true in case of success, false in case of a&#xA;failure.&#xA;&lt;mixed&gt; $other  - Value or object to evaluate.&#xA;&lt;string&gt; $description  - Additional information about the test&#xA;&lt;bool&gt; $returnResult  - Whether to return a result or throw an exception&#xA;Returns mixed &#xA;Throws PHPUnit_Framework_ExpectationFailedException&#xA;" ilk="function" line="59" lineend="83" name="evaluate" returns="mixed" signature="mixed evaluate(mixed $other, string $description = &apos;&apos;, bool $returnResult = false)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the constraint.&#xA;Returns string &#xA;" ilk="function" line="90" lineend="103" name="toString" returns="string" signature="string toString()" />
        <scope attributes="public" doc="&#xA;Counts the number of constraint elements.&#xA;Returns int &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="112" lineend="121" name="count" returns="int" signature="int count()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="ErrorMessageProvider.php">
    <scope ilk="blob" lang="PHP" name="ErrorMessageProvider.php" src="phpunit-5.5.0/src/Framework/Constraint/JsonMatches/ErrorMessageProvider.php">
      <scope doc="Provides human readable messages for each JSON error.&#xA;&#xA;@since Class available since Release 3.7.0" ilk="class" line="16" lineend="69" name="PHPUnit_Framework_Constraint_JsonMatches_ErrorMessageProvider">
        <scope attributes="public static" doc="&#xA;Translates JSON error to a human readable string.&#xA;&lt;string&gt; $error  - &#xA;&lt;string&gt; $prefix  - &#xA;Returns string &#xA;" ilk="function" line="26" lineend="44" name="determineJsonError" returns="string" signature="string determineJsonError(string $error, string $prefix = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Translates a given type to a human readable message prefix.&#xA;&lt;string&gt; $type  - &#xA;Returns string &#xA;" ilk="function" line="53" lineend="68" name="translateTypeToPrefix" returns="string" signature="string translateTypeToPrefix(string $type)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="BaseTestRunner.php">
    <scope ilk="blob" lang="PHP" name="BaseTestRunner.php" src="phpunit-5.5.0/src/Runner/BaseTestRunner.php">
      <scope attributes="abstract" doc="Base class for all test runners.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" line="16" lineend="141" name="PHPUnit_Runner_BaseTestRunner">
        <variable citdl="int" ilk="constant" line="18" name="STATUS_PASSED" />
        <variable citdl="int" ilk="constant" line="19" name="STATUS_SKIPPED" />
        <variable citdl="int" ilk="constant" line="20" name="STATUS_INCOMPLETE" />
        <variable citdl="int" ilk="constant" line="21" name="STATUS_FAILURE" />
        <variable citdl="int" ilk="constant" line="22" name="STATUS_ERROR" />
        <variable citdl="int" ilk="constant" line="23" name="STATUS_RISKY" />
        <variable citdl="int" ilk="constant" line="24" name="STATUS_WARNING" />
        <variable citdl="string" ilk="constant" line="25" name="SUITE_METHODNAME" />
        <scope attributes="public" doc="&#xA;Returns the loader to be used.&#xA;Returns phpunit_runner_testsuiteloader &#xA;" ilk="function" line="32" lineend="35" name="getLoader" returns="PHPUnit_Runner_TestSuiteLoader" signature="phpunit_runner_testsuiteloader getLoader()" />
        <scope attributes="public" doc="&#xA;Returns the Test corresponding to the given suite.&#xA;This is a template method, subclasses override&#xA;the runFailed() and clearStatus() methods.&#xA;&lt;string&gt; $suiteClassName  - &#xA;&lt;string&gt; $suiteClassFile  - &#xA;&lt;mixed&gt; $suffixes  - &#xA;Returns phpunit_framework_test &#xA;" ilk="function" line="48" lineend="110" name="getTest" returns="PHPUnit_Framework_Test" signature="phpunit_framework_test getTest(string $suiteClassName, string $suiteClassFile = &apos;&apos;, mixed $suffixes = &apos;&apos;)" />
        <scope attributes="protected" doc="&#xA;Returns the loaded ReflectionClass for a suite name.&#xA;&lt;string&gt; $suiteClassName  - &#xA;&lt;string&gt; $suiteClassFile  - &#xA;Returns reflectionclass &#xA;" ilk="function" line="120" lineend="125" name="loadSuiteClass" returns="ReflectionClass" signature="reflectionclass loadSuiteClass(string $suiteClassName, string $suiteClassFile = &apos;&apos;)" />
        <scope attributes="protected" doc="&#xA;Clears the status message.&#xA;" ilk="function" line="130" lineend="132" name="clearStatus" signature="clearStatus()" />
        <scope attributes="abstract protected" doc="&#xA;Override to define how to handle a failed loading of&#xA;a test suite.&#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="140" lineend="140" name="runFailed" signature="runFailed(string $message)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="Exception.php">
    <scope ilk="blob" lang="PHP" name="Exception.php" src="phpunit-5.5.0/src/Runner/Exception.php">
      <scope classrefs="RuntimeException" doc="@since Class available since Release 4.0.0" ilk="class" interfacerefs="PHPUnit_Exception" line="14" lineend="16" name="PHPUnit_Runner_Exception" />
    </scope>
  </file>
  <file lang="PHP" mtime="1474645203" path="StandardTestSuiteLoader.php">
    <scope ilk="blob" lang="PHP" name="StandardTestSuiteLoader.php" src="phpunit-5.5.0/src/Runner/StandardTestSuiteLoader.php">
      <scope doc="The standard test suite loader.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" interfacerefs="PHPUnit_Runner_TestSuiteLoader" line="16" lineend="118" name="PHPUnit_Runner_StandardTestSuiteLoader">
        <scope attributes="public" doc="&#xA;&lt;string&gt; $suiteClassName  - &#xA;&lt;string&gt; $suiteClassFile  - &#xA;Returns reflectionclass &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="26" lineend="107" name="load" returns="ReflectionClass" signature="reflectionclass load(string $suiteClassName, string $suiteClassFile = &apos;&apos;)" />
        <scope attributes="public" doc="&#xA;&lt;reflectionclass&gt; $aClass  - &#xA;Returns reflectionclass &#xA;" ilk="function" line="114" lineend="117" name="reload" returns="ReflectionClass" signature="reflectionclass reload(ReflectionClass $aClass)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="TestSuiteLoader.php">
    <scope ilk="blob" lang="PHP" name="TestSuiteLoader.php" src="phpunit-5.5.0/src/Runner/TestSuiteLoader.php">
      <scope ilk="interface" line="16" lineend="32" name="PHPUnit_Runner_TestSuiteLoader" signature="PHPUnit_Runner_TestSuiteLoader">
        <scope attributes="public" doc="&#xA;&lt;string&gt; $suiteClassName  - &#xA;&lt;string&gt; $suiteClassFile  - &#xA;Returns reflectionclass &#xA;" ilk="function" line="24" lineend="24" name="load" returns="ReflectionClass" signature="reflectionclass load(string $suiteClassName, string $suiteClassFile = &apos;&apos;)" />
        <scope attributes="public" doc="&#xA;&lt;reflectionclass&gt; $aClass  - &#xA;Returns reflectionclass &#xA;" ilk="function" line="31" lineend="31" name="reload" returns="ReflectionClass" signature="reflectionclass reload(ReflectionClass $aClass)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="Version.php">
    <scope ilk="blob" lang="PHP" name="Version.php" src="phpunit-5.5.0/src/Runner/Version.php">
      <scope doc="This class defines the current version of PHPUnit.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" line="16" lineend="77" name="PHPUnit_Runner_Version">
        <variable attributes="private static" line="18" name="pharVersion" />
        <variable attributes="private static" citdl="version.getVersion()" line="19" name="version" />
        <scope attributes="public static" doc="&#xA;Returns the current version of PHPUnit.&#xA;Returns string &#xA;" ilk="function" line="26" lineend="38" name="id" returns="string" signature="string id()" />
        <scope attributes="public static" doc="&#xA;Returns string &#xA;Since Method available since Release 4.8.13&#xA;" ilk="function" line="45" lineend="54" name="series" returns="string" signature="string series()" />
        <scope attributes="public static" doc="&#xA;Returns string &#xA;" ilk="function" line="59" lineend="62" name="getVersionString" returns="string" signature="string getVersionString()" />
        <scope attributes="public static" doc="&#xA;Returns string &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="69" lineend="76" name="getReleaseChannel" returns="string" signature="string getReleaseChannel()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="Factory.php">
    <scope ilk="blob" lang="PHP" name="Factory.php" src="phpunit-5.5.0/src/Runner/Filter/Factory.php">
      <scope doc="@since Class available since Release 4.0.0" ilk="class" line="14" lineend="51" name="PHPUnit_Runner_Filter_Factory">
        <variable attributes="private" citdl="array" doc="@var array" line="19" name="filters" />
        <scope attributes="public" doc="&#xA;&lt;reflectionclass&gt; $filter  - &#xA;&lt;mixed&gt; $args  - &#xA;" ilk="function" line="25" lineend="37" name="addFilter" signature="addFilter(ReflectionClass $filter, mixed $args)" />
        <scope attributes="public" doc="&#xA;Returns filteriterator &#xA;" ilk="function" line="42" lineend="50" name="factory" returns="FilterIterator" signature="filteriterator factory(Iterator $iterator, PHPUnit_Framework_TestSuite $suite)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="Group.php">
    <scope ilk="blob" lang="PHP" name="Group.php" src="phpunit-5.5.0/src/Runner/Filter/Group.php">
      <scope attributes="abstract" classrefs="RecursiveFilterIterator" doc="@since Class available since Release 4.0.0" ilk="class" line="14" lineend="59" name="PHPUnit_Runner_Filter_GroupFilterIterator">
        <variable attributes="protected" citdl="array" doc="@var array" line="19" name="groupTests" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;recursiveiterator&gt; $iterator  - &#xA;&lt;array&gt; $groups  - &#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;" ilk="function" line="26" lineend="42" name="__construct" returns="spl_object_hash()" signature="__construct(RecursiveIterator $iterator, array $groups, PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;" ilk="function" line="47" lineend="56" name="accept" returns="bool" signature="bool accept()" />
        <scope attributes="abstract protected" ilk="function" line="58" lineend="58" name="doAccept" signature="doAccept($hash)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="Test.php">
    <scope ilk="blob" lang="PHP" name="Test.php" src="phpunit-5.5.0/src/Runner/Filter/Test.php">
      <scope classrefs="RecursiveFilterIterator" doc="@since Class available since Release 4.0.0" ilk="class" line="14" lineend="116" name="PHPUnit_Runner_Filter_Test">
        <variable attributes="protected" citdl="string" doc="@var string" line="19" name="filter" />
        <variable attributes="protected" citdl="int" doc="@var int" line="24" name="filterMin" />
        <variable attributes="protected" citdl="int" doc="@var int" line="28" name="filterMax" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;recursiveiterator&gt; $iterator  - &#xA;&lt;string&gt; $filter  - &#xA;" ilk="function" line="34" lineend="38" name="__construct" signature="__construct(RecursiveIterator $iterator, string $filter)" />
        <scope attributes="protected" doc="&#xA;&lt;string&gt; $filter  - &#xA;" ilk="function" line="43" lineend="86" name="setFilter" signature="setFilter(string $filter)" />
        <scope attributes="public" doc="&#xA;Returns bool &#xA;" ilk="function" line="91" lineend="115" name="accept" returns="bool" signature="bool accept()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="Exclude.php">
    <scope ilk="blob" lang="PHP" name="Exclude.php" src="phpunit-5.5.0/src/Runner/Filter/Group/Exclude.php">
      <scope classrefs="PHPUnit_Runner_Filter_GroupFilterIterator" doc="@since Class available since Release 4.0.0" ilk="class" line="14" lineend="20" name="PHPUnit_Runner_Filter_Group_Exclude">
        <scope attributes="protected" ilk="function" line="16" lineend="19" name="doAccept" signature="doAccept($hash)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="Include.php">
    <scope ilk="blob" lang="PHP" name="Include.php" src="phpunit-5.5.0/src/Runner/Filter/Group/Include.php">
      <scope classrefs="PHPUnit_Runner_Filter_GroupFilterIterator" doc="@since Class available since Release 4.0.0" ilk="class" line="14" lineend="20" name="PHPUnit_Runner_Filter_Group_Include">
        <scope attributes="protected" ilk="function" line="16" lineend="19" name="doAccept" returns="in_array()" signature="doAccept($hash)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="Command.php">
    <scope ilk="blob" lang="PHP" name="Command.php" src="phpunit-5.5.0/src/TextUI/Command.php">
      <scope doc="A TestRunner for the Command Line Interface (CLI)&#xA;PHP SAPI Module.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="17" lineend="1149" name="PHPUnit_TextUI_Command">
        <variable attributes="protected" citdl="array" doc="@var array" line="27" name="arguments" />
        <variable attributes="protected" citdl="array" doc="@var array" line="32" name="options" />
        <variable attributes="protected" citdl="array" doc="@var array" line="101" name="longOptions" />
        <variable attributes="private" citdl="bool" doc="@var bool" line="106" name="versionStringPrinted" />
        <scope attributes="public static" doc="&#xA;&lt;bool&gt; $exit  - &#xA;" ilk="function" line="111" lineend="116" name="main" returns="command.run()" signature="main(bool $exit = true)" />
        <scope attributes="public" doc="&#xA;&lt;array&gt; $argv  - &#xA;&lt;bool&gt; $exit  - &#xA;Returns int &#xA;" ilk="function" line="124" lineend="199" name="run" returns="int" signature="int run(array $argv, bool $exit = true)" />
        <scope attributes="protected" doc="&#xA;Create a TestRunner, override in subclasses.&#xA;Returns phpunit_textui_testrunner &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="208" lineend="211" name="createRunner" returns="PHPUnit_TextUI_TestRunner" signature="phpunit_textui_testrunner createRunner()" />
        <scope attributes="protected" doc="&#xA;Handles the command-line arguments.&#xA;A child class of PHPUnit_TextUI_Command can hook into the argument&#xA;parsing by adding the switch(es) to the $longOptions array and point to a&#xA;callback method that handles the switch(es) in the child class like this&#xA;&lt;code&gt;&#xA;&lt;?php&#xA;class MyCommand extends PHPUnit_TextUI_Command&#xA;{&#xA;    public function __construct()&#xA;    {&#xA;        // my-switch won&apos;t accept a value, it&apos;s an on/off&#xA;        $this-&gt;longOptions[&apos;my-switch&apos;] = &apos;myHandler&apos;;&#xA;        // my-secondswitch will accept a value - note the equals sign&#xA;        $this-&gt;longOptions[&apos;my-secondswitch=&apos;] = &apos;myOtherHandler&apos;;&#xA;    }&#xA;    // --my-switch  -&gt; myHandler()&#xA;    protected function myHandler()&#xA;    {&#xA;    }&#xA;    // --my-secondswitch foo -&gt; myOtherHandler(&apos;foo&apos;)&#xA;    protected function myOtherHandler ($value)&#xA;    {&#xA;    }&#xA;    // You will also need this - the static keyword in the&#xA;    // PHPUnit_TextUI_Command will mean that it&apos;ll be&#xA;    // PHPUnit_TextUI_Command that gets instantiated,&#xA;    // not MyCommand&#xA;    public static function main($exit = true)&#xA;    {&#xA;        $command = new static;&#xA;        return $command-&gt;run($_SERVER[&apos;argv&apos;], $exit);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&#xA;&lt;array&gt; $argv  - &#xA;" ilk="function" line="258" lineend="799" name="handleArguments" signature="handleArguments(array $argv)" />
        <scope attributes="protected" doc="&#xA;Handles the loading of the PHPUnit_Runner_TestSuiteLoader implementation.&#xA;&lt;string&gt; $loaderClass  - &#xA;&lt;string&gt; $loaderFile  - &#xA;Returns phpunit_runner_testsuiteloader &#xA;" ilk="function" line="809" lineend="844" name="handleLoader" returns="PHPUnit_Runner_TestSuiteLoader" signature="phpunit_runner_testsuiteloader handleLoader(string $loaderClass, string $loaderFile = &apos;&apos;)" />
        <scope attributes="protected" doc="&#xA;Handles the loading of the PHPUnit_Util_Printer implementation.&#xA;&lt;string&gt; $printerClass  - &#xA;&lt;string&gt; $printerFile  - &#xA;Returns phpunit_util_printer &#xA;" ilk="function" line="854" lineend="892" name="handlePrinter" returns="PHPUnit_Util_Printer" signature="phpunit_util_printer handlePrinter(string $printerClass, string $printerFile = &apos;&apos;)" />
        <scope attributes="protected" doc="&#xA;Loads a bootstrap file.&#xA;&lt;string&gt; $filename  - &#xA;" ilk="function" line="899" lineend="906" name="handleBootstrap" signature="handleBootstrap(string $filename)" />
        <scope attributes="protected" doc="&#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="911" lineend="991" name="handleSelfUpdate" signature="handleSelfUpdate($upgrade = false)" />
        <scope attributes="protected" doc="&#xA;Since Method available since Release 4.8.0&#xA;" ilk="function" line="996" lineend="1011" name="handleVersionCheck" signature="handleVersionCheck()" />
        <scope attributes="protected" doc="&#xA;Show the help message.&#xA;" ilk="function" line="1016" lineend="1119" name="showHelp" signature="showHelp()" />
        <scope attributes="protected" doc="&#xA;Custom callback for test suite discovery.&#xA;" ilk="function" line="1124" lineend="1126" name="handleCustomTestSuite" signature="handleCustomTestSuite()" />
        <scope attributes="private" ilk="function" line="1128" lineend="1137" name="printVersionString" signature="printVersionString()" />
        <scope attributes="private" doc="&#xA;" ilk="function" line="1141" lineend="1148" name="showError" signature="showError($message)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="ResultPrinter.php">
    <scope ilk="blob" lang="PHP" name="ResultPrinter.php" src="phpunit-5.5.0/src/TextUI/ResultPrinter.php">
      <import line="11" module="SebastianBergmann\Environment" symbol="Console" />
      <scope classrefs="PHPUnit_Util_Printer" doc="Prints the result of a TextUI TestRunner run.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" interfacerefs="PHPUnit_Framework_TestListener" line="18" lineend="708" name="PHPUnit_TextUI_ResultPrinter">
        <variable citdl="int" ilk="constant" line="20" name="EVENT_TEST_START" />
        <variable citdl="int" ilk="constant" line="21" name="EVENT_TEST_END" />
        <variable citdl="int" ilk="constant" line="22" name="EVENT_TESTSUITE_START" />
        <variable citdl="int" ilk="constant" line="23" name="EVENT_TESTSUITE_END" />
        <variable citdl="string" ilk="constant" line="25" name="COLOR_NEVER" />
        <variable citdl="string" ilk="constant" line="26" name="COLOR_AUTO" />
        <variable citdl="string" ilk="constant" line="27" name="COLOR_ALWAYS" />
        <variable citdl="self.COLOR_NEVER" ilk="constant" line="28" name="COLOR_DEFAULT" />
        <variable attributes="private static" citdl="array" doc="@var array" line="51" name="ansiCodes" />
        <variable attributes="protected" citdl="int" doc="@var int" line="56" name="column" />
        <variable attributes="protected" citdl="int" doc="@var int" line="61" name="maxColumn" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="66" name="lastTestFailed" />
        <variable attributes="protected" citdl="int" doc="@var int" line="71" name="numAssertions" />
        <variable attributes="protected" citdl="int" doc="@var int" line="76" name="numTests" />
        <variable attributes="protected" citdl="int" doc="@var int" line="81" name="numTestsRun" />
        <variable attributes="protected" citdl="int" doc="@var int" line="86" name="numTestsWidth" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="91" name="colors" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="96" name="debug" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="101" name="verbose" />
        <variable attributes="private" citdl="int" doc="@var int" line="106" name="numberOfColumns" />
        <variable attributes="private" citdl="bool" doc="@var bool" line="111" name="reverse" />
        <variable attributes="private" citdl="bool" doc="@var bool" line="116" name="defectListPrinted" />
        <scope attributes="public __ctor__" doc="&#xA;Constructor.&#xA;&lt;mixed&gt; $out  - &#xA;&lt;bool&gt; $verbose  - &#xA;&lt;string&gt; $colors  - &#xA;&lt;bool&gt; $debug  - &#xA;&lt;int|string&gt; $numberOfColumns  - &#xA;&lt;bool&gt; $reverse  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="132" lineend="178" name="__construct" signature="__construct(mixed $out = null, bool $verbose = false, string $colors = self::COLOR_DEFAULT, bool $debug = false, $numberOfColumns = 80, bool $reverse = false)" />
        <scope attributes="public" doc="&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;" ilk="function" line="183" lineend="197" name="printResult" signature="printResult(PHPUnit_Framework_TestResult $result)" />
        <scope attributes="protected" doc="&#xA;&lt;array&gt; $defects  - &#xA;&lt;string&gt; $type  - &#xA;" ilk="function" line="203" lineend="236" name="printDefects" signature="printDefects(array $defects, string $type)" />
        <scope attributes="protected" doc="&#xA;&lt;phpunit_framework_testfailure&gt; $defect  - &#xA;&lt;int&gt; $count  - &#xA;" ilk="function" line="242" lineend="246" name="printDefect" signature="printDefect(PHPUnit_Framework_TestFailure $defect, int $count)" />
        <scope attributes="protected" doc="&#xA;&lt;phpunit_framework_testfailure&gt; $defect  - &#xA;&lt;int&gt; $count  - &#xA;" ilk="function" line="252" lineend="261" name="printDefectHeader" signature="printDefectHeader(PHPUnit_Framework_TestFailure $defect, int $count)" />
        <scope attributes="protected" doc="&#xA;&lt;phpunit_framework_testfailure&gt; $defect  - &#xA;" ilk="function" line="266" lineend="274" name="printDefectTrace" signature="printDefectTrace(PHPUnit_Framework_TestFailure $defect)" />
        <scope attributes="protected" doc="&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;" ilk="function" line="279" lineend="282" name="printErrors" signature="printErrors(PHPUnit_Framework_TestResult $result)" />
        <scope attributes="protected" doc="&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;" ilk="function" line="287" lineend="290" name="printFailures" signature="printFailures(PHPUnit_Framework_TestResult $result)" />
        <scope attributes="protected" doc="&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;" ilk="function" line="295" lineend="298" name="printWarnings" signature="printWarnings(PHPUnit_Framework_TestResult $result)" />
        <scope attributes="protected" doc="&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;" ilk="function" line="303" lineend="306" name="printIncompletes" signature="printIncompletes(PHPUnit_Framework_TestResult $result)" />
        <scope attributes="protected" doc="&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="313" lineend="316" name="printRisky" signature="printRisky(PHPUnit_Framework_TestResult $result)" />
        <scope attributes="protected" doc="&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="323" lineend="326" name="printSkipped" signature="printSkipped(PHPUnit_Framework_TestResult $result)" />
        <scope attributes="protected" ilk="function" line="328" lineend="331" name="printHeader" signature="printHeader()" />
        <scope attributes="protected" doc="&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;" ilk="function" line="336" lineend="410" name="printFooter" signature="printFooter(PHPUnit_Framework_TestResult $result)" />
        <scope attributes="public" doc="&#xA;" ilk="function" line="414" lineend="417" name="printWaitPrompt" signature="printWaitPrompt()" />
        <scope attributes="public" doc="&#xA;An error occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="426" lineend="430" name="addError" signature="addError(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A failure occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_assertionfailederror&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="439" lineend="443" name="addFailure" signature="addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, float $time)" />
        <scope attributes="public" doc="&#xA;A warning occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_warning&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 5.1.0&#xA;" ilk="function" line="454" lineend="458" name="addWarning" signature="addWarning(PHPUnit_Framework_Test $test, PHPUnit_Framework_Warning $e, float $time)" />
        <scope attributes="public" doc="&#xA;Incomplete test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="467" lineend="471" name="addIncompleteTest" signature="addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Risky test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="482" lineend="486" name="addRiskyTest" signature="addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Skipped test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="497" lineend="501" name="addSkippedTest" signature="addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A testsuite started.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since Method available since Release 2.2.0&#xA;" ilk="function" line="510" lineend="517" name="startTestSuite" signature="startTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A testsuite ended.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since Method available since Release 2.2.0&#xA;" ilk="function" line="526" lineend="528" name="endTestSuite" signature="endTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test started.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="535" lineend="545" name="startTest" signature="startTest(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;A test ended.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="553" lineend="572" name="endTest" signature="endTest(PHPUnit_Framework_Test $test, float $time)" />
        <scope attributes="protected" doc="&#xA;&lt;string&gt; $progress  - &#xA;" ilk="function" line="577" lineend="604" name="writeProgress" signature="writeProgress(string $progress)" />
        <scope attributes="protected" ilk="function" line="606" lineend="610" name="writeNewLine" signature="writeNewLine()" />
        <scope attributes="protected" doc="&#xA;Formats a buffer with a specified ANSI color sequence if colors are&#xA;enabled.&#xA;&lt;string&gt; $color  - &#xA;&lt;string&gt; $buffer  - &#xA;Returns string &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="623" lineend="647" name="formatWithColor" returns="string" signature="string formatWithColor(string $color, string $buffer)" />
        <scope attributes="protected" doc="&#xA;Writes a buffer out with a color sequence if colors are enabled.&#xA;&lt;string&gt; $color  - &#xA;&lt;string&gt; $buffer  - &#xA;&lt;bool&gt; $lf  - &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="658" lineend="665" name="writeWithColor" signature="writeWithColor(string $color, string $buffer, bool $lf = true)" />
        <scope attributes="protected" doc="&#xA;Writes progress with a color sequence if colors are enabled.&#xA;&lt;string&gt; $color  - &#xA;&lt;string&gt; $buffer  - &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="675" lineend="679" name="writeProgressWithColor" signature="writeProgressWithColor(string $color, string $buffer)" />
        <scope attributes="private" doc="&#xA;&lt;int&gt; $count  - &#xA;&lt;string&gt; $name  - &#xA;&lt;string&gt; $color  - &#xA;&lt;bool&gt; $always  - &#xA;Since Method available since Release 4.6.5&#xA;" ilk="function" line="689" lineend="707" name="writeCountString" signature="writeCountString(int $count, string $name, string $color, bool $always = false)" />
        <variable attributes="static" citdl="boolean" line="691" name="first" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="TestRunner.php">
    <scope ilk="blob" lang="PHP" name="TestRunner.php" src="phpunit-5.5.0/src/TextUI/TestRunner.php">
      <import line="11" module="SebastianBergmann\CodeCoverage" symbol="CodeCoverage" />
      <import alias="CodeCoverageException" line="12" module="SebastianBergmann\CodeCoverage" symbol="Exception" />
      <import alias="CodeCoverageFilter" line="13" module="SebastianBergmann\CodeCoverage" symbol="Filter" />
      <import alias="CloverReport" line="14" module="SebastianBergmann\CodeCoverage\Report" symbol="Clover" />
      <import alias="Crap4jReport" line="15" module="SebastianBergmann\CodeCoverage\Report" symbol="Crap4j" />
      <import alias="HtmlReport" line="16" module="SebastianBergmann\CodeCoverage\Report\Html" symbol="Facade" />
      <import alias="PhpReport" line="17" module="SebastianBergmann\CodeCoverage\Report" symbol="PHP" />
      <import alias="TextReport" line="18" module="SebastianBergmann\CodeCoverage\Report" symbol="Text" />
      <import alias="XmlReport" line="19" module="SebastianBergmann\CodeCoverage\Report\Xml" symbol="Facade" />
      <import line="20" module="SebastianBergmann\Environment" symbol="Runtime" />
      <import line="882" module="file" />
      <scope classrefs="PHPUnit_Runner_BaseTestRunner" doc="A TestRunner for the Command Line Interface (CLI)&#xA;PHP SAPI Module.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" line="28" lineend="1103" name="PHPUnit_TextUI_TestRunner">
        <variable citdl="int" ilk="constant" line="30" name="SUCCESS_EXIT" />
        <variable citdl="int" ilk="constant" line="31" name="FAILURE_EXIT" />
        <variable citdl="int" ilk="constant" line="32" name="EXCEPTION_EXIT" />
        <variable attributes="protected" citdl="CodeCoverageFilter" doc="@var CodeCoverageFilter" line="37" name="codeCoverageFilter" />
        <variable attributes="protected" citdl="PHPUnit_Runner_TestSuiteLoader" doc="@var PHPUnit_Runner_TestSuiteLoader" line="42" name="loader" />
        <variable attributes="protected" citdl="PHPUnit_TextUI_ResultPrinter" doc="@var PHPUnit_TextUI_ResultPrinter" line="47" name="printer" />
        <variable attributes="protected static" citdl="bool" doc="@var bool" line="52" name="versionStringPrinted" />
        <variable attributes="private" citdl="Runtime" doc="@var Runtime" line="57" name="runtime" />
        <variable attributes="private" citdl="bool" doc="@var bool" line="62" name="messagePrinted" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;phpunit_runner_testsuiteloader&gt; $loader  - &#xA;&lt;codecoveragefilter&gt; $filter  - &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="70" lineend="79" name="__construct" signature="__construct(PHPUnit_Runner_TestSuiteLoader $loader=null, CodeCoverageFilter $filter=null)" />
        <scope attributes="public static" doc="&#xA;&lt;phpunit_framework_test|reflectionclass&gt; $test  - &#xA;&lt;array&gt; $arguments  - &#xA;Returns phpunit_framework_testresult &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="89" lineend="107" name="run" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult run($test, array $arguments=[])" />
        <scope attributes="protected" doc="&#xA;Returns phpunit_framework_testresult &#xA;" ilk="function" line="112" lineend="115" name="createTestResult" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult createTestResult()" />
        <scope attributes="private" ilk="function" line="117" lineend="148" name="processSuiteFilters" signature="processSuiteFilters(PHPUnit_Framework_TestSuite $suite, array $arguments)" />
        <scope attributes="public" doc="&#xA;&lt;phpunit_framework_test&gt; $suite  - &#xA;&lt;array&gt; $arguments  - &#xA;&lt;bool&gt; $exit  - &#xA;Returns phpunit_framework_testresult &#xA;" ilk="function" line="157" lineend="618" name="doRun" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult doRun(PHPUnit_Framework_Test $suite, array $arguments=[], bool $exit = true)" />
        <scope attributes="public" doc="&#xA;&lt;phpunit_textui_resultprinter&gt; $resultPrinter  - &#xA;" ilk="function" line="623" lineend="626" name="setPrinter" signature="setPrinter(PHPUnit_TextUI_ResultPrinter $resultPrinter)" />
        <scope attributes="protected" doc="&#xA;Override to define how to handle a failed loading of&#xA;a test suite.&#xA;&lt;string&gt; $message  - &#xA;" ilk="function" line="634" lineend="638" name="runFailed" signature="runFailed(string $message)" />
        <scope attributes="protected" doc="&#xA;&lt;string&gt; $buffer  - &#xA;Since Method available since Release 3.1.0&#xA;" ilk="function" line="645" lineend="656" name="write" signature="write(string $buffer)" />
        <scope attributes="public" doc="&#xA;Returns the loader to be used.&#xA;Returns phpunit_runner_testsuiteloader &#xA;Since Method available since Release 2.2.0&#xA;" ilk="function" line="665" lineend="672" name="getLoader" returns="PHPUnit_Runner_TestSuiteLoader" signature="phpunit_runner_testsuiteloader getLoader()" />
        <scope attributes="protected" doc="&#xA;&lt;array&gt; $arguments  - &#xA;Since Method available since Release 3.2.1&#xA;" ilk="function" line="679" lineend="1079" name="handleConfiguration" signature="handleConfiguration(array &amp; $arguments)" />
        <scope attributes="private" doc="&#xA;&lt;string&gt; $type  - &#xA;&lt;string&gt; $message  - &#xA;Since Method available since Release 5.0.0&#xA;" ilk="function" line="1087" lineend="1102" name="writeMessage" signature="writeMessage(string $type, string $message)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="GroupTestSuite.php">
    <scope ilk="blob" lang="PHP" name="GroupTestSuite.php" src="phpunit-5.5.0/src/Extensions/GroupTestSuite.php">
      <scope classrefs="PHPUnit_Framework_TestSuite" doc="We have a TestSuite object A.&#xA;In TestSuite object A we have Tests tagged with @group.&#xA;We want a TestSuite object B that contains TestSuite objects C, D, ...&#xA;for the Tests tagged with @group C, @group D, ...&#xA;Running the Tests from TestSuite object B results in Tests tagged with both&#xA;&#xA;@group C and @group D in TestSuite object A to be run twice .&#xA;&#xA;&lt;code&gt;&#xA;$suite = new PHPUnit_Extensions_GroupTestSuite($A, array(&apos;C&apos;, &apos;D&apos;));&#xA;&lt;/code&gt;&#xA;&#xA;@since Class available since Release 3.3.0" ilk="class" line="26" lineend="60" name="PHPUnit_Extensions_GroupTestSuite">
        <scope attributes="public __ctor__" ilk="function" line="28" lineend="59" name="__construct" signature="__construct(PHPUnit_Framework_TestSuite $suite, array $groups)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="PhptTestCase.php">
    <scope ilk="blob" lang="PHP" name="PhptTestCase.php" src="phpunit-5.5.0/src/Extensions/PhptTestCase.php">
      <scope doc="Runner for PHPT test cases.&#xA;&#xA;@since Class available since Release 3.1.4" ilk="class" interfacerefs="PHPUnit_Framework_Test PHPUnit_Framework_SelfDescribing" line="16" lineend="448" name="PHPUnit_Extensions_PhptTestCase">
        <variable attributes="private" citdl="string" doc="@var string" line="21" name="filename" />
        <variable attributes="private" citdl="PHPUnit_Util_PHP" doc="@var PHPUnit_Util_PHP" line="26" name="phpUtil" />
        <variable attributes="private" citdl="array" doc="@var array" line="53" name="settings" />
        <scope attributes="public __ctor__" doc="&#xA;Constructs a test case with the given filename.&#xA;&lt;string&gt; $filename  - &#xA;&lt;phpunit_util_php&gt; $phpUtil  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="63" lineend="80" name="__construct" signature="__construct(string $filename, PHPUnit_Util_PHP $phpUtil = null)" />
        <scope attributes="public" doc="&#xA;Counts the number of test cases executed by run(TestResult result).&#xA;Returns int &#xA;" ilk="function" line="87" lineend="90" name="count" returns="int" signature="int count()" />
        <scope attributes="private" doc="&#xA;&lt;array&gt; $sections  - &#xA;&lt;string&gt; $output  - &#xA;" ilk="function" line="96" lineend="117" name="assertPhptExpectation" signature="assertPhptExpectation(array $sections, string $output)" />
        <scope attributes="public" doc="&#xA;Runs a test and collects its result in a TestResult instance.&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;Returns phpunit_framework_testresult &#xA;" ilk="function" line="126" lineend="237" name="run" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult run(PHPUnit_Framework_TestResult $result=null)" />
        <scope attributes="public" doc="&#xA;Returns the name of the test case.&#xA;Returns string &#xA;" ilk="function" line="244" lineend="247" name="getName" returns="string" signature="string getName()" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the test case.&#xA;Returns string &#xA;" ilk="function" line="254" lineend="257" name="toString" returns="string" signature="string toString()" />
        <scope attributes="private" doc="&#xA;Returns array &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="264" lineend="385" name="parse" returns="array" signature="array parse()" />
        <scope attributes="private" doc="&#xA;&lt;string&gt; $code  - &#xA;Returns string &#xA;" ilk="function" line="392" lineend="405" name="render" returns="string" signature="string render(string $code)" />
        <scope attributes="private" doc="&#xA;Returns array &#xA;" ilk="function" line="410" lineend="420" name="cleanupForCoverage" returns="array" signature="array cleanupForCoverage()" />
        <scope attributes="protected" doc="Parse --INI-- section key value pairs and return as array.&#xA;&#xA;@param string&#xA;&#xA;@return array" ilk="function" line="429" lineend="432" name="parseIniSection" returns="array" signature="array parseIniSection($content)" />
        <scope attributes="protected" ilk="function" line="434" lineend="447" name="parseEnvSection" returns="env" signature="parseEnvSection($content)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="PhptTestSuite.php">
    <scope ilk="blob" lang="PHP" name="PhptTestSuite.php" src="phpunit-5.5.0/src/Extensions/PhptTestSuite.php">
      <scope classrefs="PHPUnit_Framework_TestSuite" doc="Suite for .phpt test cases.&#xA;&#xA;@since Class available since Release 3.1.4" ilk="class" line="16" lineend="40" name="PHPUnit_Extensions_PhptTestSuite">
        <scope attributes="public __ctor__" doc="&#xA;Constructs a new TestSuite for .phpt test cases.&#xA;&lt;string&gt; $directory  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="25" lineend="39" name="__construct" signature="__construct(string $directory)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="RepeatedTest.php">
    <scope ilk="blob" lang="PHP" name="RepeatedTest.php" src="phpunit-5.5.0/src/Extensions/RepeatedTest.php">
      <scope classrefs="PHPUnit_Extensions_TestDecorator" doc="A Decorator that runs a test repeatedly.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" line="16" lineend="90" name="PHPUnit_Extensions_RepeatedTest">
        <variable attributes="protected" citdl="bool" doc="@var bool" line="21" name="processIsolation" />
        <variable attributes="protected" citdl="int" doc="@var int" line="26" name="timesRepeat" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;int&gt; $timesRepeat  - &#xA;&lt;bool&gt; $processIsolation  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="35" lineend="50" name="__construct" signature="__construct(PHPUnit_Framework_Test $test, int $timesRepeat = 1, bool $processIsolation = false)" />
        <scope attributes="public" doc="&#xA;Counts the number of test cases that&#xA;will be run by this test.&#xA;Returns int &#xA;" ilk="function" line="58" lineend="61" name="count" returns="int" signature="int count()" />
        <scope attributes="public" doc="&#xA;Runs the decorated test and collects the&#xA;result in a TestResult.&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;Returns phpunit_framework_testresult &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="73" lineend="89" name="run" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult run(PHPUnit_Framework_TestResult $result=null)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="TestDecorator.php">
    <scope ilk="blob" lang="PHP" name="TestDecorator.php" src="phpunit-5.5.0/src/Extensions/TestDecorator.php">
      <scope classrefs="PHPUnit_Framework_Assert" doc="A Decorator for Tests.&#xA;&#xA;Use TestDecorator as the base class for defining new&#xA;test decorators. Test decorator subclasses can be introduced&#xA;to add behaviour before or after a test is run.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" interfacerefs="PHPUnit_Framework_Test PHPUnit_Framework_SelfDescribing" line="20" lineend="109" name="PHPUnit_Extensions_TestDecorator">
        <variable attributes="protected" citdl="test" doc="The Test to be decorated.&#xA;&#xA;@var object" line="27" name="test" />
        <scope attributes="public __ctor__" doc="&#xA;Constructor.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="34" lineend="37" name="__construct" signature="__construct(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;Returns a string representation of the test.&#xA;Returns string &#xA;" ilk="function" line="44" lineend="47" name="toString" returns="string" signature="string toString()" />
        <scope attributes="public" doc="&#xA;Runs the test and collects the&#xA;result in a TestResult.&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;" ilk="function" line="55" lineend="58" name="basicRun" signature="basicRun(PHPUnit_Framework_TestResult $result)" />
        <scope attributes="public" doc="&#xA;Counts the number of test cases that&#xA;will be run by this test.&#xA;Returns int &#xA;" ilk="function" line="66" lineend="69" name="count" returns="int" signature="int count()" />
        <scope attributes="protected" doc="&#xA;Creates a default TestResult object.&#xA;Returns phpunit_framework_testresult &#xA;" ilk="function" line="76" lineend="79" name="createResult" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult createResult()" />
        <scope attributes="public" doc="&#xA;Returns the test to be run.&#xA;Returns phpunit_framework_test &#xA;" ilk="function" line="86" lineend="89" name="getTest" returns="PHPUnit_Framework_Test" signature="phpunit_framework_test getTest()" />
        <scope attributes="public" doc="&#xA;Runs the decorated test and collects the&#xA;result in a TestResult.&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;Returns phpunit_framework_testresult &#xA;" ilk="function" line="99" lineend="108" name="run" returns="PHPUnit_Framework_TestResult" signature="phpunit_framework_testresult run(PHPUnit_Framework_TestResult $result=null)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="TicketListener.php">
    <scope ilk="blob" lang="PHP" name="TicketListener.php" src="phpunit-5.5.0/src/Extensions/TicketListener.php">
      <scope attributes="abstract" doc="Base class for test listeners that interact with an issue tracker.&#xA;&#xA;@since Class available since Release 3.4.0" ilk="class" interfacerefs="PHPUnit_Framework_TestListener" line="16" lineend="204" name="PHPUnit_Extensions_TicketListener">
        <variable attributes="protected" citdl="array" doc="@var array" line="21" name="ticketCounts" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="26" name="ran" />
        <scope attributes="public" doc="&#xA;An error occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="35" lineend="37" name="addError" signature="addError(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A failure occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_assertionfailederror&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="46" lineend="48" name="addFailure" signature="addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, float $time)" />
        <scope attributes="public" doc="&#xA;Incomplete test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="57" lineend="59" name="addIncompleteTest" signature="addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Risky test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="70" lineend="72" name="addRiskyTest" signature="addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Skipped test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="83" lineend="85" name="addSkippedTest" signature="addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A test suite started.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since Method available since Release 2.2.0&#xA;" ilk="function" line="94" lineend="96" name="startTestSuite" signature="startTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test suite ended.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since Method available since Release 2.2.0&#xA;" ilk="function" line="105" lineend="107" name="endTestSuite" signature="endTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test started.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="114" lineend="130" name="startTest" signature="startTest(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;A test ended.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="138" lineend="188" name="endTest" signature="endTest(PHPUnit_Framework_Test $test, float $time)" />
        <scope attributes="abstract protected" doc="&#xA;&lt;mixed&gt; $ticketId  - &#xA;Returns mixed &#xA;" ilk="function" line="195" lineend="195" name="getTicketInfo" returns="mixed" signature="mixed getTicketInfo(mixed $ticketId = null)" />
        <scope attributes="abstract protected" doc="&#xA;&lt;string&gt; $ticketId  - &#xA;&lt;string&gt; $newStatus  - &#xA;&lt;string&gt; $message  - &#xA;&lt;string&gt; $resolution  - &#xA;" ilk="function" line="203" lineend="203" name="updateTicket" signature="updateTicket(string $ticketId, string $newStatus, string $message, string $resolution)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645204" path="Blacklist.php">
    <scope ilk="blob" lang="PHP" name="Blacklist.php" src="phpunit-5.5.0/src/Util/Blacklist.php">
      <scope doc="Utility class for blacklisting PHPUnit&apos;s own source code files.&#xA;&#xA;@since Class available since Release 4.0.0" ilk="class" line="16" lineend="115" name="PHPUnit_Util_Blacklist">
        <variable attributes="public static" citdl="array" doc="@var array" line="44" name="blacklistedClassNames" />
        <variable attributes="private static" citdl="array" doc="@var array" line="49" name="directories" />
        <scope attributes="public" doc="&#xA;Returns array &#xA;Since Method available since Release 4.1.0&#xA;" ilk="function" line="56" lineend="61" name="getBlacklistedDirectories" returns="array" signature="array getBlacklistedDirectories()" />
        <scope attributes="public" doc="&#xA;&lt;string&gt; $file  - &#xA;Returns bool &#xA;" ilk="function" line="68" lineend="83" name="isBlacklisted" returns="bool" signature="bool isBlacklisted(string $file)" />
        <scope attributes="private" ilk="function" line="85" lineend="114" name="initialize" signature="initialize()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="Configuration.php">
    <scope ilk="blob" lang="PHP" name="Configuration.php" src="phpunit-5.5.0/src/Util/Configuration.php">
      <scope doc="Wrapper for the PHPUnit XML configuration file.&#xA;&#xA;Example XML configuration file:&#xA;&lt;code&gt;&#xA;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&#xA;&#xA;&lt;phpunit backupGlobals=&quot;true&quot;&#xA;         backupStaticAttributes=&quot;false&quot;&#xA;         bootstrap=&quot;/path/to/bootstrap.php&quot;&#xA;         cacheTokens=&quot;false&quot;&#xA;         columns=&quot;80&quot;&#xA;         colors=&quot;false&quot;&#xA;         stderr=&quot;false&quot;&#xA;         convertErrorsToExceptions=&quot;true&quot;&#xA;         convertNoticesToExceptions=&quot;true&quot;&#xA;         convertWarningsToExceptions=&quot;true&quot;&#xA;         forceCoversAnnotation=&quot;false&quot;&#xA;         printerClass=&quot;PHPUnit_TextUI_ResultPrinter&quot;&#xA;         processIsolation=&quot;false&quot;&#xA;         stopOnError=&quot;false&quot;&#xA;         stopOnFailure=&quot;false&quot;&#xA;         stopOnWarning=&quot;false&quot;&#xA;         stopOnIncomplete=&quot;false&quot;&#xA;         stopOnRisky=&quot;false&quot;&#xA;         stopOnSkipped=&quot;false&quot;&#xA;         failOnWarning=&quot;false&quot;&#xA;         failOnRisky=&quot;false&quot;&#xA;         testSuiteLoaderClass=&quot;PHPUnit_Runner_StandardTestSuiteLoader&quot;&#xA;         beStrictAboutChangesToGlobalState=&quot;false&quot;&#xA;         beStrictAboutCoversAnnotation=&quot;false&quot;&#xA;         beStrictAboutOutputDuringTests=&quot;false&quot;&#xA;         beStrictAboutResourceUsageDuringSmallTests=&quot;false&quot;&#xA;         beStrictAboutTestsThatDoNotTestAnything=&quot;false&quot;&#xA;         beStrictAboutTodoAnnotatedTests=&quot;false&quot;&#xA;         checkForUnintentionallyCoveredCode=&quot;false&quot;&#xA;         enforceTimeLimit=&quot;false&quot;&#xA;         timeoutForSmallTests=&quot;1&quot;&#xA;         timeoutForMediumTests=&quot;10&quot;&#xA;         timeoutForLargeTests=&quot;60&quot;&#xA;         verbose=&quot;false&quot;&#xA;         reverseDefectList=&quot;false&quot;&#xA;         registerMockObjectsFromTestArgumentsRecursively=&quot;false&quot;&gt;&#xA;  &lt;testsuites&gt;&#xA;    &lt;testsuite name=&quot;My Test Suite&quot;&gt;&#xA;      &lt;directory suffix=&quot;Test.php&quot; phpVersion=&quot;5.3.0&quot; phpVersionOperator=&quot;&gt;=&quot;&gt;/path/to/files&lt;/directory&gt;&#xA;      &lt;file phpVersion=&quot;5.3.0&quot; phpVersionOperator=&quot;&gt;=&quot;&gt;/path/to/MyTest.php&lt;/file&gt;&#xA;      &lt;exclude&gt;/path/to/files/exclude&lt;/exclude&gt;&#xA;    &lt;/testsuite&gt;&#xA;  &lt;/testsuites&gt;&#xA;&#xA;  &lt;groups&gt;&#xA;    &lt;include&gt;&#xA;      &lt;group&gt;name&lt;/group&gt;&#xA;    &lt;/include&gt;&#xA;    &lt;exclude&gt;&#xA;      &lt;group&gt;name&lt;/group&gt;&#xA;    &lt;/exclude&gt;&#xA;  &lt;/groups&gt;&#xA;&#xA;  &lt;testdoxGroups&gt;&#xA;    &lt;include&gt;&#xA;      &lt;group&gt;name&lt;/group&gt;&#xA;    &lt;/include&gt;&#xA;    &lt;exclude&gt;&#xA;      &lt;group&gt;name&lt;/group&gt;&#xA;    &lt;/exclude&gt;&#xA;  &lt;/testdoxGroups&gt;&#xA;&#xA;  &lt;filter&gt;&#xA;    &lt;whitelist addUncoveredFilesFromWhitelist=&quot;true&quot;&#xA;               processUncoveredFilesFromWhitelist=&quot;false&quot;&gt;&#xA;      &lt;directory suffix=&quot;.php&quot;&gt;/path/to/files&lt;/directory&gt;&#xA;      &lt;file&gt;/path/to/file&lt;/file&gt;&#xA;      &lt;exclude&gt;&#xA;        &lt;directory suffix=&quot;.php&quot;&gt;/path/to/files&lt;/directory&gt;&#xA;        &lt;file&gt;/path/to/file&lt;/file&gt;&#xA;      &lt;/exclude&gt;&#xA;    &lt;/whitelist&gt;&#xA;  &lt;/filter&gt;&#xA;&#xA;  &lt;listeners&gt;&#xA;    &lt;listener class=&quot;MyListener&quot; file=&quot;/optional/path/to/MyListener.php&quot;&gt;&#xA;      &lt;arguments&gt;&#xA;        &lt;array&gt;&#xA;          &lt;element key=&quot;0&quot;&gt;&#xA;            &lt;string&gt;Sebastian&lt;/string&gt;&#xA;          &lt;/element&gt;&#xA;        &lt;/array&gt;&#xA;        &lt;integer&gt;22&lt;/integer&gt;&#xA;        &lt;string&gt;April&lt;/string&gt;&#xA;        &lt;double&gt;19.78&lt;/double&gt;&#xA;        &lt;null/&gt;&#xA;        &lt;object class=&quot;stdClass&quot;/&gt;&#xA;        &lt;file&gt;MyRelativeFile.php&lt;/file&gt;&#xA;        &lt;directory&gt;MyRelativeDir&lt;/directory&gt;&#xA;      &lt;/arguments&gt;&#xA;    &lt;/listener&gt;&#xA;  &lt;/listeners&gt;&#xA;&#xA;  &lt;logging&gt;&#xA;    &lt;log type=&quot;coverage-html&quot; target=&quot;/tmp/report&quot; lowUpperBound=&quot;50&quot; highLowerBound=&quot;90&quot;/&gt;&#xA;    &lt;log type=&quot;coverage-clover&quot; target=&quot;/tmp/clover.xml&quot;/&gt;&#xA;    &lt;log type=&quot;coverage-crap4j&quot; target=&quot;/tmp/crap.xml&quot; threshold=&quot;30&quot;/&gt;&#xA;    &lt;log type=&quot;json&quot; target=&quot;/tmp/logfile.json&quot;/&gt;&#xA;    &lt;log type=&quot;plain&quot; target=&quot;/tmp/logfile.txt&quot;/&gt;&#xA;    &lt;log type=&quot;tap&quot; target=&quot;/tmp/logfile.tap&quot;/&gt;&#xA;    &lt;log type=&quot;teamcity&quot; target=&quot;/tmp/logfile.txt&quot;/&gt;&#xA;    &lt;log type=&quot;junit&quot; target=&quot;/tmp/logfile.xml&quot;/&gt;&#xA;    &lt;log type=&quot;testdox-html&quot; target=&quot;/tmp/testdox.html&quot;/&gt;&#xA;    &lt;log type=&quot;testdox-text&quot; target=&quot;/tmp/testdox.txt&quot;/&gt;&#xA;    &lt;log type=&quot;testdox-xml&quot; target=&quot;/tmp/testdox.xml&quot;/&gt;&#xA;  &lt;/logging&gt;&#xA;&#xA;  &lt;php&gt;&#xA;    &lt;includePath&gt;.&lt;/includePath&gt;&#xA;    &lt;ini name=&quot;foo&quot; value=&quot;bar&quot;/&gt;&#xA;    &lt;const name=&quot;foo&quot; value=&quot;bar&quot;/&gt;&#xA;    &lt;var name=&quot;foo&quot; value=&quot;bar&quot;/&gt;&#xA;    &lt;env name=&quot;foo&quot; value=&quot;bar&quot;/&gt;&#xA;    &lt;post name=&quot;foo&quot; value=&quot;bar&quot;/&gt;&#xA;    &lt;get name=&quot;foo&quot; value=&quot;bar&quot;/&gt;&#xA;    &lt;cookie name=&quot;foo&quot; value=&quot;bar&quot;/&gt;&#xA;    &lt;server name=&quot;foo&quot; value=&quot;bar&quot;/&gt;&#xA;    &lt;files name=&quot;foo&quot; value=&quot;bar&quot;/&gt;&#xA;    &lt;request name=&quot;foo&quot; value=&quot;bar&quot;/&gt;&#xA;  &lt;/php&gt;&#xA;&lt;/phpunit&gt;&#xA;&lt;/code&gt;&#xA;&#xA;@since Class available since Release 3.2.0" ilk="class" line="143" lineend="1156" name="PHPUnit_Util_Configuration">
        <variable attributes="private static" line="145" name="instances" />
        <variable attributes="protected" citdl="PHPUnit_Util_XML.loadFile()" line="147" name="document" />
        <variable attributes="protected" citdl="DOMXPath" line="148" name="xpath" />
        <variable attributes="protected" citdl="filename" line="149" name="filename" />
        <scope attributes="protected __ctor__" doc="&#xA;Loads a PHPUnit configuration file.&#xA;&lt;string&gt; $filename  - &#xA;" ilk="function" line="156" lineend="161" name="__construct" signature="__construct(string $filename)" />
        <scope attributes="final private" doc="&#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="166" lineend="168" name="__clone" signature="__clone()" />
        <scope attributes="public static" doc="&#xA;Returns a PHPUnit configuration object.&#xA;&lt;string&gt; $filename  - &#xA;Returns phpunit_util_configuration &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="179" lineend="197" name="getInstance" returns="PHPUnit_Util_Configuration" signature="phpunit_util_configuration getInstance(string $filename)" />
        <scope attributes="public" doc="&#xA;Returns the realpath to the configuration file.&#xA;Returns string &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="206" lineend="209" name="getFilename" returns="string" signature="string getFilename()" />
        <scope attributes="public" doc="&#xA;Returns the configuration for SUT filtering.&#xA;Returns array &#xA;Since Method available since Release 3.2.1&#xA;" ilk="function" line="218" lineend="267" name="getFilterConfiguration" returns="array" signature="array getFilterConfiguration()" />
        <scope attributes="public" doc="&#xA;Returns the configuration for groups.&#xA;Returns array &#xA;Since Method available since Release 3.2.1&#xA;" ilk="function" line="276" lineend="279" name="getGroupConfiguration" returns="array" signature="array getGroupConfiguration()" />
        <scope attributes="public" doc="&#xA;Returns the configuration for testdox groups.&#xA;Returns array &#xA;Since Method available since Release 5.4.0&#xA;" ilk="function" line="288" lineend="291" name="getTestdoxGroupConfiguration" returns="array" signature="array getTestdoxGroupConfiguration()" />
        <scope attributes="private" doc="&#xA;&lt;string&gt; $root  - &#xA;Returns array &#xA;" ilk="function" line="298" lineend="314" name="parseGroupConfiguration" returns="array" signature="array parseGroupConfiguration(string $root)" />
        <scope attributes="public" doc="&#xA;Returns the configuration for listeners.&#xA;Returns array &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="323" lineend="362" name="getListenerConfiguration" returns="array" signature="array getListenerConfiguration()" />
        <scope attributes="public" doc="&#xA;Returns the logging configuration.&#xA;Returns array &#xA;" ilk="function" line="369" lineend="423" name="getLoggingConfiguration" returns="array" signature="array getLoggingConfiguration()" />
        <scope attributes="public" doc="&#xA;Returns the PHP configuration.&#xA;Returns array &#xA;Since Method available since Release 3.2.1&#xA;" ilk="function" line="432" lineend="479" name="getPHPConfiguration" returns="array" signature="array getPHPConfiguration()" />
        <scope attributes="public" doc="&#xA;Handles the PHP configuration.&#xA;Since Method available since Release 3.2.20&#xA;" ilk="function" line="486" lineend="542" name="handlePHPConfiguration" signature="handlePHPConfiguration()" />
        <scope attributes="public" doc="&#xA;Returns the PHPUnit configuration.&#xA;Returns array &#xA;Since Method available since Release 3.2.14&#xA;" ilk="function" line="551" lineend="834" name="getPHPUnitConfiguration" returns="array" signature="array getPHPUnitConfiguration()" />
        <scope attributes="public" doc="&#xA;Returns the test suite configuration.&#xA;Returns phpunit_framework_testsuite &#xA;Since Method available since Release 3.2.1&#xA;" ilk="function" line="843" lineend="866" name="getTestSuiteConfiguration" returns="PHPUnit_Framework_TestSuite" signature="phpunit_framework_testsuite getTestSuiteConfiguration($testSuiteFilter = null)" />
        <scope attributes="public" doc="&#xA;Returns the test suite names from the configuration.&#xA;Returns array &#xA;" ilk="function" line="873" lineend="882" name="getTestSuiteNames" returns="array" signature="array getTestSuiteNames()" />
        <scope attributes="protected" doc="&#xA;&lt;domelement&gt; $testSuiteNode  - &#xA;Returns phpunit_framework_testsuite &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="891" lineend="1002" name="getTestSuite" returns="PHPUnit_Framework_TestSuite" signature="phpunit_framework_testsuite getTestSuite(DOMElement $testSuiteNode, $testSuiteFilter = null)" />
        <scope attributes="protected" doc="&#xA;&lt;string&gt; $value  - &#xA;&lt;bool&gt; $default  - &#xA;Returns bool &#xA;Since Method available since Release 3.2.3&#xA;" ilk="function" line="1012" lineend="1021" name="getBoolean" returns="bool" signature="bool getBoolean(string $value, bool $default)" />
        <scope attributes="protected" doc="&#xA;&lt;string&gt; $value  - &#xA;&lt;bool&gt; $default  - &#xA;Returns bool &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="1031" lineend="1038" name="getInteger" returns="bool" signature="bool getInteger(string $value, bool $default)" />
        <scope attributes="protected" doc="&#xA;&lt;string&gt; $query  - &#xA;Returns array &#xA;Since Method available since Release 3.2.3&#xA;" ilk="function" line="1047" lineend="1085" name="readFilterDirectories" returns="array" signature="array readFilterDirectories(string $query)" />
        <scope attributes="protected" doc="&#xA;&lt;string&gt; $query  - &#xA;Returns array &#xA;Since Method available since Release 3.2.3&#xA;" ilk="function" line="1094" lineend="1107" name="readFilterFiles" returns="array" signature="array readFilterFiles(string $query)" />
        <scope attributes="protected" doc="&#xA;&lt;string&gt; $path  - &#xA;&lt;bool&gt; $useIncludePath  - &#xA;Returns string &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="1117" lineend="1155" name="toAbsolutePath" returns="string" signature="string toAbsolutePath(string $path, bool $useIncludePath = false)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="ConfigurationGenerator.php">
    <scope ilk="blob" lang="PHP" name="ConfigurationGenerator.php" src="phpunit-5.5.0/src/Util/ConfigurationGenerator.php">
      <scope doc="@since Class available since Release 5.3.0" ilk="class" line="14" lineend="69" name="PHPUnit_Util_ConfigurationGenerator">
        <scope attributes="public" doc="&#xA;&lt;string&gt; $phpunitVersion  - &#xA;&lt;string&gt; $bootstrapScript  - &#xA;&lt;string&gt; $testsDirectory  - &#xA;&lt;string&gt; $srcDirectory  - &#xA;Returns string &#xA;" ilk="function" line="51" lineend="68" name="generateDefaultConfiguration" returns="string" signature="string generateDefaultConfiguration(string $phpunitVersion, string $bootstrapScript, string $testsDirectory, string $srcDirectory)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="ErrorHandler.php">
    <scope ilk="blob" lang="PHP" name="ErrorHandler.php" src="phpunit-5.5.0/src/Util/ErrorHandler.php">
      <import line="14" module="/Framework/Error.php" />
      <import line="15" module="/Framework/Error/Notice.php" />
      <import line="16" module="/Framework/Error/Warning.php" />
      <import line="17" module="/Framework/Error/Deprecated.php" />
      <scope doc="Error handler that converts PHP errors and warnings to exceptions.&#xA;&#xA;@since Class available since Release 3.3.0" ilk="class" line="24" lineend="117" name="PHPUnit_Util_ErrorHandler">
        <variable attributes="protected static" line="26" name="errorStack" />
        <scope attributes="public static" doc="&#xA;Returns the error stack.&#xA;Returns array &#xA;" ilk="function" line="33" lineend="36" name="getErrorStack" returns="array" signature="array getErrorStack()" />
        <scope attributes="public static" doc="&#xA;&lt;int&gt; $errno  - &#xA;&lt;string&gt; $errstr  - &#xA;&lt;string&gt; $errfile  - &#xA;&lt;int&gt; $errline  - &#xA;Throws PHPUnit_Framework_Error&#xA;" ilk="function" line="46" lineend="86" name="handleError" returns="boolean" signature="handleError(int $errno, string $errstr, string $errfile, int $errline)" />
        <variable line="52" name="errfile" />
        <variable line="52" name="errstr" />
        <scope attributes="public static" doc="&#xA;Registers an error handler and returns a function that will restore&#xA;the previous handler when invoked&#xA;&lt;int&gt; $severity  - PHP predefined error constant&#xA;Throws Exception if event of specified severity is emitted&#xA;" ilk="function" line="96" name="handleErrorOnce" returns="restore_error_handler()" signature="handleErrorOnce(int $severity = E_WARNING)" />
        <variable attributes="static" citdl="boolean" line="99" name="expired" />
        <scope ilk="function" line="107" lineend="113" name="(anonymous 1)" returns="boolean" signature="(anonymous 1)($errno, $errstr)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="Fileloader.php">
    <scope ilk="blob" lang="PHP" name="Fileloader.php" src="phpunit-5.5.0/src/Util/Fileloader.php">
      <scope doc="Utility methods to load PHP sourcefiles.&#xA;&#xA;@since Class available since Release 2.3.0" ilk="class" line="16" lineend="72" name="PHPUnit_Util_Fileloader">
        <scope attributes="public static" doc="&#xA;Checks if a PHP sourcefile is readable.&#xA;The sourcefile is loaded through the load() method.&#xA;&lt;string&gt; $filename  - &#xA;Returns string &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="28" lineend="41" name="checkAndLoad" returns="string" signature="string checkAndLoad(string $filename)" />
        <scope attributes="public static" doc="&#xA;Loads a PHP sourcefile.&#xA;&lt;string&gt; $filename  - &#xA;Returns mixed &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="52" lineend="71" name="load" returns="mixed" signature="mixed load(string $filename)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="Filesystem.php">
    <scope ilk="blob" lang="PHP" name="Filesystem.php" src="phpunit-5.5.0/src/Util/Filesystem.php">
      <scope doc="Filesystem helpers.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="16" lineend="42" name="PHPUnit_Util_Filesystem">
        <variable attributes="protected static" citdl="array" doc="@var array" line="21" name="buffer" />
        <scope attributes="public static" doc="&#xA;Maps class names to source file names:&#xA;  - PEAR CS:   Foo_Bar_Baz -&gt; Foo/Bar/Baz.php&#xA;  - Namespace: Foo\Bar\Baz -&gt; Foo/Bar/Baz.php&#xA;&lt;string&gt; $className  - &#xA;Returns string &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="34" lineend="41" name="classNameToFilename" returns="string" signature="string classNameToFilename(string $className)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="Filter.php">
    <scope ilk="blob" lang="PHP" name="Filter.php" src="phpunit-5.5.0/src/Util/Filter.php">
      <scope doc="Utility class for code filtering.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" line="16" lineend="107" name="PHPUnit_Util_Filter">
        <scope attributes="public static" doc="&#xA;Filters stack frames from PHPUnit classes.&#xA;&lt;exception&gt; $e  - &#xA;&lt;bool&gt; $asString  - &#xA;Returns string &#xA;" ilk="function" line="26" lineend="85" name="getFilteredStacktrace" returns="string" signature="string getFilteredStacktrace(Exception $e, bool $asString = true)" />
        <scope attributes="private static" doc="&#xA;&lt;array&gt; $trace  - &#xA;&lt;string&gt; $file  - &#xA;&lt;int&gt; $line  - &#xA;Returns bool &#xA;Since Method available since Release 3.3.2&#xA;" ilk="function" line="96" lineend="106" name="frameExists" returns="bool" signature="bool frameExists(array $trace, string $file, int $line)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="Getopt.php">
    <scope ilk="blob" lang="PHP" name="Getopt.php" src="phpunit-5.5.0/src/Util/Getopt.php">
      <scope doc="Command-line options parsing class.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="16" lineend="163" name="PHPUnit_Util_Getopt">
        <scope attributes="public static" ilk="function" line="18" lineend="70" name="getopt" signature="getopt(array $args, $short_options, $long_options = null)" />
        <scope attributes="protected static" ilk="function" line="72" lineend="108" name="parseShortOption" signature="parseShortOption($arg, $short_options, &amp; $opts, &amp; $args)" />
        <scope attributes="protected static" ilk="function" line="110" lineend="162" name="parseLongOption" signature="parseLongOption($arg, $long_options, &amp; $opts, &amp; $args)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="GlobalState.php">
    <scope ilk="blob" lang="PHP" name="GlobalState.php" src="phpunit-5.5.0/src/Util/GlobalState.php">
      <scope doc="@since Class available since Release 3.4.0" ilk="class" line="14" lineend="192" name="PHPUnit_Util_GlobalState">
        <variable attributes="protected static" citdl="array" doc="@var array" line="27" name="superGlobalArrays" />
        <variable attributes="protected static" citdl="array" doc="@var array" line="39" name="superGlobalArraysLong" />
        <scope attributes="public static" ilk="function" line="41" lineend="44" name="getIncludedFilesAsString" signature="getIncludedFilesAsString()" />
        <scope attributes="public static" ilk="function" line="46" lineend="74" name="processIncludedFilesAsString" returns="result" signature="processIncludedFilesAsString(array $files)" />
        <scope attributes="public static" ilk="function" line="76" lineend="90" name="getIniSettingsAsString" returns="result" signature="getIniSettingsAsString()" />
        <scope attributes="public static" ilk="function" line="92" lineend="109" name="getConstantsAsString" returns="result" signature="getConstantsAsString()" />
        <scope attributes="public static" ilk="function" line="111" lineend="148" name="getGlobalsAsString" returns="result" signature="getGlobalsAsString()" />
        <scope attributes="protected static" ilk="function" line="150" lineend="160" name="getSuperGlobalArrays" returns="array_merge()" signature="getSuperGlobalArrays()" />
        <scope attributes="protected static" ilk="function" line="162" lineend="172" name="exportVariable" returns="var_export()" signature="exportVariable($variable)" />
        <scope attributes="protected static" ilk="function" line="174" lineend="191" name="arrayOnlyContainsScalars" returns="result" signature="arrayOnlyContainsScalars(array $array)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="InvalidArgumentHelper.php">
    <scope ilk="blob" lang="PHP" name="InvalidArgumentHelper.php" src="phpunit-5.5.0/src/Util/InvalidArgumentHelper.php">
      <scope doc="Factory for PHPUnit_Framework_Exception objects that are used to describe&#xA;invalid arguments passed to a function or method.&#xA;&#xA;@since Class available since Release 3.4.0" ilk="class" line="17" lineend="41" name="PHPUnit_Util_InvalidArgumentHelper">
        <scope attributes="public static" doc="&#xA;&lt;int&gt; $argument  - &#xA;&lt;string&gt; $type  - &#xA;&lt;mixed&gt; $value  - &#xA;Returns phpunit_framework_exception &#xA;" ilk="function" line="26" lineend="40" name="factory" returns="PHPUnit_Framework_Exception" signature="phpunit_framework_exception factory(int $argument, string $type, mixed $value = null)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="PHP.php">
    <scope ilk="blob" lang="PHP" name="PHP.php" src="phpunit-5.5.0/src/Util/PHP.php">
      <import line="11" module="SebastianBergmann\Environment" symbol="Runtime" />
      <scope attributes="abstract" doc="Utility methods for PHP sub-processes.&#xA;&#xA;@since Class available since Release 3.4.0" ilk="class" line="18" lineend="419" name="PHPUnit_Util_PHP">
        <variable attributes="protected" citdl="Runtime" doc="@var Runtime" line="23" name="runtime" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="28" name="stderrRedirection" />
        <variable attributes="protected" citdl="string" doc="@var string" line="33" name="stdin" />
        <variable attributes="protected" citdl="string" doc="@var string" line="38" name="args" />
        <variable attributes="protected" citdl="array" doc="@var array" line="43" name="env" />
        <variable attributes="protected" citdl="int" doc="@var int" line="48" name="timeout" />
        <scope attributes="public __ctor__" doc="&#xA;Creates internal Runtime instance.&#xA;" ilk="function" line="53" lineend="56" name="__construct" signature="__construct()" />
        <scope attributes="public" doc="&#xA;Defines if should use STDERR redirection or not.&#xA;Then $stderrRedirection is TRUE, STDERR is redirected to STDOUT.&#xA;Throws PHPUnit_Framework_Exception&#xA;&lt;bool&gt; $stderrRedirection  - &#xA;" ilk="function" line="67" lineend="74" name="setUseStderrRedirection" signature="setUseStderrRedirection(bool $stderrRedirection)" />
        <scope attributes="public" doc="&#xA;Returns TRUE if uses STDERR redirection or FALSE if not.&#xA;Returns bool &#xA;" ilk="function" line="81" lineend="84" name="useStderrRedirection" returns="bool" signature="bool useStderrRedirection()" />
        <scope attributes="public" doc="&#xA;Sets the input string to be sent via STDIN&#xA;&lt;string&gt; $stdin  - &#xA;" ilk="function" line="91" lineend="94" name="setStdin" signature="setStdin(string $stdin)" />
        <scope attributes="public" doc="&#xA;Returns the input string to be sent via STDIN&#xA;Returns string &#xA;" ilk="function" line="101" lineend="104" name="getStdin" returns="string" signature="string getStdin()" />
        <scope attributes="public" doc="&#xA;Sets the string of arguments to pass to the php job&#xA;&lt;string&gt; $args  - &#xA;" ilk="function" line="111" lineend="114" name="setArgs" signature="setArgs(string $args)" />
        <scope attributes="public" doc="&#xA;Returns the string of arguments to pass to the php job&#xA;Retrun string&#xA;" ilk="function" line="121" lineend="124" name="getArgs" returns="this.args" signature="getArgs()" />
        <scope attributes="public" doc="&#xA;Sets the array of environment variables to start the child process with&#xA;&lt;array&gt; $env  - &#xA;" ilk="function" line="131" lineend="134" name="setEnv" signature="setEnv(array $env)" />
        <scope attributes="public" doc="&#xA;Returns the array of environment variables to start the child process with&#xA;Returns array &#xA;" ilk="function" line="141" lineend="144" name="getEnv" returns="array" signature="array getEnv()" />
        <scope attributes="public" doc="&#xA;Sets the amount of seconds to wait before timing out&#xA;&lt;int&gt; $timeout  - &#xA;" ilk="function" line="151" lineend="154" name="setTimeout" signature="setTimeout(int $timeout)" />
        <scope attributes="public" doc="&#xA;Returns the amount of seconds to wait before timing out&#xA;Returns int &#xA;" ilk="function" line="161" lineend="164" name="getTimeout" returns="int" signature="int getTimeout()" />
        <scope attributes="public static" doc="&#xA;Returns phpunit_util_php &#xA;Since Method available since Release 3.5.12&#xA;" ilk="function" line="171" lineend="178" name="factory" returns="PHPUnit_Util_PHP" signature="phpunit_util_php factory()" />
        <scope attributes="public" doc="&#xA;Runs a single test in a separate PHP process.&#xA;&lt;string&gt; $job  - &#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="189" lineend="201" name="runTestJob" signature="runTestJob(string $job, PHPUnit_Framework_Test $test, PHPUnit_Framework_TestResult $result)" />
        <scope attributes="public" doc="&#xA;Returns the command based into the configurations.&#xA;&lt;array&gt; $settings  - &#xA;&lt;string|null&gt; $file  - &#xA;Returns string &#xA;" ilk="function" line="211" lineend="237" name="getCommand" returns="string" signature="string getCommand(array $settings, $file = null)" />
        <scope attributes="abstract public" doc="&#xA;Runs a single job (PHP code) using a separate PHP process.&#xA;&lt;string&gt; $job  - &#xA;&lt;array&gt; $settings  - &#xA;Returns array &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="249" lineend="249" name="runJob" returns="array" signature="array runJob(string $job, array $settings=[])" />
        <scope attributes="protected" doc="&#xA;&lt;array&gt; $settings  - &#xA;Returns string &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="258" lineend="267" name="settingsToParameters" returns="string" signature="string settingsToParameters(array $settings)" />
        <scope attributes="private" doc="&#xA;Processes the TestResult object from an isolated process.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;&lt;string&gt; $stdout  - &#xA;&lt;string&gt; $stderr  - &#xA;Since Method available since Release 3.5.0&#xA;" ilk="function" line="279" name="processChildResult" signature="processChildResult(PHPUnit_Framework_Test $test, PHPUnit_Framework_TestResult $result, string $stdout, string $stderr)" />
        <scope ilk="function" line="290" lineend="292" name="(anonymous 1)" signature="(anonymous 1)($errno, $errstr, $errfile, $errline)" />
        <scope attributes="private" doc="&#xA;Gets the thrown exception from a PHPUnit_Framework_TestFailure.&#xA;&lt;phpunit_framework_testfailure&gt; $error  - &#xA;Returns exception &#xA;Since Method available since Release 3.6.0&#xA;See    https://github.com/sebastianbergmann/phpunit/issues/74&#xA;" ilk="function" line="393" lineend="418" name="getException" returns="Exception" signature="exception getException(PHPUnit_Framework_TestFailure $error)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="Printer.php">
    <scope ilk="blob" lang="PHP" name="Printer.php" src="phpunit-5.5.0/src/Util/Printer.php">
      <scope doc="Utility class that can print to STDOUT or write to a file.&#xA;&#xA;@since Class available since Release 2.0.0" ilk="class" line="16" lineend="172" name="PHPUnit_Util_Printer">
        <variable attributes="protected" citdl="bool" doc="If true, flush output after every write.&#xA;&#xA;@var bool" line="23" name="autoFlush" />
        <variable attributes="protected" citdl="resource" doc="@var resource" line="28" name="out" />
        <variable attributes="protected" citdl="string" doc="@var string" line="33" name="outTarget" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="38" name="printsHTML" />
        <scope attributes="public __ctor__" doc="&#xA;Constructor.&#xA;&lt;mixed&gt; $out  - &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="47" lineend="73" name="__construct" signature="__construct(mixed $out = null)" />
        <scope attributes="public" doc="&#xA;Flush buffer, optionally tidy up HTML, and close output if it&apos;s not to a php stream&#xA;" ilk="function" line="78" lineend="98" name="flush" signature="flush()" />
        <scope attributes="public" doc="&#xA;Performs a safe, incremental flush.&#xA;Do not confuse this function with the flush() function of this class,&#xA;since the flush() function may close the file being written to, rendering&#xA;the current object no longer usable.&#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="109" lineend="116" name="incrementalFlush" signature="incrementalFlush()" />
        <scope attributes="public" doc="&#xA;&lt;string&gt; $buffer  - &#xA;" ilk="function" line="121" lineend="140" name="write" signature="write(string $buffer)" />
        <scope attributes="public" doc="&#xA;Check auto-flush mode.&#xA;Returns bool &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="149" lineend="152" name="getAutoFlush" returns="bool" signature="bool getAutoFlush()" />
        <scope attributes="public" doc="&#xA;Set auto-flushing mode.&#xA;If set, *incremental* flushes will be done after each write. This should&#xA;not be confused with the different effects of this class&apos; flush() method.&#xA;&lt;bool&gt; $autoFlush  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="164" lineend="171" name="setAutoFlush" signature="setAutoFlush(bool $autoFlush)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="Regex.php">
    <scope ilk="blob" lang="PHP" name="Regex.php" src="phpunit-5.5.0/src/Util/Regex.php">
      <scope doc="Error handler that converts PHP errors and warnings to exceptions.&#xA;&#xA;@since Class available since Release 4.2.0" ilk="class" line="16" lineend="26" name="PHPUnit_Util_Regex">
        <scope attributes="public static" ilk="function" line="18" lineend="25" name="pregMatchSafe" returns="match" signature="pregMatchSafe($pattern, $subject, $matches = null, $flags = 0, $offset = 0)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="String.php">
    <scope ilk="blob" lang="PHP" name="String.php" src="phpunit-5.5.0/src/Util/String.php">
      <scope doc="String helpers.&#xA;&#xA;@since Class available since Release 3.6.0" ilk="class" line="16" lineend="71" name="PHPUnit_Util_String">
        <scope attributes="public static" doc="&#xA;Converts a string to UTF-8 encoding.&#xA;&lt;string&gt; $string  - &#xA;Returns string &#xA;" ilk="function" line="25" lineend="36" name="convertToUtf8" returns="string" signature="string convertToUtf8(string $string)" />
        <scope attributes="protected static" doc="&#xA;Checks a string for UTF-8 encoding.&#xA;&lt;string&gt; $string  - &#xA;Returns bool &#xA;" ilk="function" line="45" lineend="70" name="isUtf8" returns="bool" signature="bool isUtf8(string $string)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="Test.php">
    <scope ilk="blob" lang="PHP" name="Test.php" src="phpunit-5.5.0/src/Util/Test.php">
      <scope doc="Test helpers.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="16" lineend="1141" name="PHPUnit_Util_Test">
        <variable citdl="string" ilk="constant" line="18" name="REGEX_DATA_PROVIDER" />
        <variable citdl="string" ilk="constant" line="19" name="REGEX_TEST_WITH" />
        <variable citdl="string" ilk="constant" line="20" name="REGEX_EXPECTED_EXCEPTION" />
        <variable citdl="string" ilk="constant" line="21" name="REGEX_REQUIRES_VERSION" />
        <variable citdl="string" ilk="constant" line="22" name="REGEX_REQUIRES_OS" />
        <variable citdl="string" ilk="constant" line="23" name="REGEX_REQUIRES" />
        <variable ilk="constant" line="25" name="UNKNOWN" />
        <variable citdl="int" ilk="constant" line="26" name="SMALL" />
        <variable citdl="int" ilk="constant" line="27" name="MEDIUM" />
        <variable citdl="int" ilk="constant" line="28" name="LARGE" />
        <variable attributes="private static" line="30" name="annotationCache" />
        <variable attributes="private static" line="32" name="hookMethods" />
        <scope attributes="public static" doc="&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;bool&gt; $asString  - &#xA;Returns mixed &#xA;" ilk="function" line="40" lineend="59" name="describe" returns="mixed" signature="mixed describe(PHPUnit_Framework_Test $test, bool $asString = true)" />
        <scope attributes="public static" doc="&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array|bool &#xA;Throws PHPUnit_Framework_CodeCoverageException&#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="71" lineend="83" name="getLinesToBeCovered" returns="array" signature="array getLinesToBeCovered(string $className, string $methodName)" />
        <scope attributes="public static" doc="&#xA;Returns lines of code specified with the @uses annotation.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="95" lineend="98" name="getLinesToBeUsed" returns="array" signature="array getLinesToBeUsed(string $className, string $methodName)" />
        <scope attributes="private static" doc="&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;&lt;string&gt; $mode  - &#xA;Returns array &#xA;Throws PHPUnit_Framework_CodeCoverageException&#xA;Since Method available since Release 4.2.0&#xA;" ilk="function" line="111" lineend="162" name="getLinesToBeCoveredOrUsed" returns="array" signature="array getLinesToBeCoveredOrUsed(string $className, string $methodName, string $mode)" />
        <scope attributes="public static" doc="&#xA;Returns the requirements for a test.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="174" lineend="218" name="getRequirements" returns="array" signature="array getRequirements(string $className, string $methodName)" />
        <scope attributes="public static" doc="&#xA;Returns the missing requirements for a test.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array &#xA;Since Method available since Release 4.3.0&#xA;" ilk="function" line="230" lineend="289" name="getMissingRequirements" returns="array" signature="array getMissingRequirements(string $className, string $methodName)" />
        <scope attributes="public static" doc="&#xA;Returns the expected exception for a test.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array &#xA;Since Method available since Release 3.3.6&#xA;" ilk="function" line="301" lineend="352" name="getExpectedException" returns="array" signature="array getExpectedException(string $className, string $methodName)" />
        <scope attributes="private static" doc="&#xA;Parse annotation content to use constant/class constant values&#xA;Constants are specified using a starting &apos;@&apos;. For example: @ClassName::CONST_NAME&#xA;If the constant is not found the string is used as is to ensure maximum BC.&#xA;&lt;string&gt; $message  - &#xA;Returns string &#xA;" ilk="function" line="365" lineend="374" name="parseAnnotationContent" returns="string" signature="string parseAnnotationContent(string $message)" />
        <scope attributes="public static" doc="&#xA;Returns the provided data for a method.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array|iterator  - when a data provider is specified and exists&#xA;                       null           when no data provider is specified&#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.2.0&#xA;" ilk="function" line="389" lineend="421" name="getProvidedData" returns="array" signature="array getProvidedData(string $className, string $methodName)" />
        <scope attributes="private static" doc="&#xA;Returns the provided data for a method.&#xA;&lt;string&gt; $docComment  - &#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array|iterator  - when a data provider is specified and exists&#xA;                       null           when no data provider is specified&#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="435" lineend="473" name="getDataFromDataProviderAnnotation" returns="array" signature="array getDataFromDataProviderAnnotation(string $docComment, string $className, string $methodName)" />
        <scope attributes="public static" doc="&#xA;&lt;string&gt; $docComment  - full docComment string&#xA;Returns array  - when @testWith annotation is defined&#xA;              null  when @testWith annotation is omitted&#xA;Throws PHPUnit_Framework_Exception when @testWith annotation is defined but cannot be parsed&#xA;" ilk="function" line="483" lineend="516" name="getDataFromTestWithAnnotation" returns="array" signature="array getDataFromTestWithAnnotation(string $docComment)" />
        <scope attributes="private static" ilk="function" line="518" lineend="526" name="cleanUpMultiLineAnnotation" returns="docComment" signature="cleanUpMultiLineAnnotation($docComment)" />
        <scope attributes="public static" doc="&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array &#xA;Throws ReflectionException&#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="538" lineend="559" name="parseTestMethodAnnotations" returns="array" signature="array parseTestMethodAnnotations(string $className, string $methodName = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array &#xA;Since Method available since Release 5.4.0&#xA;" ilk="function" line="569" lineend="591" name="getInlineAnnotations" returns="array" signature="array getInlineAnnotations(string $className, string $methodName)" />
        <scope attributes="private static" doc="&#xA;&lt;string&gt; $docblock  - &#xA;Returns array &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="600" lineend="615" name="parseAnnotations" returns="array" signature="array parseAnnotations(string $docblock)" />
        <scope attributes="public static" doc="&#xA;Returns the backup settings for a test.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="627" lineend="641" name="getBackupSettings" returns="array" signature="array getBackupSettings(string $className, string $methodName)" />
        <scope attributes="public static" doc="&#xA;Returns the dependencies for a test class or method.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="653" lineend="674" name="getDependencies" returns="array" signature="array getDependencies(string $className, string $methodName)" />
        <scope attributes="public static" doc="&#xA;Returns the error handler settings for a test.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns bool &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="686" lineend="693" name="getErrorHandlerSettings" returns="bool" signature="bool getErrorHandlerSettings(string $className, string $methodName)" />
        <scope attributes="public static" doc="&#xA;Returns the groups for a test class or method.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array &#xA;Since Method available since Release 3.2.0&#xA;" ilk="function" line="705" lineend="746" name="getGroups" returns="array" signature="array getGroups(string $className, string $methodName = &apos;&apos;)" />
        <scope attributes="public static" doc="&#xA;Returns the size of the test.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns int &#xA;Since Method available since Release 3.6.0&#xA;" ilk="function" line="758" lineend="775" name="getSize" returns="int" signature="int getSize(string $className, string $methodName)" />
        <scope attributes="public static" doc="&#xA;Returns the tickets for a test class or method.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns array &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="787" lineend="805" name="getTickets" returns="array" signature="array getTickets(string $className, string $methodName)" />
        <scope attributes="public static" doc="&#xA;Returns the process isolation settings for a test.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns bool &#xA;Since Method available since Release 3.4.1&#xA;" ilk="function" line="817" lineend="830" name="getProcessIsolationSettings" returns="bool" signature="bool getProcessIsolationSettings(string $className, string $methodName)" />
        <scope attributes="public static" doc="&#xA;Returns the preserve global state settings for a test.&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;Returns bool &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="842" lineend="849" name="getPreserveGlobalStateSettings" returns="bool" signature="bool getPreserveGlobalStateSettings(string $className, string $methodName)" />
        <scope attributes="public static" doc="&#xA;&lt;string&gt; $className  - &#xA;Returns array &#xA;Since Method available since Release 4.0.8&#xA;" ilk="function" line="858" lineend="892" name="getHookMethods" returns="array" signature="array getHookMethods(string $className)" />
        <scope attributes="private static" doc="&#xA;Returns array &#xA;Since Method available since Release 4.0.9&#xA;" ilk="function" line="899" lineend="907" name="emptyHookMethodsArray" returns="array" signature="array emptyHookMethodsArray()" />
        <scope attributes="private static" doc="&#xA;&lt;string&gt; $className  - &#xA;&lt;string&gt; $methodName  - &#xA;&lt;string&gt; $settingName  - &#xA;Returns bool &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="918" lineend="944" name="getBooleanAnnotationSetting" returns="bool" signature="bool getBooleanAnnotationSetting(string $className, string $methodName, string $settingName)" />
        <scope attributes="private static" doc="&#xA;&lt;string&gt; $element  - &#xA;Returns array &#xA;Throws PHPUnit_Framework_InvalidCoversTargetException&#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="955" lineend="1065" name="resolveElementToReflectionObjects" returns="array" signature="array resolveElementToReflectionObjects(string $element)" />
        <scope attributes="private static" doc="&#xA;&lt;array&gt; $reflectors  - &#xA;Returns array &#xA;" ilk="function" line="1072" lineend="1092" name="resolveReflectionObjectsToLines" returns="array" signature="array resolveReflectionObjectsToLines(array $reflectors)" />
        <scope attributes="private static" doc="&#xA;&lt;reflectionmethod&gt; $method  - &#xA;Returns bool &#xA;Since Method available since Release 4.0.8&#xA;" ilk="function" line="1101" lineend="1104" name="isBeforeClassMethod" returns="bool" signature="bool isBeforeClassMethod(ReflectionMethod $method)" />
        <scope attributes="private static" doc="&#xA;&lt;reflectionmethod&gt; $method  - &#xA;Returns bool &#xA;Since Method available since Release 4.0.8&#xA;" ilk="function" line="1113" lineend="1116" name="isBeforeMethod" returns="bool" signature="bool isBeforeMethod(ReflectionMethod $method)" />
        <scope attributes="private static" doc="&#xA;&lt;reflectionmethod&gt; $method  - &#xA;Returns bool &#xA;Since Method available since Release 4.0.8&#xA;" ilk="function" line="1125" lineend="1128" name="isAfterClassMethod" returns="bool" signature="bool isAfterClassMethod(ReflectionMethod $method)" />
        <scope attributes="private static" doc="&#xA;&lt;reflectionmethod&gt; $method  - &#xA;Returns bool &#xA;Since Method available since Release 4.0.8&#xA;" ilk="function" line="1137" lineend="1140" name="isAfterMethod" returns="bool" signature="bool isAfterMethod(ReflectionMethod $method)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="TestSuiteIterator.php">
    <scope ilk="blob" lang="PHP" name="TestSuiteIterator.php" src="phpunit-5.5.0/src/Util/TestSuiteIterator.php">
      <scope doc="Iterator for test suites.&#xA;&#xA;@since Class available since Release 3.1.0" ilk="class" interfacerefs="RecursiveIterator" line="16" lineend="103" name="PHPUnit_Util_TestSuiteIterator">
        <variable attributes="protected" citdl="int" doc="@var int" line="21" name="position" />
        <variable attributes="protected" citdl="PHPUnit_Framework_Test" doc="@var PHPUnit_Framework_Test[]" line="26" name="tests" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;phpunit_framework_testsuite&gt; $testSuite  - &#xA;" ilk="function" line="31" lineend="34" name="__construct" signature="__construct(PHPUnit_Framework_TestSuite $testSuite)" />
        <scope attributes="public" doc="&#xA;Rewinds the Iterator to the first element.&#xA;" ilk="function" line="39" lineend="42" name="rewind" signature="rewind()" />
        <scope attributes="public" doc="&#xA;Checks if there is a current element after calls to rewind() or next().&#xA;Returns bool &#xA;" ilk="function" line="49" lineend="52" name="valid" returns="bool" signature="bool valid()" />
        <scope attributes="public" doc="&#xA;Returns the key of the current element.&#xA;Returns int &#xA;" ilk="function" line="59" lineend="62" name="key" returns="int" signature="int key()" />
        <scope attributes="public" doc="&#xA;Returns the current element.&#xA;Returns phpunit_framework_test &#xA;" ilk="function" line="69" lineend="72" name="current" returns="PHPUnit_Framework_Test" signature="phpunit_framework_test current()" />
        <scope attributes="public" doc="&#xA;Moves forward to next element.&#xA;" ilk="function" line="77" lineend="80" name="next" signature="next()" />
        <scope attributes="public" doc="&#xA;Returns the sub iterator for the current element.&#xA;Returns phpunit_util_testsuiteiterator &#xA;" ilk="function" line="87" lineend="92" name="getChildren" returns="PHPUnit_Util_TestSuiteIterator" signature="phpunit_util_testsuiteiterator getChildren()" />
        <scope attributes="public" doc="&#xA;Checks whether the current element has children.&#xA;Returns bool &#xA;" ilk="function" line="99" lineend="102" name="hasChildren" returns="bool" signature="bool hasChildren()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="Type.php">
    <scope ilk="blob" lang="PHP" name="Type.php" src="phpunit-5.5.0/src/Util/Type.php">
      <scope doc="Utility class for textual type (and value) representation.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" line="16" lineend="38" name="PHPUnit_Util_Type">
        <scope attributes="public static" ilk="function" line="18" lineend="37" name="isType" returns="in_array()" signature="isType($type)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="XML.php">
    <scope ilk="blob" lang="PHP" name="XML.php" src="phpunit-5.5.0/src/Util/XML.php">
      <scope doc="XML helpers.&#xA;&#xA;@since Class available since Release 3.2.0" ilk="class" line="16" lineend="255" name="PHPUnit_Util_XML">
        <scope attributes="public static" doc="&#xA;Load an $actual document into a DOMDocument.  This is called&#xA;from the selector assertions.&#xA;If $actual is already a DOMDocument, it is returned with&#xA;no changes.  Otherwise, $actual is loaded into a new DOMDocument&#xA;as either HTML or XML, depending on the value of $isHtml. If $isHtml is&#xA;false and $xinclude is true, xinclude is performed on the loaded&#xA;DOMDocument.&#xA;Note: prior to PHPUnit 3.3.0, this method loaded a file and&#xA;not a string as it currently does.  To load a file into a&#xA;DOMDocument, use loadFile() instead.&#xA;&lt;string|domdocument&gt; $actual  - &#xA;&lt;bool&gt; $isHtml  - &#xA;&lt;string&gt; $filename  - &#xA;&lt;bool&gt; $xinclude  - &#xA;&lt;bool&gt; $strict  - &#xA;Returns domdocument &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="42" lineend="113" name="load" returns="DOMDocument" signature="domdocument load($actual, bool $isHtml = false, string $filename = &apos;&apos;, bool $xinclude = false, bool $strict = false)" />
        <scope attributes="public static" doc="&#xA;Loads an XML (or HTML) file into a DOMDocument object.&#xA;&lt;string&gt; $filename  - &#xA;&lt;bool&gt; $isHtml  - &#xA;&lt;bool&gt; $xinclude  - &#xA;&lt;bool&gt; $strict  - &#xA;Returns domdocument &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="127" lineend="143" name="loadFile" returns="DOMDocument" signature="domdocument loadFile(string $filename, bool $isHtml = false, bool $xinclude = false, bool $strict = false)" />
        <scope attributes="public static" doc="&#xA;&lt;domnode&gt; $node  - &#xA;Since Method available since Release 3.3.0&#xA;" ilk="function" line="150" lineend="159" name="removeCharacterDataNodes" signature="removeCharacterDataNodes(DOMNode $node)" />
        <scope attributes="public static" doc="&#xA;Escapes a string for the use in XML documents&#xA;Any Unicode character is allowed, excluding the surrogate blocks, FFFE,&#xA;and FFFF (not even as character reference).&#xA;See http://www.w3.org/TR/xml/#charsets&#xA;&lt;string&gt; $string  - &#xA;Returns string &#xA;Since Method available since Release 3.4.6&#xA;" ilk="function" line="173" lineend="184" name="prepareString" returns="string" signature="string prepareString(string $string)" />
        <scope attributes="public static" doc="&#xA;&quot;Convert&quot; a DOMElement object into a PHP variable.&#xA;&lt;domelement&gt; $element  - &#xA;Returns mixed &#xA;Since Method available since Release 3.4.0&#xA;" ilk="function" line="195" lineend="254" name="xmlToVariable" returns="mixed" signature="mixed xmlToVariable(DOMElement $element)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="JSON.php">
    <scope ilk="blob" lang="PHP" name="JSON.php" src="phpunit-5.5.0/src/Util/Log/JSON.php">
      <scope classrefs="PHPUnit_Util_Printer" doc="A TestListener that generates JSON messages.&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" interfacerefs="PHPUnit_Framework_TestListener" line="16" lineend="260" name="PHPUnit_Util_Log_JSON">
        <variable attributes="protected" citdl="string" doc="@var string" line="21" name="currentTestSuiteName" />
        <variable attributes="protected" citdl="string" doc="@var string" line="26" name="currentTestName" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="31" name="currentTestPass" />
        <scope attributes="public" doc="&#xA;An error occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="40" lineend="51" name="addError" signature="addError(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A warning occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_warning&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 5.1.0&#xA;" ilk="function" line="62" lineend="73" name="addWarning" signature="addWarning(PHPUnit_Framework_Test $test, PHPUnit_Framework_Warning $e, float $time)" />
        <scope attributes="public" doc="&#xA;A failure occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_assertionfailederror&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="82" lineend="93" name="addFailure" signature="addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, float $time)" />
        <scope attributes="public" doc="&#xA;Incomplete test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="102" lineend="113" name="addIncompleteTest" signature="addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Risky test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="124" lineend="135" name="addRiskyTest" signature="addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Skipped test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="144" lineend="155" name="addSkippedTest" signature="addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A testsuite started.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;" ilk="function" line="162" lineend="174" name="startTestSuite" signature="startTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A testsuite ended.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;" ilk="function" line="181" lineend="185" name="endTestSuite" signature="endTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test started.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="192" lineend="204" name="startTest" signature="startTest(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;A test ended.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="212" lineend="217" name="endTest" signature="endTest(PHPUnit_Framework_Test $test, float $time)" />
        <scope attributes="protected" doc="&#xA;&lt;string&gt; $status  - &#xA;&lt;float&gt; $time  - &#xA;&lt;array&gt; $trace  - &#xA;&lt;string&gt; $message  - &#xA;&lt;phpunit_framework_testcase|null&gt; $test  - &#xA;" ilk="function" line="226" lineend="245" name="writeCase" signature="writeCase(string $status, float $time, array $trace=[], string $message = &apos;&apos;, $test = null)" />
        <scope attributes="public" doc="&#xA;&lt;string&gt; $buffer  - &#xA;" ilk="function" line="250" name="write" signature="write(string $buffer)" />
        <scope ilk="function" line="252" lineend="256" name="(anonymous 1)" signature="(anonymous 1)(&amp; $input)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="JUnit.php">
    <scope ilk="blob" lang="PHP" name="JUnit.php" src="phpunit-5.5.0/src/Util/Log/JUnit.php">
      <scope classrefs="PHPUnit_Util_Printer" doc="A TestListener that generates a logfile of the test execution in XML markup.&#xA;&#xA;The XML markup used is the same as the one that is used by the JUnit Ant task.&#xA;&#xA;@since Class available since Release 2.1.0" ilk="class" interfacerefs="PHPUnit_Framework_TestListener" line="18" lineend="458" name="PHPUnit_Util_Log_JUnit">
        <variable attributes="protected" citdl="DOMDocument" doc="@var DOMDocument" line="23" name="document" />
        <variable attributes="protected" citdl="DOMElement" doc="@var DOMElement" line="28" name="root" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="33" name="logIncompleteSkipped" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="38" name="writeDocument" />
        <variable attributes="protected" citdl="DOMElement" doc="@var DOMElement[]" line="43" name="testSuites" />
        <variable attributes="protected" citdl="int" doc="@var int[]" line="48" name="testSuiteTests" />
        <variable attributes="protected" citdl="int" doc="@var int[]" line="53" name="testSuiteAssertions" />
        <variable attributes="protected" citdl="int" doc="@var int[]" line="58" name="testSuiteErrors" />
        <variable attributes="protected" citdl="int" doc="@var int[]" line="63" name="testSuiteFailures" />
        <variable attributes="protected" citdl="int" doc="@var int[]" line="68" name="testSuiteTimes" />
        <variable attributes="protected" citdl="int" doc="@var int" line="73" name="testSuiteLevel" />
        <variable attributes="protected" citdl="DOMElement" doc="@var DOMElement" line="78" name="currentTestCase" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="83" name="attachCurrentTestCase" />
        <scope attributes="public __ctor__" doc="&#xA;Constructor.&#xA;&lt;mixed&gt; $out  - &#xA;&lt;bool&gt; $logIncompleteSkipped  - &#xA;" ilk="function" line="91" lineend="102" name="__construct" signature="__construct(mixed $out = null, bool $logIncompleteSkipped = false)" />
        <scope attributes="public" doc="&#xA;Flush buffer and close output.&#xA;" ilk="function" line="107" lineend="114" name="flush" signature="flush()" />
        <scope attributes="public" doc="&#xA;An error occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="123" lineend="127" name="addError" signature="addError(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A warning occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_warning&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 5.1.0&#xA;" ilk="function" line="138" lineend="142" name="addWarning" signature="addWarning(PHPUnit_Framework_Test $test, PHPUnit_Framework_Warning $e, float $time)" />
        <scope attributes="public" doc="&#xA;A failure occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_assertionfailederror&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="151" lineend="155" name="addFailure" signature="addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, float $time)" />
        <scope attributes="public" doc="&#xA;Incomplete test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="164" lineend="183" name="addIncompleteTest" signature="addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Risky test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since  Method available since Release 4.0.0&#xA;" ilk="function" line="194" lineend="213" name="addRiskyTest" signature="addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Skipped test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since  Method available since Release 3.0.0&#xA;" ilk="function" line="224" lineend="243" name="addSkippedTest" signature="addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A testsuite started.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since  Method available since Release 2.2.0&#xA;" ilk="function" line="252" lineend="279" name="startTestSuite" signature="startTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A testsuite ended.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since  Method available since Release 2.2.0&#xA;" ilk="function" line="288" lineend="324" name="endTestSuite" signature="endTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test started.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="331" lineend="350" name="startTest" signature="startTest(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;A test ended.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="358" lineend="394" name="endTest" signature="endTest(PHPUnit_Framework_Test $test, float $time)" />
        <scope attributes="public" doc="&#xA;Returns the XML as a string.&#xA;Returns string &#xA;Since  Method available since Release 2.2.0&#xA;" ilk="function" line="403" lineend="406" name="getXML" returns="string" signature="string getXML()" />
        <scope attributes="public" doc="&#xA;Enables or disables the writing of the document&#xA;in flush().&#xA;This is a &quot;hack&quot; needed for the integration of&#xA;PHPUnit with Phing.&#xA;Returns string &#xA;Since  Method available since Release 2.2.0&#xA;" ilk="function" line="419" lineend="424" name="setWriteDocument" returns="string" signature="string setWriteDocument($flag)" />
        <scope attributes="private" doc="&#xA;Method which generalizes addError() and addFailure()&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;&lt;string&gt; $type  - &#xA;" ilk="function" line="434" lineend="457" name="doAddFault" signature="doAddFault(PHPUnit_Framework_Test $test, Exception $e, float $time, string $type)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="TAP.php">
    <scope ilk="blob" lang="PHP" name="TAP.php" src="phpunit-5.5.0/src/Util/Log/TAP.php">
      <scope classrefs="PHPUnit_Util_Printer" doc="A TestListener that generates a logfile of the&#xA;test execution using the Test Anything Protocol (TAP).&#xA;&#xA;@since Class available since Release 3.0.0" ilk="class" interfacerefs="PHPUnit_Framework_TestListener" line="17" lineend="271" name="PHPUnit_Util_Log_TAP">
        <variable attributes="protected" citdl="int" doc="@var int" line="22" name="testNumber" />
        <variable attributes="protected" citdl="int" doc="@var int" line="27" name="testSuiteLevel" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="32" name="testSuccessful" />
        <scope attributes="public __ctor__" doc="&#xA;Constructor.&#xA;&lt;mixed&gt; $out  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.3.4&#xA;" ilk="function" line="43" lineend="47" name="__construct" signature="__construct(mixed $out = null)" />
        <scope attributes="public" doc="&#xA;An error occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="56" lineend="59" name="addError" signature="addError(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A warning occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_warning&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 5.1.0&#xA;" ilk="function" line="70" lineend="73" name="addWarning" signature="addWarning(PHPUnit_Framework_Test $test, PHPUnit_Framework_Warning $e, float $time)" />
        <scope attributes="public" doc="&#xA;A failure occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_assertionfailederror&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="82" lineend="115" name="addFailure" signature="addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, float $time)" />
        <scope attributes="public" doc="&#xA;Incomplete test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="124" lineend="127" name="addIncompleteTest" signature="addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Risky test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="138" lineend="149" name="addRiskyTest" signature="addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Skipped test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="160" lineend="171" name="addSkippedTest" signature="addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A testsuite started.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;" ilk="function" line="178" lineend="181" name="startTestSuite" signature="startTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A testsuite ended.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;" ilk="function" line="188" lineend="195" name="endTestSuite" signature="endTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test started.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="202" lineend="206" name="startTest" signature="startTest(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;A test ended.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="214" lineend="227" name="endTest" signature="endTest(PHPUnit_Framework_Test $test, float $time)" />
        <scope attributes="protected" doc="&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;string&gt; $prefix  - &#xA;&lt;string&gt; $directive  - &#xA;" ilk="function" line="234" lineend="247" name="writeNotOk" signature="writeNotOk(PHPUnit_Framework_Test $test, string $prefix = &apos;&apos;, string $directive = &apos;&apos;)" />
        <scope attributes="private" doc="&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="252" lineend="270" name="writeDiagnostics" signature="writeDiagnostics(PHPUnit_Framework_Test $test)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645205" path="TeamCity.php">
    <scope ilk="blob" lang="PHP" name="TeamCity.php" src="phpunit-5.5.0/src/Util/Log/TeamCity.php">
      <import line="11" module="SebastianBergmann\Comparator" symbol="ComparisonFailure" />
      <scope classrefs="PHPUnit_TextUI_ResultPrinter" doc="A TestListener that generates a logfile of the test execution using the&#xA;TeamCity format (for use with PhpStorm, for instance).&#xA;&#xA;@since Class available since Release 5.0.0" ilk="class" line="19" lineend="410" name="PHPUnit_Util_Log_TeamCity">
        <variable attributes="private" citdl="bool" doc="@var bool" line="24" name="isSummaryTestCountPrinted" />
        <variable attributes="private" citdl="string" doc="@var string" line="29" name="startedTestName" />
        <variable attributes="private" citdl="string" doc="@var string" line="34" name="flowId" />
        <scope attributes="protected" doc="&#xA;&lt;string&gt; $progress  - &#xA;" ilk="function" line="39" lineend="41" name="writeProgress" signature="writeProgress(string $progress)" />
        <scope attributes="public" doc="&#xA;&lt;phpunit_framework_testresult&gt; $result  - &#xA;" ilk="function" line="46" lineend="50" name="printResult" signature="printResult(PHPUnit_Framework_TestResult $result)" />
        <scope attributes="public" doc="&#xA;An error occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="59" lineend="69" name="addError" signature="addError(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A warning occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_warning&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 5.1.0&#xA;" ilk="function" line="80" lineend="90" name="addWarning" signature="addWarning(PHPUnit_Framework_Test $test, PHPUnit_Framework_Warning $e, float $time)" />
        <scope attributes="public" doc="&#xA;A failure occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_assertionfailederror&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="99" lineend="132" name="addFailure" signature="addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, float $time)" />
        <scope attributes="public" doc="&#xA;Incomplete test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="141" lineend="144" name="addIncompleteTest" signature="addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Risky test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="153" lineend="156" name="addRiskyTest" signature="addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Skipped test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="165" lineend="175" name="addSkippedTest" signature="addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" ilk="function" line="177" lineend="187" name="printIgnoredTest" signature="printIgnoredTest($testName, Exception $e)" />
        <scope attributes="public" doc="&#xA;A testsuite started.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;" ilk="function" line="194" lineend="233" name="startTestSuite" signature="startTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A testsuite ended.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;" ilk="function" line="240" lineend="259" name="endTestSuite" signature="endTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test started.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="266" lineend="279" name="startTest" signature="startTest(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;A test ended.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="287" lineend="298" name="endTest" signature="endTest(PHPUnit_Framework_Test $test, float $time)" />
        <scope attributes="private" doc="&#xA;&lt;string&gt; $eventName  - &#xA;&lt;array&gt; $params  - &#xA;" ilk="function" line="304" lineend="318" name="printEvent" signature="printEvent(string $eventName, array $params = [])" />
        <scope attributes="private static" doc="&#xA;&lt;exception&gt; $e  - &#xA;Returns string &#xA;" ilk="function" line="325" lineend="340" name="getMessage" returns="string" signature="string getMessage(Exception $e)" />
        <scope attributes="private static" doc="&#xA;&lt;exception&gt; $e  - &#xA;Returns string &#xA;" ilk="function" line="347" lineend="361" name="getDetails" returns="string" signature="string getDetails(Exception $e)" />
        <scope attributes="private static" doc="&#xA;&lt;mixed&gt; $value  - &#xA;Returns string &#xA;" ilk="function" line="368" lineend="379" name="getPrimitiveValueAsString" returns="string" signature="string getPrimitiveValueAsString(mixed $value)" />
        <scope attributes="private static" doc="@param  $text&#xA;&#xA;@return string" ilk="function" line="386" lineend="396" name="escapeValue" returns="string" signature="string escapeValue($text)" />
        <scope attributes="private static" doc="&#xA;&lt;string&gt; $className  - &#xA;Returns string &#xA;" ilk="function" line="403" lineend="409" name="getFileName" returns="string" signature="string getFileName(string $className)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645206" path="NamePrettifier.php">
    <scope ilk="blob" lang="PHP" name="NamePrettifier.php" src="phpunit-5.5.0/src/Util/TestDox/NamePrettifier.php">
      <scope doc="Prettifies class and method names for use in TestDox documentation.&#xA;&#xA;@since Class available since Release 2.1.0" ilk="class" line="16" lineend="144" name="PHPUnit_Util_TestDox_NamePrettifier">
        <variable attributes="protected" citdl="string" doc="@var string" line="21" name="prefix" />
        <variable attributes="protected" citdl="string" doc="@var string" line="26" name="suffix" />
        <variable attributes="protected" citdl="array" doc="@var array" line="31" name="strings" />
        <scope attributes="public" doc="&#xA;Prettifies the name of a test class.&#xA;&lt;string&gt; $name  - &#xA;Returns string &#xA;" ilk="function" line="40" lineend="59" name="prettifyTestClass" returns="string" signature="string prettifyTestClass(string $name)" />
        <scope attributes="public" doc="&#xA;Prettifies the name of a test method.&#xA;&lt;string&gt; $name  - &#xA;Returns string &#xA;" ilk="function" line="68" lineend="123" name="prettifyTestMethod" returns="string" signature="string prettifyTestMethod(string $name)" />
        <scope attributes="public" doc="&#xA;Sets the prefix of test names.&#xA;&lt;string&gt; $prefix  - &#xA;" ilk="function" line="130" lineend="133" name="setPrefix" signature="setPrefix(string $prefix)" />
        <scope attributes="public" doc="&#xA;Sets the suffix of test names.&#xA;&lt;string&gt; $suffix  - &#xA;" ilk="function" line="140" lineend="143" name="setSuffix" signature="setSuffix(string $suffix)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645206" path="ResultPrinter.php">
    <scope ilk="blob" lang="PHP" name="ResultPrinter.php" src="phpunit-5.5.0/src/Util/TestDox/ResultPrinter.php">
      <scope attributes="abstract" classrefs="PHPUnit_Util_Printer" doc="Base class for printers of TestDox documentation.&#xA;&#xA;@since Class available since Release 2.1.0" ilk="class" interfacerefs="PHPUnit_Framework_TestListener" line="16" lineend="414" name="PHPUnit_Util_TestDox_ResultPrinter">
        <variable attributes="protected" citdl="PHPUnit_Util_TestDox_NamePrettifier" doc="@var PHPUnit_Util_TestDox_NamePrettifier" line="21" name="prettifier" />
        <variable attributes="protected" citdl="string" doc="@var string" line="26" name="testClass" />
        <variable attributes="protected" citdl="int" doc="@var int" line="31" name="testStatus" />
        <variable attributes="protected" citdl="array" doc="@var array" line="36" name="tests" />
        <variable attributes="protected" citdl="int" doc="@var int" line="41" name="successful" />
        <variable attributes="protected" citdl="int" doc="@var int" line="46" name="warned" />
        <variable attributes="protected" citdl="int" doc="@var int" line="51" name="failed" />
        <variable attributes="protected" citdl="int" doc="@var int" line="56" name="risky" />
        <variable attributes="protected" citdl="int" doc="@var int" line="61" name="skipped" />
        <variable attributes="protected" citdl="int" doc="@var int" line="66" name="incomplete" />
        <variable attributes="protected" citdl="string" doc="@var string" line="71" name="currentTestClassPrettified" />
        <variable attributes="protected" citdl="string" doc="@var string" line="76" name="currentTestMethodPrettified" />
        <variable attributes="private" citdl="array" doc="@var array" line="81" name="groups" />
        <variable attributes="private" citdl="array" doc="@var array" line="86" name="excludeGroups" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;resource&gt; $out  - &#xA;&lt;array&gt; $groups  - &#xA;&lt;array&gt; $excludeGroups  - &#xA;" ilk="function" line="93" lineend="102" name="__construct" signature="__construct(resource $out = null, array $groups=[], array $excludeGroups=[])" />
        <scope attributes="public" doc="&#xA;Flush buffer and close output.&#xA;" ilk="function" line="107" lineend="113" name="flush" signature="flush()" />
        <scope attributes="public" doc="&#xA;An error occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="122" lineend="130" name="addError" signature="addError(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A warning occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_warning&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 5.1.0&#xA;" ilk="function" line="141" lineend="149" name="addWarning" signature="addWarning(PHPUnit_Framework_Test $test, PHPUnit_Framework_Warning $e, float $time)" />
        <scope attributes="public" doc="&#xA;A failure occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_assertionfailederror&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="158" lineend="166" name="addFailure" signature="addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, float $time)" />
        <scope attributes="public" doc="&#xA;Incomplete test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="175" lineend="183" name="addIncompleteTest" signature="addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Risky test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 4.0.0&#xA;" ilk="function" line="194" lineend="202" name="addRiskyTest" signature="addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Skipped test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;Since Method available since Release 3.0.0&#xA;" ilk="function" line="213" lineend="221" name="addSkippedTest" signature="addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A testsuite started.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since Method available since Release 2.2.0&#xA;" ilk="function" line="230" lineend="232" name="startTestSuite" signature="startTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A testsuite ended.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;Since Method available since Release 2.2.0&#xA;" ilk="function" line="241" lineend="243" name="endTestSuite" signature="endTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test started.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="250" lineend="289" name="startTest" signature="startTest(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;A test ended.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="297" lineend="321" name="endTest" signature="endTest(PHPUnit_Framework_Test $test, float $time)" />
        <scope attributes="protected" doc="&#xA;Since Method available since Release 2.3.0&#xA;" ilk="function" line="326" lineend="333" name="doEndClass" signature="doEndClass()" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;start run&apos; event.&#xA;" ilk="function" line="338" lineend="340" name="startRun" signature="startRun()" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;start class&apos; event.&#xA;&lt;string&gt; $name  - &#xA;" ilk="function" line="347" lineend="349" name="startClass" signature="startClass(string $name)" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;on test&apos; event.&#xA;&lt;string&gt; $name  - &#xA;&lt;bool&gt; $success  - &#xA;" ilk="function" line="357" lineend="359" name="onTest" signature="onTest(string $name, bool $success = true)" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;end class&apos; event.&#xA;&lt;string&gt; $name  - &#xA;" ilk="function" line="366" lineend="368" name="endClass" signature="endClass(string $name)" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;end run&apos; event.&#xA;" ilk="function" line="373" lineend="375" name="endRun" signature="endRun()" />
        <scope attributes="private" doc="&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;Returns bool &#xA;" ilk="function" line="382" lineend="413" name="isOfInterest" returns="bool" signature="bool isOfInterest(PHPUnit_Framework_Test $test)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645206" path="HTML.php">
    <scope ilk="blob" lang="PHP" name="HTML.php" src="phpunit-5.5.0/src/Util/TestDox/ResultPrinter/HTML.php">
      <scope classrefs="PHPUnit_Util_TestDox_ResultPrinter" doc="Prints TestDox documentation in HTML format.&#xA;&#xA;@since Class available since Release 2.1.0" ilk="class" line="16" lineend="144" name="PHPUnit_Util_TestDox_ResultPrinter_HTML">
        <variable attributes="protected" citdl="bool" doc="@var bool" line="21" name="printsHTML" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;start run&apos; event.&#xA;" ilk="function" line="88" lineend="91" name="startRun" signature="startRun()" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;start class&apos; event.&#xA;&lt;string&gt; $name  - &#xA;" ilk="function" line="98" lineend="107" name="startClass" signature="startClass(string $name)" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;on test&apos; event.&#xA;&lt;string&gt; $name  - &#xA;&lt;bool&gt; $success  - &#xA;" ilk="function" line="115" lineend="125" name="onTest" signature="onTest(string $name, bool $success = true)" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;end class&apos; event.&#xA;&lt;string&gt; $name  - &#xA;" ilk="function" line="132" lineend="135" name="endClass" signature="endClass(string $name)" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;end run&apos; event.&#xA;" ilk="function" line="140" lineend="143" name="endRun" signature="endRun()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645206" path="Text.php">
    <scope ilk="blob" lang="PHP" name="Text.php" src="phpunit-5.5.0/src/Util/TestDox/ResultPrinter/Text.php">
      <scope classrefs="PHPUnit_Util_TestDox_ResultPrinter" doc="Prints TestDox documentation in text format.&#xA;&#xA;@since Class available since Release 2.1.0" ilk="class" line="16" lineend="54" name="PHPUnit_Util_TestDox_ResultPrinter_Text">
        <scope attributes="protected" doc="&#xA;Handler for &apos;start class&apos; event.&#xA;&lt;string&gt; $name  - &#xA;" ilk="function" line="23" lineend="26" name="startClass" signature="startClass(string $name)" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;on test&apos; event.&#xA;&lt;string&gt; $name  - &#xA;&lt;bool&gt; $success  - &#xA;" ilk="function" line="34" lineend="43" name="onTest" signature="onTest(string $name, bool $success = true)" />
        <scope attributes="protected" doc="&#xA;Handler for &apos;end class&apos; event.&#xA;&lt;string&gt; $name  - &#xA;" ilk="function" line="50" lineend="53" name="endClass" signature="endClass(string $name)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645206" path="XML.php">
    <scope ilk="blob" lang="PHP" name="XML.php" src="phpunit-5.5.0/src/Util/TestDox/ResultPrinter/XML.php">
      <scope classrefs="PHPUnit_Util_Printer" doc="@since Class available since Release 5.4.0" ilk="class" interfacerefs="PHPUnit_Framework_TestListener" line="14" lineend="228" name="PHPUnit_Util_TestDox_ResultPrinter_XML">
        <variable attributes="private" citdl="DOMDocument" doc="@var DOMDocument" line="19" name="document" />
        <variable attributes="private" citdl="DOMElement" doc="@var DOMElement" line="24" name="root" />
        <variable attributes="private" citdl="PHPUnit_Util_TestDox_NamePrettifier" doc="@var PHPUnit_Util_TestDox_NamePrettifier" line="29" name="prettifier" />
        <variable attributes="private" citdl="Exception" doc="@var Exception" line="34" name="exception" />
        <scope attributes="public __ctor__" doc="&#xA;&lt;string|resource&gt; $out  - &#xA;" ilk="function" line="39" lineend="50" name="__construct" signature="__construct($out = null)" />
        <scope attributes="public" doc="&#xA;Flush buffer and close output.&#xA;" ilk="function" line="55" lineend="60" name="flush" signature="flush()" />
        <scope attributes="public" doc="&#xA;An error occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="69" lineend="72" name="addError" signature="addError(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A warning occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_warning&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="81" lineend="83" name="addWarning" signature="addWarning(PHPUnit_Framework_Test $test, PHPUnit_Framework_Warning $e, float $time)" />
        <scope attributes="public" doc="&#xA;A failure occurred.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;phpunit_framework_assertionfailederror&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="92" lineend="95" name="addFailure" signature="addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, float $time)" />
        <scope attributes="public" doc="&#xA;Incomplete test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="104" lineend="106" name="addIncompleteTest" signature="addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Risky test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="115" lineend="117" name="addRiskyTest" signature="addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;Skipped test.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;exception&gt; $e  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="126" lineend="128" name="addSkippedTest" signature="addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, float $time)" />
        <scope attributes="public" doc="&#xA;A test suite started.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;" ilk="function" line="135" lineend="137" name="startTestSuite" signature="startTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test suite ended.&#xA;&lt;phpunit_framework_testsuite&gt; $suite  - &#xA;" ilk="function" line="144" lineend="146" name="endTestSuite" signature="endTestSuite(PHPUnit_Framework_TestSuite $suite)" />
        <scope attributes="public" doc="&#xA;A test started.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;" ilk="function" line="153" lineend="156" name="startTest" signature="startTest(PHPUnit_Framework_Test $test)" />
        <scope attributes="public" doc="&#xA;A test ended.&#xA;&lt;phpunit_framework_test&gt; $test  - &#xA;&lt;float&gt; $time  - &#xA;" ilk="function" line="164" lineend="227" name="endTest" returns="boolean" signature="endTest(PHPUnit_Framework_Test $test, float $time)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645206" path="Default.php">
    <scope ilk="blob" lang="PHP" name="Default.php" src="phpunit-5.5.0/src/Util/PHP/Default.php">
      <scope classrefs="PHPUnit_Util_PHP" doc="Default utility for PHP sub-processes.&#xA;&#xA;@since Class available since Release 3.5.12" ilk="class" line="16" lineend="215" name="PHPUnit_Util_PHP_Default">
        <variable attributes="protected" citdl="string" doc="@var string" line="21" name="tempFile" />
        <variable attributes="protected" citdl="bool" doc="@var bool" line="26" name="useTempFile" />
        <scope attributes="public" doc="&#xA;Runs a single job (PHP code) using a separate PHP process.&#xA;&lt;string&gt; $job  - &#xA;&lt;array&gt; $settings  - &#xA;Returns array &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="38" lineend="52" name="runJob" returns="array" signature="array runJob(string $job, array $settings=[])" />
        <scope attributes="protected" doc="&#xA;Returns an array of file handles to be used in place of pipes&#xA;Returns array &#xA;" ilk="function" line="59" lineend="62" name="getHandles" returns="array" signature="array getHandles()" />
        <scope attributes="protected" doc="&#xA;Handles creating the child process and returning the STDOUT and STDERR&#xA;&lt;string&gt; $job  - &#xA;&lt;array&gt; $settings  - &#xA;Returns array &#xA;Throws PHPUnit_Framework_Exception&#xA;" ilk="function" line="74" lineend="191" name="runProcess" returns="array" signature="array runProcess(string $job, array $settings)" />
        <scope attributes="protected" doc="&#xA;&lt;resource&gt; $pipe  - &#xA;&lt;string&gt; $job  - &#xA;Throws PHPUnit_Framework_Exception&#xA;Since Method available since Release 3.5.12&#xA;" ilk="function" line="201" lineend="204" name="process" signature="process(resource $pipe, string $job)" />
        <scope attributes="protected" doc="&#xA;Since Method available since Release 3.5.12&#xA;" ilk="function" line="209" lineend="214" name="cleanup" signature="cleanup()" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645206" path="Windows.php">
    <scope ilk="blob" lang="PHP" name="Windows.php" src="phpunit-5.5.0/src/Util/PHP/Windows.php">
      <scope classrefs="PHPUnit_Util_PHP_Default" doc="Windows utility for PHP sub-processes.&#xA;&#xA;Reading from STDOUT or STDERR hangs forever on Windows if the output is&#xA;too large.&#xA;&#xA;@since Class available since Release 3.5.12&#xA;@see https://bugs.php.net/bug.php?id=51800" ilk="class" line="20" lineend="41" name="PHPUnit_Util_PHP_Windows">
        <variable attributes="protected" citdl="boolean" line="22" name="useTempFile" />
        <scope attributes="protected" ilk="function" line="24" lineend="35" name="getHandles" signature="getHandles()" />
        <scope attributes="public" ilk="function" line="37" lineend="40" name="getCommand" returns="string" signature="getCommand(array $settings, $file = null)" />
      </scope>
    </scope>
  </file>
  <file lang="PHP" mtime="1474645206" path="eval-stdin.php">
    <scope ilk="blob" lang="PHP" name="eval-stdin.php" src="phpunit-5.5.0/src/Util/PHP/eval-stdin.php" />
  </file>
</codeintel>
