Turn the cocoa notification handler into a list, instead of having just one
handler. This is because in SciMoz we use this method to setup and listen for
notification events, in order to pass back to DOM listeners, but ScintillaView
also registers a handler in order to deal with certain events.
Index: /Users/toddw/as/komodo-devel/src/scintilla/cocoa/ScintillaCocoa.h
===================================================================
--- cocoa/ScintillaCocoa.h	(revision 81787)
+++ cocoa/ScintillaCocoa.h	(working copy)
@@ -97,6 +106,17 @@
 #define	WM_COMMAND	1001
 #define WM_NOTIFY	1002
 
+class NotificationHandler {
+public:
+  intptr_t windowid;
+  SciNotifyFunc callback;
+
+  NotificationHandler(intptr_t id, SciNotifyFunc cb) : windowid(id), callback(cb) { }
+  bool operator==(const NotificationHandler &handler) const {
+    return (windowid == handler.windowid && callback == handler.callback);
+  }
+};
+
 /**
  * Main scintilla class, implemented for OS X (Cocoa).
  */
@@ -106,8 +123,7 @@
   TimerTarget* timerTarget;
   NSEvent* lastMouseEvent;
   
-  SciNotifyFunc	notifyProc;
-  intptr_t notifyObj;
+  std::vector<NotificationHandler> notificationHandlers;
 
   bool capturedMouse;
 
@@ -144,6 +160,8 @@
   virtual ~ScintillaCocoa();
 
   void RegisterNotifyCallback(intptr_t windowid, SciNotifyFunc callback);
+  // lower-case 'u' is deliberate.
+  void unregisterNotifyCallback(intptr_t windowid, SciNotifyFunc callback);
   sptr_t WndProc(unsigned int iMessage, uptr_t wParam, sptr_t lParam);
 
   ScintillaView* TopContainer();
Index: /Users/toddw/as/komodo-devel/src/scintilla/cocoa/ScintillaCocoa.mm
===================================================================
--- cocoa/ScintillaCocoa.mm	(revision 81787)
+++ cocoa/ScintillaCocoa.mm	(working copy)
@@ -386,8 +386,6 @@
   wMargin = viewMargin;
   timerTarget = [[TimerTarget alloc] init: this];
   lastMouseEvent = NULL;
-  notifyObj = NULL;
-  notifyProc = NULL;
   capturedMouse = false;
   enteredSetScrollingSize = false;
   scrollSpeed = 1;
@@ -1688,26 +1709,43 @@
  */
 void ScintillaCocoa::RegisterNotifyCallback(intptr_t windowid, SciNotifyFunc callback)
 {
-  notifyObj = windowid;
-  notifyProc = callback;
+  notificationHandlers.push_back(NotificationHandler(windowid, callback));
 }
 
+void ScintillaCocoa::unregisterNotifyCallback(intptr_t windowid, SciNotifyFunc callback)
+{
+  std::vector<NotificationHandler>::iterator it = std::find(notificationHandlers.begin(),
+								  notificationHandlers.end(),
+								  NotificationHandler(windowid, callback));
+  if (it != notificationHandlers.end()) {
+    notificationHandlers.erase(it);
+  }
+}
+
 //--------------------------------------------------------------------------------------------------
 
 void ScintillaCocoa::NotifyChange()
 {
-  if (notifyProc != NULL)
-    notifyProc(notifyObj, WM_COMMAND, Platform::LongFromTwoShorts(GetCtrlID(), SCEN_CHANGE),
-	       (uintptr_t) this);
+  std::vector<NotificationHandler>::iterator it;
+  for (it = notificationHandlers.begin(); it != notificationHandlers.end(); it++)
+  {
+    it->callback(it->windowid, WM_COMMAND,
+		      Platform::LongFromTwoShorts(GetCtrlID(), SCEN_CHANGE),
+	              (uintptr_t) this);
+  }
 }
 
 //--------------------------------------------------------------------------------------------------
 
 void ScintillaCocoa::NotifyFocus(bool focus)
 {
-  if (notifyProc != NULL)
-    notifyProc(notifyObj, WM_COMMAND, Platform::LongFromTwoShorts(GetCtrlID(), (focus ? SCEN_SETFOCUS : SCEN_KILLFOCUS)),
-	       (uintptr_t) this);
+  std::vector<NotificationHandler>::iterator it;
+  for (it = notificationHandlers.begin(); it != notificationHandlers.end(); it++)
+  {
+    it->callback(it->windowid, WM_COMMAND,
+		      Platform::LongFromTwoShorts(GetCtrlID(), (focus ? SCEN_SETFOCUS : SCEN_KILLFOCUS)),
+	              (uintptr_t) this);
+  }
 }
 
 //--------------------------------------------------------------------------------------------------
@@ -1719,12 +1757,13 @@
  * @param scn The notification to send.
  */
 void ScintillaCocoa::NotifyParent(SCNotification scn)
-{ 
-  if (notifyProc != NULL)
+{
+  std::vector<NotificationHandler>::iterator it;
+  for (it = notificationHandlers.begin(); it != notificationHandlers.end(); it++)
   {
     scn.nmhdr.hwndFrom = (void*) this;
     scn.nmhdr.idFrom = GetCtrlID();
-    notifyProc(notifyObj, WM_NOTIFY, (uintptr_t) 0, (uintptr_t) &scn);
+    it->callback(it->windowid, WM_NOTIFY, (uintptr_t) 0, (uintptr_t) &scn);
   }
 }
 
Index: /Users/toddw/as/komodo-devel/src/scintilla/cocoa/ScintillaView.mm
===================================================================
--- cocoa/ScintillaView.mm	(revision 81787)
+++ cocoa/ScintillaView.mm	(working copy)
@@ -1109,6 +1131,7 @@
 - (void) dealloc
 {
   [[NSNotificationCenter defaultCenter] removeObserver:self];
+  mBackend->unregisterNotifyCallback(nil, notification);
   delete mBackend;
   [super dealloc];
 }
